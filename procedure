CREATE DEFINER=`t12247adm`@`%` PROCEDURE `db_12247_d_001_instance_1`.`PROC_ADD_MONITOR_LOG`(
IN `incidentData` JSON 
)
    SQL SECURITY INVOKER
BEGIN

	DECLARE sourceSystem VARCHAR(100);
	DECLARE failureStatus VARCHAR(100);
	DECLARE failureMsg VARCHAR(500);
	DECLARE driveItReq VARCHAR(100);
	DECLARE driveItReqStatus VARCHAR(50);
	DECLARE ticketLink VARCHAR(1000);
	DECLARE jobName VARCHAR(500);


	SET sourceSystem = incidentData ->> '$.sourceSystem';
	SET failureStatus = incidentData ->> '$.failureStatus';
	SET failureMsg = incidentData ->> '$.failureMsg';
	SET driveItReq = incidentData ->> '$.driveItReq';
	SET driveItReqStatus = incidentData ->> '$.driveItReqStatus';
	SET ticketLink = incidentData ->> '$.ticketLink';
	SET jobName = incidentData ->> '$.jobName';



INSERT INTO MONITOR_LOG 
(SOURCE_SYSTEM, FAILURE_STATUS, FAILURE_MSG, DRIVE_IT_REQ, DRIVE_IT_REQ_STATUS, LAST_EMAIL_SENT, T_STMP_ADD, T_STAMP_UPDATED, TICKET_LINK, JOB_NAME)
VALUES(sourceSystem, failureStatus, failureMsg, driveItReq, driveItReqStatus, CURRENT_TIMESTAMP(),CURRENT_TIMESTAMP(), CURRENT_TIMESTAMP(), ticketLink, jobName);

END

==================================

CREATE DEFINER=`t12247adm`@`%` PROCEDURE `db_12247_d_001_instance_1`.`PROC_ADD_TRANSACTION_LOG`(
	IN `TransactionId` VARCHAR(50),
	IN `VIN` VARCHAR(50),
	IN `DealerCode` VARCHAR(50),
	IN `TemplateId` VARCHAR(50),
	IN `MetaData` MEDIUMTEXT,
	IN `SessionTime` TIMESTAMP,
	IN `SessionId` VARCHAR(50),
	IN `TimestampEpoch` BIGINT,
	IN `S3ObjectUrl` VARCHAR(500),
	IN `SourceSystem` VARCHAR(50),
	IN `IngestionStatus` VARCHAR(50),
	IN `ErrorText` MEDIUMTEXT,
	IN `ReceiveTimestamp` TIMESTAMP
)
    SQL SECURITY INVOKER
BEGIN
	
DECLARE EXIT HANDLER FOR SQLEXCEPTION
BEGIN
SHOW ERRORS;
ROLLBACK;
END;


	INSERT INTO TRANSACTION_LOG  
		(I_TRANSACTION_ID,
		I_VIN,
		C_DLR,
		C_TEMPLATE_ID,
		N_META_DATA,
		T_SESSION,
		C_SESSION_ID,
		TIMESTAMPEPOCH,
		S3_OBJECT_URL,
		N_STATUS,
		N_ERROR_TEXT,
		N_SRCE,
		T_SRCE_ADD,
		T_STMP_RECEIVE)
	VALUES 
		(TransactionId,
		VIN,
		DealerCode,
		TemplateId,
		MetaData,
		SessionTime,
		SessionId,
		TimestampEpoch,
		S3ObjectUrl,
		IngestionStatus,
		ErrorText,
		SourceSystem,
		NOW(),
		ReceiveTimestamp);
		
COMMIT WORK;
END
=========================================
CREATE DEFINER=`t12247adm`@`%` PROCEDURE `db_12247_d_001_instance_1`.`PROC_DELETE_RO_JOURNEY_COMMENT`(
IN `commentID` BIGINT
)
    SQL SECURITY INVOKER
BEGIN
		UPDATE RO_JOURNEY_COMMENT 
		SET IS_ACTIVE= 0
		WHERE I_COMMENT_ID= commentID;
END
==========================
CREATE DEFINER=`t12247adm`@`%` PROCEDURE `db_12247_d_001_instance_1`.`PROC_GET_BUYBACK_VEH`(
	IN `year` VARCHAR(10),
	IN `model` VARCHAR(50),
	IN `engine` VARCHAR(50),
	IN `pageOffset` INT,
	IN `pageSize` INT,
	IN `sortBy` VARCHAR(50),
	IN `sortOrder` VARCHAR(50)
)
    SQL SECURITY INVOKER
BEGIN
SET pageSize = IF(pageSize=0, 10,pageSize);

IF sortBy = '' THEN
 	-- join vehicle master, dealer master to apply filters
	SELECT b.I_VIN AS vin, 
		v.I_MOD_YR AS modelYear,
		v.C_FAM AS family,
		v.C_ENGINE_SALES_CODE AS `engine`,
		v.C_FUEL_TYPE AS `fuelType`,
		DATE_FORMAT(D_PACKAGE_CREATION, "%m/%d/%y") AS templateDate,
		"" AS checkDate,
		D_VHCL_SURRENDER AS surrenderDate,
		A_BUYBACK_AMT AS buybackAmount,
		A_TOTAL_BUYBACK_AMT AS totalBuybackAmount,
		N_PACKAGE_TYPE AS buybackType,
		b.T_STMP_ADD AS dateAdded
	FROM BUYBACK_DATA b
		JOIN VEHICLE_MASTER v ON b.I_VIN=v.I_VIN
	WHERE DATE(b.D_PACKAGE_CREATION) >= DATE(NOW()) - INTERVAL 13 MONTH
		AND (year = '' OR v.I_MOD_YR = year) 
		AND (model = '' OR v.C_FAM = model) 
		AND (engine = '' OR v.C_ENGINE_SALES_CODE = engine)
	ORDER BY b.D_PACKAGE_CREATION DESC
	LIMIT pageOffset,pageSize;
ELSE

	SELECT b.I_VIN AS vin, 
		v.I_MOD_YR AS modelYear,
		v.C_FAM AS family,
		v.C_ENGINE_SALES_CODE AS `engine`,
		v.C_FUEL_TYPE AS `fuelType`,
		DATE_FORMAT(D_PACKAGE_CREATION, "%m/%d/%y") AS templateDate,
		"" AS checkDate,
		D_VHCL_SURRENDER AS surrenderDate,
		A_BUYBACK_AMT AS buybackAmount,
		A_TOTAL_BUYBACK_AMT AS totalBuybackAmount,
		N_PACKAGE_TYPE AS buybackType,
		b.T_STMP_ADD AS dateAdded
	FROM BUYBACK_DATA b
		JOIN VEHICLE_MASTER v ON b.I_VIN=v.I_VIN
	WHERE DATE(b.D_PACKAGE_CREATION) >= DATE(NOW()) - INTERVAL 13 MONTH
		AND (year = '' OR v.I_MOD_YR = year) 
		AND (model = '' OR v.C_FAM = model) 
		AND (engine = '' OR v.C_ENGINE_SALES_CODE = engine)
	ORDER BY 
		  CASE WHEN sortBy ='templateDate' AND sortOrder ='ASC' THEN b.D_PACKAGE_CREATION END ASC,
        CASE WHEN sortBy ='templateDate' AND sortOrder ='DESC' THEN b.D_PACKAGE_CREATION END DESC,
        CASE WHEN sortBy ='vin' AND sortOrder ='ASC' THEN b.I_VIN END ASC,
        CASE WHEN sortBy ='vin' AND sortOrder ='DESC' THEN b.I_VIN END DESC,
        CASE WHEN sortBy ='surrenderDate' AND sortOrder ='ASC' THEN b.D_VHCL_SURRENDER END ASC,
        CASE WHEN sortBy ='surrenderDate' AND sortOrder ='DESC' THEN b.D_VHCL_SURRENDER END DESC,
        CASE WHEN sortBy ='buybackAmount' AND sortOrder ='ASC' THEN b.A_BUYBACK_AMT END ASC,
        CASE WHEN sortBy ='buybackAmount' AND sortOrder ='DESC' THEN b.A_BUYBACK_AMT END DESC,
        CASE WHEN sortBy ='totalBuybackAmount' AND sortOrder ='ASC' THEN b.A_TOTAL_BUYBACK_AMT END ASC,
        CASE WHEN sortBy ='totalBuybackAmount' AND sortOrder ='DESC' THEN b.A_TOTAL_BUYBACK_AMT END DESC,
        CASE WHEN sortBy ='buybackType' AND sortOrder ='ASC' THEN b.N_PACKAGE_TYPE END ASC,
        CASE WHEN sortBy ='buybackType' AND sortOrder ='DESC' THEN b.N_PACKAGE_TYPE END DESC,
        CASE WHEN sortBy ='dateAdded' AND sortOrder ='ASC' THEN b.T_STMP_ADD END ASC,
        CASE WHEN sortBy ='dateAdded' AND sortOrder ='DESC' THEN b.T_STMP_ADD END DESC
	LIMIT pageOffset,pageSize;

END IF;	
	-- join vehicle master, dealer master to apply filters
	SELECT COUNT(1) AS Total
	FROM BUYBACK_DATA b
		JOIN VEHICLE_MASTER v ON b.I_VIN=v.I_VIN
	WHERE DATE(b.D_PACKAGE_CREATION) >= DATE(NOW()) - INTERVAL 13 MONTH
		AND (year = '' OR v.I_MOD_YR = year) 
		AND (model = '' OR v.C_FAM = model) 
		AND (engine = '' OR v.C_ENGINE_SALES_CODE = engine)
	;
END
===========================
CREATE DEFINER=`t12247adm`@`%` PROCEDURE `db_12247_d_001_instance_1`.`PROC_GET_CHERWELL_CASES`(
	IN `roJourneyId` VARCHAR(50),
	IN `vin` VARCHAR(50)
)
BEGIN
SELECT c1.I_RO_JOURNEY as roJourneyId, c2.CASEID as caseID, c1.CREATEDDATETIME as createdDate, (CASE WHEN c1.CLOSEDDATETIME='1899-12-30 00:00:00' THEN NULL ELSE c1.CLOSEDDATETIME END) as closeDate, STATUS as status, c3.AgentTechnicianNarrative_Html as conversation, c2.DAYSINSHOP as daysInShop, c2.ISVEHICLEOFFROADORTOWIN as vorORTowIn, c2.CUSTOMERCOMPLAINT as customerComplaint, c2.CUSTOMERCONCERN as customerConcern, c2.REPAIRSPARTSORTESTSPERFORMED as repairStatus, c2.NUMBEROFREPAIRATTEMPTS AS numberOfRepairAttempts, c2.APPLICATIONGROUP as applicationGroupName, c2.PRIMARYSYSTEM as primarySystem, roJourneyOpen.T_START_JOURNEY AS roOpenDate
FROM CHERWELL_CASE_PART1 c1, CHERWELL_CASE_PART2 c2,  CHERWELL_CASE_PART3 c3, RO_JOURNEY roJourneyOpen
WHERE  c1.RECID=c2.RECID 
	AND c3.RECID=c1.RECID 
	AND c2.I_RO_JOURNEY=roJourneyOpen.I_RO_JOURNEY
	AND (roJourneyId='' OR roJourneyOpen.I_RO_JOURNEY=roJourneyId)
	AND roJourneyOpen.I_VIN = vin
ORDER BY c1.CREATEDDATETIME DESC;
END
======================================
CREATE DEFINER=`t12247adm`@`%` PROCEDURE `db_12247_d_001_instance_1`.`PROC_GET_CHERWELL_CASES_BY_RO_JOURNEY`(
	IN `roJourneyId` VARCHAR(50),
	IN `vin` VARCHAR(50)
)
BEGIN
SELECT c2.CASEID as caseID, c1.CREATEDDATETIME as createdDate, c1.CLOSEDDATETIME as closeDate, STATUS as status, c3.AgentTechnicianNarrative_Html as conversation, c2.DAYSINSHOP as daysInShop, c2.ISVEHICLEOFFROADORTOWIN as vorORTowIn, c2.CUSTOMERCOMPLAINT as customerComplaint, c2.CUSTOMERCONCERN as customerConcern, c2.REPAIRSPARTSORTESTSPERFORMED as repairStatus, c2.NUMBEROFREPAIRATTEMPTS AS numberOfRepairAttempts, c2.APPLICATIONGROUP as applicationGroupName, c2.PRIMARYSYSTEM as primarySystem, roJourneyOpen.T_START_JOURNEY AS roOpenDate
FROM CHERWELL_CASE_PART1 c1, CHERWELL_CASE_PART2 c2,  CHERWELL_CASE_PART3 c3, RO_JOURNEY_OPEN roJourneyOpen
WHERE c1.RECID=c2.RECID AND c3.RECID=c1.RECID AND c2.I_RO_JOURNEY=roJourneyId AND roJourneyOpen.I_VIN = vin;
END
=========================================
CREATE DEFINER=`t12247adm`@`%` PROCEDURE `db_12247_d_001_instance_1`.`PROC_GET_FAILED_TRANSACTIONS`(
	IN `DurationHrs` INT,
	IN `TemplateId` VARCHAR(50)
)
    SQL SECURITY INVOKER
BEGIN

	SELECT 
	l.I_VIN AS vin,
	l.C_DLR AS dealer_code,
	l.C_TEMPLATE_ID AS templateId,
	l.T_SESSION AS session_time,
	l.C_SESSION_ID AS sessionId,
   JSON_EXTRACT(l.N_META_DATA,'$.qdfMetadata') AS qdfMetadata,
	l.N_ERROR_TEXT AS error_text
	FROM TRANSACTION_LOG l 
	WHERE l.N_STATUS='FAILED' AND 
	(TemplateId = '' OR l.C_TEMPLATE_ID = TemplateId) AND
	l.T_SRCE_ADD > now() - interval DurationHrs HOUR
	ORDER BY l.T_SRCE_ADD DESC;


END
============================
CREATE DEFINER=`t12247adm`@`%` PROCEDURE `db_12247_d_001_instance_1`.`PROC_GET_MONITOR_LOG`(
IN `jobName` varchar(500)
)
    SQL SECURITY INVOKER
BEGIN
	SELECT LOG_ID AS id, 
			SOURCE_SYSTEM AS sourceSystem, 
			FAILURE_STATUS AS failureStatus, 
			FAILURE_MSG AS failureMsg, 
			DRIVE_IT_REQ AS driveItReq, 
			DRIVE_IT_REQ_STATUS AS driveItReqStatus, 
			LAST_EMAIL_SENT AS lastEmailSent, 
			T_STMP_ADD AS timeStmpAdd, 
			DATE_FORMAT(T_STAMP_UPDATED, "%b/%d/%Y: %T") AS timeStampupdated,
			TICKET_LINK AS ticketLink,
			JOB_NAME AS jobName
			
	FROM MONITOR_LOG AS ML
	WHERE ML.JOB_NAME = jobName AND ML.DRIVE_IT_REQ_STATUS != "Resolved" AND  ML.DRIVE_IT_REQ_STATUS != "Closed";
END
==============================
CREATE DEFINER=`t12247adm`@`%` PROCEDURE `db_12247_d_001_instance_1`.`PROC_GET_NEW_VEH_PREP`(
	IN `businessCenter` VARCHAR(500),
	IN `dealerCode` VARCHAR(500),
	IN `year` VARCHAR(500),
	IN `model` VARCHAR(500),
	IN `engine` VARCHAR(500),
	IN `roOpenDateFrom` DATE,
	IN `roOpenDateTo` DATE,
	IN `caseOpenDateFrom` DATE,
	IN `caseOpenDateTo` DATE,
	IN `caseCloseDateFrom` DATE,
	IN `caseCloseDateTo` DATE,
	IN `status` VARCHAR(50),
	IN `salesCode` VARCHAR(3),
	IN `fuelType` VARCHAR(50),
	IN `cumDays` VARCHAR(10),
	IN `daysDown` VARCHAR(10),
	IN `repairCount` VARCHAR(10),
	IN `odometer` VARCHAR(50),
	IN `witech` VARCHAR(5),
	IN `wiadvisor` VARCHAR(5),
	IN `roNumber` VARCHAR(5),
	IN `forceClose` VARCHAR(5),
	IN `caseEscalatedDateFrom` DATE,
	IN `caseEscalatedDateTo` DATE,
	IN `partsOrderedDateFrom` DATE,
	IN `partsOrderedDateTo` DATE,
	IN `partsShippedDateFrom` DATE,
	IN `partsShippedDateTo` DATE,
	IN `partsDeliveredDateFrom` DATE,
	IN `partsDeliveredDateTo` DATE,
	IN `pageOffset` INT,
	IN `pageSize` INT,
	IN `sortBy` VARCHAR(50),
	IN `sortOrder` VARCHAR(50)
)
    SQL SECURITY INVOKER
BEGIN

DECLARE dayDownRangeStart INT;
DECLARE dayDownRangeEnd INT;
DECLARE cumDaysRangeStart INT;
DECLARE cumDaysRangeEnd INT;
DECLARE repairCountRangeStart INT;
DECLARE repairCountRangeEnd INT;

SET dayDownRangeStart = SUBSTRING_INDEX(daysDown, '-', 1);
SET dayDownRangeEnd = SUBSTRING_INDEX(daysDown,'-',-1);

SET cumDaysRangeStart = SUBSTRING_INDEX(cumDays,'-',1);
SET cumDaysRangeEnd = SUBSTRING_INDEX(cumDays,'-',-1);

SET repairCountRangeStart = SUBSTRING_INDEX(repairCount,'-',1);
SET repairCountRangeEnd = SUBSTRING_INDEX(repairCount,'-',-1);

SET pageSize = IF(pageSize=0, 10,pageSize);

IF sortBy = '' THEN
	-- join  dealer master to apply filters
	SELECT DISTINCT ro.I_RO_JOURNEY as roJourneyId,
			 ro.I_VIN AS vin,
			 ro.C_FAM AS model,
			 ro.I_MOD_YR AS year,
			 FLOOR(ro.Q_ODOMETER) AS odometer,
			 ro.N_DLR AS dealer ,
			 ro.T_START_JOURNEY AS roDate,
			 ro.I_DAYS_DOWN AS noOfDaysDown,
			 ro.I_REPAIR_COUNT AS repairCount,
			 ro.I_CUM_DAYS AS cumDays,
			 ro.L_CURRENT_RO_STATUS AS `status`,
			 ro.I_FIRST_CHERWELL_CASEID AS starCaseId, 
			 ro.T_FIRST_CREATED_CHERWELL_CASEID AS caseOpenDate,
			 ro.I_DLR_PH_NMBR AS dealerContact,
			 ro.C_DLR AS dealerCode,
			 ro.C_FUEL_TYPE AS `fuelType`,
			 ro.C_ENGINE_SALES_CODE AS `engine`
	FROM RO_JOURNEY_OPEN ro
	LEFT JOIN VEHICLE_MASTER v ON v.I_VIN=ro.I_VIN
	LEFT JOIN GPOP_DATA g ON ro.I_RO_JOURNEY=g.I_RO_JOURNEY AND ro.I_VIN=g.I_VIN AND g.C_DLR=ro.C_DLR
	LEFT JOIN CHERWELL_CASE_PART3 c ON c.I_RO_JOURNEY=ro.I_RO_JOURNEY AND c.I_VIN=ro.I_VIN AND c.C_DLR=ro.C_DLR
	WHERE ro.L_IS_NVP='Y'
		AND ro.C_DLR NOT IN (SELECT C_DLR FROM EXCLUDED_DEALERS) -- Excluded Test Dealers
		AND IFNULL(ro.I_MOD_YR,'')!='' AND IFNULL(ro.C_FAM,'')!='' AND IFNULL(ro.C_FUEL_TYPE,'')!='' -- Excluded Competitive Vehicles
		AND ro.C_DLR_BUSINESS != 'I' -- Excluded International Dealers
		AND (dealerCode = '' OR FIND_IN_SET(ro.C_DLR,dealerCode))
		AND (businessCenter = '' OR FIND_IN_SET(ro.N_BUSINESS_CENTER,businessCenter))
		AND (year = '' OR FIND_IN_SET(ro.I_MOD_YR,year))
		AND (model = '' OR FIND_IN_SET(ro.C_FAM,model))
		AND (`engine` = '' OR FIND_IN_SET(ro.C_ENGINE_SALES_CODE,`engine`))
		AND (`status` = '' OR ro.L_CURRENT_RO_STATUS = `status`) 
	   AND (salesCode = '' OR ro.C_TRANSM = salesCode) 
	   AND (`fuelType` = '' OR IFNULL(ro.C_FUEL_TYPE,'') = `fuelType`)    
	   AND (roOpenDateFrom IS NULL OR DATE(ro.T_START_JOURNEY) BETWEEN roOpenDateFrom AND roOpenDateTo) 
		AND (caseOpenDateFrom IS NULL OR DATE(ro.T_FIRST_CREATED_CHERWELL_CASEID) BETWEEN caseOpenDateFrom AND caseOpenDateTo) 
		AND (caseCloseDateFrom IS NULL OR DATE(ro.T_LAST_CLOSE_CHERWELL_CASEID) BETWEEN caseCloseDateFrom AND caseCloseDateTo)
		AND (cumDays = '' OR ro.I_CUM_DAYS BETWEEN cumDaysRangeStart AND cumDaysRangeEnd)
		AND (daysDown = '' OR ro.I_DAYS_DOWN BETWEEN dayDownRangeStart AND dayDownRangeEnd)
		AND (repairCount = '' OR ro.I_REPAIR_COUNT BETWEEN repairCountRangeStart AND repairCountRangeEnd)
		AND (odometer = '' OR (CASE WHEN odometer = '-50' THEN (CAST(ro.Q_ODOMETER AS DECIMAL) < 50) WHEN odometer = '+50' THEN (CAST(ro.Q_ODOMETER AS DECIMAL) > 50) END))
		AND (witech = '' OR (CASE WHEN witech = 'true' THEN ro.T_WITECH_SCAN_EARLIEST IS NOT NULL WHEN witech = 'false' THEN ro.T_WITECH_SCAN_EARLIEST IS NULL END))	
		AND (wiadvisor = '' OR (CASE WHEN wiadvisor = 'true' THEN ro.T_WIADVISOR_SCAN IS NOT NULL WHEN wiadvisor = 'false' THEN ro.T_WIADVISOR_SCAN IS NULL END))	
		AND (roNumber = '' OR (CASE WHEN roNumber = 'true' THEN ro.I_RO IS NOT NULL WHEN roNumber = 'false' THEN ro.I_RO IS NULL END))	
		AND (forceClose = '' OR (CASE WHEN forceClose = 'true' THEN ro.L_FORCE_CLOSE IS NOT NULL WHEN forceClose = 'false' THEN ro.L_FORCE_CLOSE IS NULL END))	
		AND (caseEscalatedDateFrom IS NULL OR DATE(c.LASTESCALATEDDATETIME) BETWEEN caseEscalatedDateFrom AND caseEscalatedDateTo)
		AND (partsOrderedDateFrom IS NULL OR DATE(g.T_ORDER_CONFIRM) BETWEEN partsOrderedDateFrom AND partsOrderedDateTo)
		AND (partsShippedDateFrom IS NULL OR DATE(g.T_SHIPPED) BETWEEN partsShippedDateFrom AND partsShippedDateTo)
		AND (partsDeliveredDateFrom IS NULL OR DATE(g.T_DELIVERY) BETWEEN partsDeliveredDateFrom AND partsDeliveredDateTo)
	ORDER BY ro.T_START_JOURNEY DESC
	LIMIT pageOffset,pageSize;
	
ELSE

	SELECT DISTINCT ro.I_RO_JOURNEY as roJourneyId,
			 ro.I_VIN AS vin,
			 ro.C_FAM AS model,
			 ro.I_MOD_YR AS year,
			 FLOOR(ro.Q_ODOMETER) AS odometer,
			 ro.N_DLR AS dealer ,
			 ro.T_START_JOURNEY AS roDate,
			 ro.I_DAYS_DOWN AS noOfDaysDown,
			 ro.I_REPAIR_COUNT AS repairCount,
			 ro.I_CUM_DAYS AS cumDays,
			 ro.L_CURRENT_RO_STATUS AS `status`,
			 ro.I_FIRST_CHERWELL_CASEID AS starCaseId, 
			 ro.T_FIRST_CREATED_CHERWELL_CASEID AS caseOpenDate,
			 ro.I_DLR_PH_NMBR AS dealerContact,
			 ro.C_DLR AS dealerCode,
			 ro.C_FUEL_TYPE AS `fuelType`,
			 ro.C_ENGINE_SALES_CODE AS `engine`
	FROM RO_JOURNEY_OPEN ro
	LEFT JOIN VEHICLE_MASTER v ON v.I_VIN=ro.I_VIN
	LEFT JOIN GPOP_DATA g ON ro.I_RO_JOURNEY=g.I_RO_JOURNEY AND ro.I_VIN=g.I_VIN AND g.C_DLR=ro.C_DLR
	LEFT JOIN CHERWELL_CASE_PART3 c ON c.I_RO_JOURNEY=ro.I_RO_JOURNEY AND c.I_VIN=ro.I_VIN AND c.C_DLR=ro.C_DLR
	WHERE ro.L_IS_NVP='Y'
		AND ro.C_DLR NOT IN (SELECT C_DLR FROM EXCLUDED_DEALERS) -- Excluded Test Dealers
		AND IFNULL(ro.I_MOD_YR,'')!='' AND IFNULL(ro.C_FAM,'')!='' AND IFNULL(ro.C_FUEL_TYPE,'')!='' -- Excluded Competitive Vehicles
		AND ro.C_DLR_BUSINESS != 'I' -- Excluded International Dealers 
		AND (dealerCode = '' OR FIND_IN_SET(ro.C_DLR,dealerCode))
		AND (businessCenter = '' OR FIND_IN_SET(ro.N_BUSINESS_CENTER,businessCenter))
		AND (year = '' OR FIND_IN_SET(ro.I_MOD_YR,year))
		AND (model = '' OR FIND_IN_SET(ro.C_FAM,model))
		AND (`engine` = '' OR FIND_IN_SET(ro.C_ENGINE_SALES_CODE,`engine`))
		AND (`status` = '' OR ro.L_CURRENT_RO_STATUS = `status`) 
	   AND (salesCode = '' OR ro.C_TRANSM = salesCode) 
	   AND (`fuelType` = '' OR IFNULL(ro.C_FUEL_TYPE,'') = `fuelType`)    
	   AND (roOpenDateFrom IS NULL OR DATE(ro.T_START_JOURNEY) BETWEEN roOpenDateFrom AND roOpenDateTo) 
		AND (caseOpenDateFrom IS NULL OR DATE(ro.T_FIRST_CREATED_CHERWELL_CASEID) BETWEEN caseOpenDateFrom AND caseOpenDateTo) 
		AND (caseCloseDateFrom IS NULL OR DATE(ro.T_LAST_CLOSE_CHERWELL_CASEID) BETWEEN caseCloseDateFrom AND caseCloseDateTo)
		AND (cumDays = '' OR ro.I_CUM_DAYS BETWEEN cumDaysRangeStart AND cumDaysRangeEnd)
		AND (daysDown = '' OR ro.I_DAYS_DOWN BETWEEN dayDownRangeStart AND dayDownRangeEnd)
		AND (repairCount = '' OR ro.I_REPAIR_COUNT BETWEEN repairCountRangeStart AND repairCountRangeEnd)
		AND (odometer = '' OR (CASE WHEN odometer = '-50' THEN (CAST(ro.Q_ODOMETER AS DECIMAL) < 50) WHEN odometer = '+50' THEN (CAST(ro.Q_ODOMETER AS DECIMAL) > 50) END))
		AND (witech = '' OR (CASE WHEN witech = 'true' THEN ro.T_WITECH_SCAN_EARLIEST IS NOT NULL WHEN witech = 'false' THEN ro.T_WITECH_SCAN_EARLIEST IS NULL END))	
		AND (wiadvisor = '' OR (CASE WHEN wiadvisor = 'true' THEN ro.T_WIADVISOR_SCAN IS NOT NULL WHEN wiadvisor = 'false' THEN ro.T_WIADVISOR_SCAN IS NULL END))	
		AND (roNumber = '' OR (CASE WHEN roNumber = 'true' THEN ro.I_RO IS NOT NULL WHEN roNumber = 'false' THEN ro.I_RO IS NULL END))	
		AND (forceClose = '' OR (CASE WHEN forceClose = 'true' THEN ro.L_FORCE_CLOSE IS NOT NULL WHEN forceClose = 'false' THEN ro.L_FORCE_CLOSE IS NULL END))	
		AND (caseEscalatedDateFrom IS NULL OR DATE(c.LASTESCALATEDDATETIME) BETWEEN caseEscalatedDateFrom AND caseEscalatedDateTo)
		AND (partsOrderedDateFrom IS NULL OR DATE(g.T_ORDER_CONFIRM) BETWEEN partsOrderedDateFrom AND partsOrderedDateTo)
		AND (partsShippedDateFrom IS NULL OR DATE(g.T_SHIPPED) BETWEEN partsShippedDateFrom AND partsShippedDateTo)
		AND (partsDeliveredDateFrom IS NULL OR DATE(g.T_DELIVERY) BETWEEN partsDeliveredDateFrom AND partsDeliveredDateTo)
	ORDER BY 
		  CASE WHEN sortBy ='vin' AND sortOrder ='ASC' THEN ro.I_VIN END ASC,
        CASE WHEN sortBy ='vin' AND sortOrder ='DESC' THEN ro.I_VIN END DESC,
        CASE WHEN sortBy ='model' AND sortOrder ='ASC' THEN ro.C_FAM END ASC,
        CASE WHEN sortBy ='model' AND sortOrder ='DESC' THEN ro.C_FAM END DESC,
        CASE WHEN sortBy ='year' AND sortOrder ='ASC' THEN ro.I_MOD_YR END ASC,
        CASE WHEN sortBy ='year' AND sortOrder ='DESC' THEN ro.I_MOD_YR END DESC,
        CASE WHEN sortBy ='engine' AND sortOrder ='ASC' THEN ro.C_ENGINE_SALES_CODE END ASC,
        CASE WHEN sortBy ='engine' AND sortOrder ='DESC' THEN ro.C_ENGINE_SALES_CODE END DESC,
        CASE WHEN sortBy ='fuelType' AND sortOrder ='ASC' THEN ro.C_FUEL_TYPE END ASC,
        CASE WHEN sortBy ='fuelType' AND sortOrder ='DESC' THEN ro.C_FUEL_TYPE END DESC,
        CASE WHEN sortBy ='dealerCode' AND sortOrder ='ASC' THEN ro.C_DLR END ASC,
        CASE WHEN sortBy ='dealerCode' AND sortOrder ='DESC' THEN ro.C_DLR END DESC,
        CASE WHEN sortBy ='roJourneyId' AND sortOrder ='ASC' THEN ro.I_RO_JOURNEY END ASC,
        CASE WHEN sortBy ='roJourneyId' AND sortOrder ='DESC' THEN ro.I_RO_JOURNEY END DESC,
        CASE WHEN sortBy ='roDate' AND sortOrder ='ASC' THEN ro.T_START_JOURNEY END ASC,
        CASE WHEN sortBy ='roDate' AND sortOrder ='DESC' THEN ro.T_START_JOURNEY END DESC,
	     CASE WHEN sortBy ='noOfDaysDown' AND sortOrder ='ASC' THEN ro.I_DAYS_DOWN END ASC,
        CASE WHEN sortBy ='noOfDaysDown' AND sortOrder ='DESC' THEN ro.I_DAYS_DOWN END DESC,
        CASE WHEN sortBy ='repairCount' AND sortOrder ='ASC' THEN ro.I_REPAIR_COUNT END ASC,
        CASE WHEN sortBy ='repairCount' AND sortOrder='DESC' THEN ro.I_REPAIR_COUNT END DESC,
        CASE WHEN sortBy ='odometer' AND sortOrder ='ASC' THEN CAST(ro.Q_ODOMETER AS DECIMAL) END ASC,
        CASE WHEN sortBy ='odometer' AND sortOrder ='DESC' THEN CAST(ro.Q_ODOMETER AS DECIMAL) END DESC,
        CASE WHEN sortBy ='cumDays' AND sortOrder ='ASC' THEN ro.I_CUM_DAYS END ASC,
        CASE WHEN sortBy ='cumDays' AND sortOrder ='DESC' THEN ro.I_CUM_DAYS END DESC,
        CASE WHEN sortBy ='starCaseId' AND sortOrder ='ASC' THEN ro.I_FIRST_CHERWELL_CASEID END ASC,
        CASE WHEN sortBy ='starCaseId' AND sortOrder ='DESC' THEN ro.I_FIRST_CHERWELL_CASEID END DESC,
        CASE WHEN sortBy ='caseOpenDate' AND sortOrder ='ASC' THEN ro.T_FIRST_CREATED_CHERWELL_CASEID END ASC,
        CASE WHEN sortBy ='caseOpenDate' AND sortOrder ='DESC' THEN ro.T_FIRST_CREATED_CHERWELL_CASEID END DESC,
        CASE WHEN sortBy ='status' AND sortOrder ='ASC' THEN ro.L_CURRENT_RO_STATUS END ASC,
        CASE WHEN sortBy ='status' AND sortOrder ='DESC' THEN ro.L_CURRENT_RO_STATUS END DESC
	LIMIT pageOffset,pageSize;

END IF;

	SELECT COUNT(DISTINCT ro.I_VIN) AS Total
	FROM RO_JOURNEY_OPEN ro
	LEFT JOIN VEHICLE_MASTER v ON v.I_VIN=ro.I_VIN
	LEFT JOIN GPOP_DATA g ON ro.I_RO_JOURNEY=g.I_RO_JOURNEY AND ro.I_VIN=g.I_VIN AND g.C_DLR=ro.C_DLR
	LEFT JOIN CHERWELL_CASE_PART3 c ON c.I_RO_JOURNEY=ro.I_RO_JOURNEY AND c.I_VIN=ro.I_VIN AND c.C_DLR=ro.C_DLR
	WHERE ro.L_IS_NVP='Y'
		AND ro.C_DLR NOT IN (SELECT C_DLR FROM EXCLUDED_DEALERS) -- Excluded Test Dealers
		AND IFNULL(ro.I_MOD_YR,'')!='' AND IFNULL(ro.C_FAM,'')!='' AND IFNULL(ro.C_FUEL_TYPE,'')!='' -- Excluded Competitive Vehicles
		AND ro.C_DLR_BUSINESS != 'I' -- Excluded International Dealers 
		AND (dealerCode = '' OR FIND_IN_SET(ro.C_DLR,dealerCode))
		AND (businessCenter = '' OR FIND_IN_SET(ro.N_BUSINESS_CENTER,businessCenter))
		AND (year = '' OR FIND_IN_SET(ro.I_MOD_YR,year))
		AND (model = '' OR FIND_IN_SET(ro.C_FAM,model))
		AND (`engine` = '' OR FIND_IN_SET(ro.C_ENGINE_SALES_CODE,`engine`))
		AND (`status` = '' OR ro.L_CURRENT_RO_STATUS = `status`) 
	   AND (salesCode = '' OR ro.C_TRANSM = salesCode) 
	   AND (`fuelType` = '' OR IFNULL(ro.C_FUEL_TYPE,'') = `fuelType`)    
	   AND (roOpenDateFrom IS NULL OR DATE(ro.T_START_JOURNEY) BETWEEN roOpenDateFrom AND roOpenDateTo) 
		AND (caseOpenDateFrom IS NULL OR DATE(ro.T_FIRST_CREATED_CHERWELL_CASEID) BETWEEN caseOpenDateFrom AND caseOpenDateTo) 
		AND (caseCloseDateFrom IS NULL OR DATE(ro.T_LAST_CLOSE_CHERWELL_CASEID) BETWEEN caseCloseDateFrom AND caseCloseDateTo)
		AND (cumDays = '' OR ro.I_CUM_DAYS BETWEEN cumDaysRangeStart AND cumDaysRangeEnd)
		AND (daysDown = '' OR ro.I_DAYS_DOWN BETWEEN dayDownRangeStart AND dayDownRangeEnd)
		AND (repairCount = '' OR ro.I_REPAIR_COUNT BETWEEN repairCountRangeStart AND repairCountRangeEnd)
		AND (odometer = '' OR (CASE WHEN odometer = '-50' THEN (CAST(ro.Q_ODOMETER AS DECIMAL) < 50) WHEN odometer = '+50' THEN (CAST(ro.Q_ODOMETER AS DECIMAL) > 50) END))
		AND (witech = '' OR (CASE WHEN witech = 'true' THEN ro.T_WITECH_SCAN_EARLIEST IS NOT NULL WHEN witech = 'false' THEN ro.T_WITECH_SCAN_EARLIEST IS NULL END))	
		AND (wiadvisor = '' OR (CASE WHEN wiadvisor = 'true' THEN ro.T_WIADVISOR_SCAN IS NOT NULL WHEN wiadvisor = 'false' THEN ro.T_WIADVISOR_SCAN IS NULL END))	
		AND (roNumber = '' OR (CASE WHEN roNumber = 'true' THEN ro.I_RO IS NOT NULL WHEN roNumber = 'false' THEN ro.I_RO IS NULL END))	
		AND (forceClose = '' OR (CASE WHEN forceClose = 'true' THEN ro.L_FORCE_CLOSE IS NOT NULL WHEN forceClose = 'false' THEN ro.L_FORCE_CLOSE IS NULL END))	
		AND (caseEscalatedDateFrom IS NULL OR DATE(c.LASTESCALATEDDATETIME) BETWEEN caseEscalatedDateFrom AND caseEscalatedDateTo)
		AND (partsOrderedDateFrom IS NULL OR DATE(g.T_ORDER_CONFIRM) BETWEEN partsOrderedDateFrom AND partsOrderedDateTo)
		AND (partsShippedDateFrom IS NULL OR DATE(g.T_SHIPPED) BETWEEN partsShippedDateFrom AND partsShippedDateTo)
		AND (partsDeliveredDateFrom IS NULL OR DATE(g.T_DELIVERY) BETWEEN partsDeliveredDateFrom AND partsDeliveredDateTo)
	;

 
END
=============================
CREATE DEFINER=`t12247adm`@`%` PROCEDURE `db_12247_d_001_instance_1`.`PROC_GET_PART_DETAILS`(
	IN `roJourneyId` bigint,
	IN `vin` varchar(20)
)
    SQL SECURITY INVOKER
BEGIN
	SELECT 
	I_RO_JOURNEY AS roNumber,
	C_DLR AS dealerCode,
	I_PART AS partNumber,
	I_VIN As vinNumber,
	X_PART_NOUN AS PartNoun,
	X_PART_DESC AS partDescription, 
	L_ORDER_PLACED AS orderPlaced, 
	T_ORDER_CONFIRM AS orderConfirmedTimeStamp, 
	X_ORDER_STATUS as orderStatus, 
	X_ORDER_REASON AS orderReason, 
	D_ORDER_ETA AS orderETADate, 
	I_NATIONAL_DEPOT_INVENTORY AS nationalDepotInventory, 
	I_FIELD_DEPOT_INVENTORY AS fieldDepotInventory, 
	I_SHIPPER AS shipperNumber, 
	X_UPS_TRACKING_NUMBER AS upsTrackingNumber, 
	I_ORDER_QTY AS orderQuantity, 
	X_ORDER_TYPE AS orderType, 
	X_PART_ORDER_NUMBER AS partOrderNumber, 
	X_Facing_PDC AS facingPDC, 
	X_Shipping_PDC AS shippingPDC, 
	T_SHIPPED as shippedTimeStamp, 
	T_DELIVERY AS deliveryTimeStamp, 
	X_ORDER_COMMENT AS orderComment, 
	I_CASE_NUM AS caseNumber, 
	X_CASE_DESC AS caseStatus, 
	X_ORDERS_LINE_COUNT AS orderCount, 
	N_SRCE_ADD AS srceAdded, 
	N_SRCE_UPDATE AS srceUpdate, 
	T_STMP_ADD AS stmpAddTimeStamp, 
	T_STMP_UPDATE as stmpUpdatedTimeStamp, 
	L_ACTIVE AS activ,
	MAX(CASEID) AS caseID, 
	D_CASE_CREATED AS caseCreated, 
	I_SEQ as id
FROM GPOP_DATA as G
WHERE G.I_VIN = vin
		AND (roJourneyId = '' OR G.I_RO_JOURNEY = roJourneyId)
GROUP BY I_VIN , C_DLR , I_PART;

END
=========================================
CREATE DEFINER=`t12247adm`@`%` PROCEDURE `db_12247_d_001_instance_1`.`PROC_GET_PHEV_VEH`(
	IN `businessCenter` VARCHAR(500),
	IN `dealerCode` VARCHAR(500),
	IN `year` VARCHAR(500),
	IN `model` VARCHAR(500),
	IN `engine` VARCHAR(500),
	IN `roOpenDateFrom` DATE,
	IN `roOpenDateTo` DATE,
	IN `caseOpenDateFrom` DATE,
	IN `caseOpenDateTo` DATE,
	IN `caseCloseDateFrom` DATE,
	IN `caseCloseDateTo` DATE,
	IN `status` VARCHAR(50),
	IN `salesCode` VARCHAR(3),
	IN `fuelType` VARCHAR(50),
	IN `cumDays` VARCHAR(10),
	IN `daysDown` VARCHAR(10),
	IN `repairCount` VARCHAR(10),
	IN `odometer` VARCHAR(50),
	IN `witech` VARCHAR(5),
	IN `wiadvisor` VARCHAR(5),
	IN `roNumber` VARCHAR(5),
	IN `forceClose` VARCHAR(5),
	IN `caseEscalatedDateFrom` DATE,
	IN `caseEscalatedDateTo` DATE,
	IN `partsOrderedDateFrom` DATE,
	IN `partsOrderedDateTo` DATE,
	IN `partsShippedDateFrom` DATE,
	IN `partsShippedDateTo` DATE,
	IN `partsDeliveredDateFrom` DATE,
	IN `partsDeliveredDateTo` DATE,
	IN `pageOffset` INT,
	IN `pageSize` INT,
	IN `sortBy` VARCHAR(50),
	IN `sortOrder` VARCHAR(50)
)
    SQL SECURITY INVOKER
BEGIN

DECLARE dayDownRangeStart INT;
DECLARE dayDownRangeEnd INT;
DECLARE cumDaysRangeStart INT;
DECLARE cumDaysRangeEnd INT;
DECLARE repairCountRangeStart INT;
DECLARE repairCountRangeEnd INT;

SET dayDownRangeStart = SUBSTRING_INDEX(daysDown, '-', 1);
SET dayDownRangeEnd = SUBSTRING_INDEX(daysDown,'-',-1);

SET cumDaysRangeStart = SUBSTRING_INDEX(cumDays,'-',1);
SET cumDaysRangeEnd = SUBSTRING_INDEX(cumDays,'-',-1);

SET repairCountRangeStart = SUBSTRING_INDEX(repairCount,'-',1);
SET repairCountRangeEnd = SUBSTRING_INDEX(repairCount,'-',-1);

SET pageSize = IF(pageSize=0, 10,pageSize);

IF sortBy = '' THEN
	-- join  dealer master to apply filters
	SELECT DISTINCT ro.I_RO_JOURNEY as roJourneyId,
			 ro.I_VIN AS vin,
			 ro.C_FAM AS model,
			 ro.I_MOD_YR AS year,
			 FLOOR(ro.Q_ODOMETER) AS odometer,
			 ro.N_DLR AS dealer ,
			 ro.T_START_JOURNEY AS roDate,
			 ro.I_DAYS_DOWN AS noOfDaysDown,
			 ro.I_REPAIR_COUNT AS repairCount,
			 ro.I_CUM_DAYS AS cumDays,
			 ro.L_CURRENT_RO_STATUS AS `status`,
			 ro.I_FIRST_CHERWELL_CASEID AS starCaseId, 
			 ro.T_FIRST_CREATED_CHERWELL_CASEID AS caseOpenDate,
			 ro.I_DLR_PH_NMBR AS dealerContact,
			 ro.C_DLR AS dealerCode,
			 ro.C_FUEL_TYPE AS `fuelType`,
			 ro.C_ENGINE_SALES_CODE AS `engine`
	FROM RO_JOURNEY_OPEN ro
	LEFT JOIN GPOP_DATA g ON ro.I_RO_JOURNEY=g.I_RO_JOURNEY AND ro.I_VIN=g.I_VIN AND g.C_DLR=ro.C_DLR
	LEFT JOIN CHERWELL_CASE_PART3 c ON c.I_RO_JOURNEY=ro.I_RO_JOURNEY AND c.I_VIN=ro.I_VIN AND c.C_DLR=ro.C_DLR
	WHERE ro.C_FUEL_TYPE IN ('ELECTRIC','FHEV','PHEV','MHEV')
		AND ro.C_DLR NOT IN (SELECT C_DLR FROM EXCLUDED_DEALERS) -- Excluded Test Dealers
		AND IFNULL(ro.I_MOD_YR,'')!='' AND IFNULL(ro.C_FAM,'')!='' AND IFNULL(ro.C_FUEL_TYPE,'')!='' -- Excluded Competitive Vehicles
		AND ro.C_DLR_BUSINESS != 'I' -- Excluded International Dealers 
		AND IFNULL(ro.L_IS_NVP,'N')!='Y'
		AND (dealerCode = '' OR FIND_IN_SET(ro.C_DLR,dealerCode))
		AND (businessCenter = '' OR FIND_IN_SET(ro.N_BUSINESS_CENTER,businessCenter))
		AND (year = '' OR FIND_IN_SET(ro.I_MOD_YR,year))
		AND (model = '' OR FIND_IN_SET(ro.C_FAM,model))
		AND (`engine` = '' OR FIND_IN_SET(ro.C_ENGINE_SALES_CODE,`engine`))
		AND (`status` = '' OR ro.L_CURRENT_RO_STATUS = `status`) 
	   AND (salesCode = '' OR ro.C_TRANSM = salesCode) 
	   AND (`fuelType` = '' OR IFNULL(ro.C_FUEL_TYPE,'') = `fuelType`)    
	   AND (roOpenDateFrom IS NULL OR DATE(ro.T_START_JOURNEY) BETWEEN roOpenDateFrom AND roOpenDateTo) 
		AND (caseOpenDateFrom IS NULL OR DATE(ro.T_FIRST_CREATED_CHERWELL_CASEID) BETWEEN caseOpenDateFrom AND caseOpenDateTo) 
		AND (caseCloseDateFrom IS NULL OR DATE(ro.T_LAST_CLOSE_CHERWELL_CASEID) BETWEEN caseCloseDateFrom AND caseCloseDateTo)
		AND (cumDays = '' OR ro.I_CUM_DAYS BETWEEN cumDaysRangeStart AND cumDaysRangeEnd)
		AND (daysDown = '' OR ro.I_DAYS_DOWN BETWEEN dayDownRangeStart AND dayDownRangeEnd)
		AND (repairCount = '' OR ro.I_REPAIR_COUNT BETWEEN repairCountRangeStart AND repairCountRangeEnd)
		AND (odometer = '' OR (CASE WHEN odometer = '-50' THEN (CAST(ro.Q_ODOMETER AS DECIMAL) < 50) WHEN odometer = '+50' THEN (CAST(ro.Q_ODOMETER AS DECIMAL) > 50) END))
		AND (witech = '' OR (CASE WHEN witech = 'true' THEN ro.T_WITECH_SCAN_EARLIEST IS NOT NULL WHEN witech = 'false' THEN ro.T_WITECH_SCAN_EARLIEST IS NULL END))	
		AND (wiadvisor = '' OR (CASE WHEN wiadvisor = 'true' THEN ro.T_WIADVISOR_SCAN IS NOT NULL WHEN wiadvisor = 'false' THEN ro.T_WIADVISOR_SCAN IS NULL END))	
		AND (roNumber = '' OR (CASE WHEN roNumber = 'true' THEN ro.I_RO IS NOT NULL WHEN roNumber = 'false' THEN ro.I_RO IS NULL END))	
		AND (forceClose = '' OR (CASE WHEN forceClose = 'true' THEN ro.L_FORCE_CLOSE IS NOT NULL WHEN forceClose = 'false' THEN ro.L_FORCE_CLOSE IS NULL END))	
		AND (caseEscalatedDateFrom IS NULL OR DATE(c.LASTESCALATEDDATETIME) BETWEEN caseEscalatedDateFrom AND caseEscalatedDateTo)
		AND (partsOrderedDateFrom IS NULL OR DATE(g.T_ORDER_CONFIRM) BETWEEN partsOrderedDateFrom AND partsOrderedDateTo)
		AND (partsShippedDateFrom IS NULL OR DATE(g.T_SHIPPED) BETWEEN partsShippedDateFrom AND partsShippedDateTo)
		AND (partsDeliveredDateFrom IS NULL OR DATE(g.T_DELIVERY) BETWEEN partsDeliveredDateFrom AND partsDeliveredDateTo)
	ORDER BY ro.T_START_JOURNEY DESC
	LIMIT pageOffset,pageSize;
	
ELSE

	SELECT DISTINCT ro.I_RO_JOURNEY as roJourneyId,
			 ro.I_VIN AS vin,
			 ro.C_FAM AS model,
			 ro.I_MOD_YR AS year,
			 FLOOR(ro.Q_ODOMETER) AS odometer,
			 ro.N_DLR AS dealer ,
			 ro.T_START_JOURNEY AS roDate,
			 ro.I_DAYS_DOWN AS noOfDaysDown,
			 ro.I_REPAIR_COUNT AS repairCount,
			 ro.I_CUM_DAYS AS cumDays,
			 ro.L_CURRENT_RO_STATUS AS `status`,
			 ro.I_FIRST_CHERWELL_CASEID AS starCaseId, 
			 ro.T_FIRST_CREATED_CHERWELL_CASEID AS caseOpenDate,
			 ro.I_DLR_PH_NMBR AS dealerContact,
			 ro.C_DLR AS dealerCode,
			 ro.C_FUEL_TYPE AS `fuelType`,
			 ro.C_ENGINE_SALES_CODE AS `engine`
	FROM RO_JOURNEY_OPEN ro
	LEFT JOIN GPOP_DATA g ON ro.I_RO_JOURNEY=g.I_RO_JOURNEY AND ro.I_VIN=g.I_VIN AND g.C_DLR=ro.C_DLR
	LEFT JOIN CHERWELL_CASE_PART3 c ON c.I_RO_JOURNEY=ro.I_RO_JOURNEY AND c.I_VIN=ro.I_VIN AND c.C_DLR=ro.C_DLR
	WHERE ro.C_FUEL_TYPE IN ('ELECTRIC','FHEV','PHEV','MHEV')
		AND ro.C_DLR NOT IN (SELECT C_DLR FROM EXCLUDED_DEALERS) -- Excluded Test Dealers
		AND IFNULL(ro.I_MOD_YR,'')!='' AND IFNULL(ro.C_FAM,'')!='' AND IFNULL(ro.C_FUEL_TYPE,'')!='' -- Excluded Competitive Vehicles
		AND ro.C_DLR_BUSINESS != 'I' -- Excluded International Dealers 
		AND IFNULL(ro.L_IS_NVP,'N')!='Y'
		AND (dealerCode = '' OR FIND_IN_SET(ro.C_DLR,dealerCode))
		AND (businessCenter = '' OR FIND_IN_SET(ro.N_BUSINESS_CENTER,businessCenter))
		AND (year = '' OR FIND_IN_SET(ro.I_MOD_YR,year))
		AND (model = '' OR FIND_IN_SET(ro.C_FAM,model))
		AND (`engine` = '' OR FIND_IN_SET(ro.C_ENGINE_SALES_CODE,`engine`))
		AND (`status` = '' OR ro.L_CURRENT_RO_STATUS = `status`) 
	   AND (salesCode = '' OR ro.C_TRANSM = salesCode) 
	   AND (`fuelType` = '' OR IFNULL(ro.C_FUEL_TYPE,'') = `fuelType`)    
	   AND (roOpenDateFrom IS NULL OR DATE(ro.T_START_JOURNEY) BETWEEN roOpenDateFrom AND roOpenDateTo) 
		AND (caseOpenDateFrom IS NULL OR DATE(ro.T_FIRST_CREATED_CHERWELL_CASEID) BETWEEN caseOpenDateFrom AND caseOpenDateTo) 
		AND (caseCloseDateFrom IS NULL OR DATE(ro.T_LAST_CLOSE_CHERWELL_CASEID) BETWEEN caseCloseDateFrom AND caseCloseDateTo)
		AND (cumDays = '' OR ro.I_CUM_DAYS BETWEEN cumDaysRangeStart AND cumDaysRangeEnd)
		AND (daysDown = '' OR ro.I_DAYS_DOWN BETWEEN dayDownRangeStart AND dayDownRangeEnd)
		AND (repairCount = '' OR ro.I_REPAIR_COUNT BETWEEN repairCountRangeStart AND repairCountRangeEnd)
		AND (odometer = '' OR (CASE WHEN odometer = '-50' THEN (CAST(ro.Q_ODOMETER AS DECIMAL) < 50) WHEN odometer = '+50' THEN (CAST(ro.Q_ODOMETER AS DECIMAL) > 50) END))
		AND (witech = '' OR (CASE WHEN witech = 'true' THEN ro.T_WITECH_SCAN_EARLIEST IS NOT NULL WHEN witech = 'false' THEN ro.T_WITECH_SCAN_EARLIEST IS NULL END))	
		AND (wiadvisor = '' OR (CASE WHEN wiadvisor = 'true' THEN ro.T_WIADVISOR_SCAN IS NOT NULL WHEN wiadvisor = 'false' THEN ro.T_WIADVISOR_SCAN IS NULL END))	
		AND (roNumber = '' OR (CASE WHEN roNumber = 'true' THEN ro.I_RO IS NOT NULL WHEN roNumber = 'false' THEN ro.I_RO IS NULL END))	
		AND (forceClose = '' OR (CASE WHEN forceClose = 'true' THEN ro.L_FORCE_CLOSE IS NOT NULL WHEN forceClose = 'false' THEN ro.L_FORCE_CLOSE IS NULL END))	
		AND (caseEscalatedDateFrom IS NULL OR DATE(c.LASTESCALATEDDATETIME) BETWEEN caseEscalatedDateFrom AND caseEscalatedDateTo)
		AND (partsOrderedDateFrom IS NULL OR DATE(g.T_ORDER_CONFIRM) BETWEEN partsOrderedDateFrom AND partsOrderedDateTo)
		AND (partsShippedDateFrom IS NULL OR DATE(g.T_SHIPPED) BETWEEN partsShippedDateFrom AND partsShippedDateTo)
		AND (partsDeliveredDateFrom IS NULL OR DATE(g.T_DELIVERY) BETWEEN partsDeliveredDateFrom AND partsDeliveredDateTo)
	ORDER BY 
		  CASE WHEN sortBy ='vin' AND sortOrder ='ASC' THEN ro.I_VIN END ASC,
        CASE WHEN sortBy ='vin' AND sortOrder ='DESC' THEN ro.I_VIN END DESC,
        CASE WHEN sortBy ='model' AND sortOrder ='ASC' THEN ro.C_FAM END ASC,
        CASE WHEN sortBy ='model' AND sortOrder ='DESC' THEN ro.C_FAM END DESC,
        CASE WHEN sortBy ='year' AND sortOrder ='ASC' THEN ro.I_MOD_YR END ASC,
        CASE WHEN sortBy ='year' AND sortOrder ='DESC' THEN ro.I_MOD_YR END DESC,
        CASE WHEN sortBy ='engine' AND sortOrder ='ASC' THEN ro.C_ENGINE_SALES_CODE END ASC,
        CASE WHEN sortBy ='engine' AND sortOrder ='DESC' THEN ro.C_ENGINE_SALES_CODE END DESC,
        CASE WHEN sortBy ='fuelType' AND sortOrder ='ASC' THEN ro.C_FUEL_TYPE END ASC,
        CASE WHEN sortBy ='fuelType' AND sortOrder ='DESC' THEN ro.C_FUEL_TYPE END DESC,
        CASE WHEN sortBy ='dealerCode' AND sortOrder ='ASC' THEN ro.C_DLR END ASC,
        CASE WHEN sortBy ='dealerCode' AND sortOrder ='DESC' THEN ro.C_DLR END DESC,
        CASE WHEN sortBy ='roJourneyId' AND sortOrder ='ASC' THEN ro.I_RO_JOURNEY END ASC,
        CASE WHEN sortBy ='roJourneyId' AND sortOrder ='DESC' THEN ro.I_RO_JOURNEY END DESC,
        CASE WHEN sortBy ='roDate' AND sortOrder ='ASC' THEN ro.T_START_JOURNEY END ASC,
        CASE WHEN sortBy ='roDate' AND sortOrder ='DESC' THEN ro.T_START_JOURNEY END DESC,
	     CASE WHEN sortBy ='noOfDaysDown' AND sortOrder ='ASC' THEN ro.I_DAYS_DOWN END ASC,
        CASE WHEN sortBy ='noOfDaysDown' AND sortOrder ='DESC' THEN ro.I_DAYS_DOWN END DESC,
        CASE WHEN sortBy ='repairCount' AND sortOrder ='ASC' THEN ro.I_REPAIR_COUNT END ASC,
        CASE WHEN sortBy ='repairCount' AND sortOrder='DESC' THEN ro.I_REPAIR_COUNT END DESC,
        CASE WHEN sortBy ='odometer' AND sortOrder ='ASC' THEN CAST(ro.Q_ODOMETER AS DECIMAL) END ASC,
        CASE WHEN sortBy ='odometer' AND sortOrder ='DESC' THEN CAST(ro.Q_ODOMETER AS DECIMAL) END DESC,
        CASE WHEN sortBy ='cumDays' AND sortOrder ='ASC' THEN ro.I_CUM_DAYS END ASC,
        CASE WHEN sortBy ='cumDays' AND sortOrder ='DESC' THEN ro.I_CUM_DAYS END DESC,
        CASE WHEN sortBy ='starCaseId' AND sortOrder ='ASC' THEN ro.I_FIRST_CHERWELL_CASEID END ASC,
        CASE WHEN sortBy ='starCaseId' AND sortOrder ='DESC' THEN ro.I_FIRST_CHERWELL_CASEID END DESC,
        CASE WHEN sortBy ='caseOpenDate' AND sortOrder ='ASC' THEN ro.T_FIRST_CREATED_CHERWELL_CASEID END ASC,
        CASE WHEN sortBy ='caseOpenDate' AND sortOrder ='DESC' THEN ro.T_FIRST_CREATED_CHERWELL_CASEID END DESC,
        CASE WHEN sortBy ='status' AND sortOrder ='ASC' THEN ro.L_CURRENT_RO_STATUS END ASC,
        CASE WHEN sortBy ='status' AND sortOrder ='DESC' THEN ro.L_CURRENT_RO_STATUS END DESC
	LIMIT pageOffset,pageSize;

END IF;

	-- join dealer master to apply filters
	SELECT COUNT(DISTINCT ro.I_VIN) AS Total
	FROM RO_JOURNEY_OPEN ro
	LEFT JOIN GPOP_DATA g ON ro.I_RO_JOURNEY=g.I_RO_JOURNEY AND ro.I_VIN=g.I_VIN AND g.C_DLR=ro.C_DLR
	LEFT JOIN CHERWELL_CASE_PART3 c ON c.I_RO_JOURNEY=ro.I_RO_JOURNEY AND c.I_VIN=ro.I_VIN AND c.C_DLR=ro.C_DLR
	WHERE ro.C_FUEL_TYPE IN ('ELECTRIC','FHEV','PHEV','MHEV')
		AND ro.C_DLR NOT IN (SELECT C_DLR FROM EXCLUDED_DEALERS) -- Excluded Test Dealers
		AND IFNULL(ro.I_MOD_YR,'')!='' AND IFNULL(ro.C_FAM,'')!='' AND IFNULL(ro.C_FUEL_TYPE,'')!='' -- Excluded Competitive Vehicles
		AND ro.C_DLR_BUSINESS != 'I' -- Excluded International Dealers 
		AND IFNULL(ro.L_IS_NVP,'N')!='Y'
		AND (dealerCode = '' OR FIND_IN_SET(ro.C_DLR,dealerCode))
		AND (businessCenter = '' OR FIND_IN_SET(ro.N_BUSINESS_CENTER,businessCenter))
		AND (year = '' OR FIND_IN_SET(ro.I_MOD_YR,year))
		AND (model = '' OR FIND_IN_SET(ro.C_FAM,model))
		AND (`engine` = '' OR FIND_IN_SET(ro.C_ENGINE_SALES_CODE,`engine`))
		AND (`status` = '' OR ro.L_CURRENT_RO_STATUS = `status`) 
	   AND (salesCode = '' OR ro.C_TRANSM = salesCode) 
	   AND (`fuelType` = '' OR IFNULL(ro.C_FUEL_TYPE,'') = `fuelType`)    
	   AND (roOpenDateFrom IS NULL OR DATE(ro.T_START_JOURNEY) BETWEEN roOpenDateFrom AND roOpenDateTo) 
		AND (caseOpenDateFrom IS NULL OR DATE(ro.T_FIRST_CREATED_CHERWELL_CASEID) BETWEEN caseOpenDateFrom AND caseOpenDateTo) 
		AND (caseCloseDateFrom IS NULL OR DATE(ro.T_LAST_CLOSE_CHERWELL_CASEID) BETWEEN caseCloseDateFrom AND caseCloseDateTo)
		AND (cumDays = '' OR ro.I_CUM_DAYS BETWEEN cumDaysRangeStart AND cumDaysRangeEnd)
		AND (daysDown = '' OR ro.I_DAYS_DOWN BETWEEN dayDownRangeStart AND dayDownRangeEnd)
		AND (repairCount = '' OR ro.I_REPAIR_COUNT BETWEEN repairCountRangeStart AND repairCountRangeEnd)
		AND (odometer = '' OR (CASE WHEN odometer = '-50' THEN (CAST(ro.Q_ODOMETER AS DECIMAL) < 50) WHEN odometer = '+50' THEN (CAST(ro.Q_ODOMETER AS DECIMAL) > 50) END))
		AND (witech = '' OR (CASE WHEN witech = 'true' THEN ro.T_WITECH_SCAN_EARLIEST IS NOT NULL WHEN witech = 'false' THEN ro.T_WITECH_SCAN_EARLIEST IS NULL END))	
		AND (wiadvisor = '' OR (CASE WHEN wiadvisor = 'true' THEN ro.T_WIADVISOR_SCAN IS NOT NULL WHEN wiadvisor = 'false' THEN ro.T_WIADVISOR_SCAN IS NULL END))	
		AND (roNumber = '' OR (CASE WHEN roNumber = 'true' THEN ro.I_RO IS NOT NULL WHEN roNumber = 'false' THEN ro.I_RO IS NULL END))	
		AND (forceClose = '' OR (CASE WHEN forceClose = 'true' THEN ro.L_FORCE_CLOSE IS NOT NULL WHEN forceClose = 'false' THEN ro.L_FORCE_CLOSE IS NULL END))	
		AND (caseEscalatedDateFrom IS NULL OR DATE(c.LASTESCALATEDDATETIME) BETWEEN caseEscalatedDateFrom AND caseEscalatedDateTo)
		AND (partsOrderedDateFrom IS NULL OR DATE(g.T_ORDER_CONFIRM) BETWEEN partsOrderedDateFrom AND partsOrderedDateTo)
		AND (partsShippedDateFrom IS NULL OR DATE(g.T_SHIPPED) BETWEEN partsShippedDateFrom AND partsShippedDateTo)
		AND (partsDeliveredDateFrom IS NULL OR DATE(g.T_DELIVERY) BETWEEN partsDeliveredDateFrom AND partsDeliveredDateTo)
	;
 
END
=============================
CREATE DEFINER=`t12247adm`@`%` PROCEDURE `db_12247_d_001_instance_1`.`PROC_GET_PROSENSE_DETAILS`(
	IN `businessCenter` VARCHAR(50),
	IN `dealerCode` VARCHAR(50),
	IN `year` VARCHAR(50),
	IN `model` VARCHAR(50),
	IN `engine` VARCHAR(50),
	IN `pageOffset` INT,
	IN `pageSize` INT,
	IN `sortBy` varchar(100),
	IN `sortOrder` varchar(4)
)
    SQL SECURITY INVOKER
BEGIN
SET pageSize = IF(pageSize=0, 10,pageSize);

IF sortBy = '' THEN

SELECT p.I_VIN AS vin, FLOOR(p.Q_ODOMETER) AS odometer,p.I_MOD_YR AS modYear,ro.C_FAM AS family,	
ro.C_ENGINE_SALES_CODE AS `engine`,	ro.C_FUEL_TYPE AS `fuelType`, p.C_DLR AS dealerCode, p.X_BUSINESS_CENTER AS businessCenter, 
MAX(DATE_FORMAT(p.D_ADD, "%m/%d/%y")) AS dateAdded, p.C_STATE AS state, p.P_RISK_SCORE AS riskScore, 
p.I_DAYS_DOWN AS daysDown, p.I_REPEAT_REPAIR_NO AS repeatRepairNumber,
p.N_SRCE_ADD AS srceAdd, p.N_SRCE_UPDATE AS srceUpdate, p.T_STMP_ADD AS stmpAddDate, 
p.T_STMP_UPDATE AS smtpUpdateDate, p.L_ACTIVE AS active
FROM PROSENSE_DATA p
JOIN RO_JOURNEY_OPEN ro ON p.I_VIN=ro.I_VIN
WHERE ro.C_DLR NOT IN (SELECT C_DLR FROM EXCLUDED_DEALERS) -- Excluded Test Dealers
		AND IFNULL(ro.I_MOD_YR,'')!='' AND IFNULL(ro.C_FAM,'')!='' AND IFNULL(ro.C_FUEL_TYPE,'')!='' -- Excluded Competitive Vehicles
		AND ro.C_DLR_BUSINESS != 'I' -- Excluded International Dealers 
		AND (dealerCode = '' OR ro.C_DLR = dealerCode) 
		AND (businessCenter = '' OR ro.N_BUSINESS_CENTER = businessCenter) 
		AND (year = '' OR ro.I_MOD_YR = year) 
		AND (model = '' OR ro.C_FAM = model) 
		AND (engine = '' OR ro.C_ENGINE_SALES_CODE = engine)
GROUP BY p.I_VIN
ORDER BY p.P_RISK_SCORE DESC
LIMIT pageOffset,pageSize;

ELSE

SELECT p.I_VIN AS vin, FLOOR(p.Q_ODOMETER) AS odometer,p.I_MOD_YR AS modYear,ro.C_FAM AS family,	
ro.C_ENGINE_SALES_CODE AS `engine`,	ro.C_FUEL_TYPE AS `fuelType`, p.C_DLR AS dealerCode, p.X_BUSINESS_CENTER AS businessCenter, 
MAX(DATE_FORMAT(p.D_ADD, "%m/%d/%y")) AS dateAdded, p.C_STATE AS state, p.P_RISK_SCORE AS riskScore, 
p.I_DAYS_DOWN AS daysDown, p.I_REPEAT_REPAIR_NO AS repeatRepairNumber,
p.N_SRCE_ADD AS srceAdd, p.N_SRCE_UPDATE AS srceUpdate, p.T_STMP_ADD AS stmpAddDate, 
p.T_STMP_UPDATE AS smtpUpdateDate, p.L_ACTIVE AS active
FROM PROSENSE_DATA p 
JOIN RO_JOURNEY_OPEN ro ON p.I_VIN=ro.I_VIN
WHERE ro.C_DLR NOT IN (SELECT C_DLR FROM EXCLUDED_DEALERS) -- Excluded Test Dealers
		AND IFNULL(ro.I_MOD_YR,'')!='' AND IFNULL(ro.C_FAM,'')!='' AND IFNULL(ro.C_FUEL_TYPE,'')!='' -- Excluded Competitive Vehicles
		AND ro.C_DLR_BUSINESS != 'I' -- Excluded International Dealers 
		AND (dealerCode = '' OR ro.C_DLR = dealerCode) 
		AND (businessCenter = '' OR ro.N_BUSINESS_CENTER = businessCenter) 
		AND (year = '' OR ro.I_MOD_YR = year) 
		AND (model = '' OR ro.C_FAM = model) 
		AND (engine = '' OR ro.C_ENGINE_SALES_CODE = engine)
GROUP BY p.I_VIN

ORDER BY 
        CASE WHEN sortBy ='vin' AND sortOrder ='ASC' THEN p.I_VIN END ASC,
        CASE WHEN sortBy ='vin' AND sortOrder ='DESC' THEN p.I_VIN END DESC,
        CASE WHEN sortBy ='dateAdded' AND sortOrder ='ASC' THEN p.D_ADD END ASC,
        CASE WHEN sortBy ='dateAdded' AND sortOrder ='DESC' THEN p.D_ADD END DESC,
        CASE WHEN sortBy ='state' AND sortOrder ='ASC' THEN p.C_STATE END ASC,
        CASE WHEN sortBy ='state' AND sortOrder ='DESC' THEN p.C_STATE END DESC,
        CASE WHEN sortBy ='riskScore' AND sortOrder ='ASC' THEN p.P_RISK_SCORE END ASC,
        CASE WHEN sortBy ='riskScore' AND sortOrder ='DESC' THEN p.P_RISK_SCORE END DESC,
        CASE WHEN sortBy ='modYear' AND sortOrder ='ASC' THEN p.I_MOD_YR END ASC,
        CASE WHEN sortBy ='modYear' AND sortOrder ='DESC' THEN p.I_MOD_YR END DESC,
        CASE WHEN sortBy ='businessCenter' AND sortOrder ='ASC' THEN p.X_BUSINESS_CENTER END ASC,
        CASE WHEN sortBy ='businessCenter' AND sortOrder ='DESC' THEN p.X_BUSINESS_CENTER END DESC,
        CASE WHEN sortBy ='odometer' AND sortOrder ='ASC' THEN p.Q_ODOMETER END ASC,
        CASE WHEN sortBy ='odometer' AND sortOrder ='DESC' THEN p.Q_ODOMETER END DESC,
        CASE WHEN sortBy ='dealerCode' AND sortOrder ='ASC' THEN p.C_DLR END ASC,
        CASE WHEN sortBy ='dealerCode' AND sortOrder ='DESC' THEN p.C_DLR END DESC,
        CASE WHEN sortBy ='daysDown' AND sortOrder ='ASC' THEN p.I_DAYS_DOWN END ASC,
        CASE WHEN sortBy ='daysDown' AND sortOrder ='DESC' THEN p.I_DAYS_DOWN END DESC,
        CASE WHEN sortBy ='repeatRepairNumber' AND sortOrder ='ASC' THEN p.I_REPEAT_REPAIR_NO END ASC,
        CASE WHEN sortBy ='repeatRepairNumber' AND sortOrder ='DESC' THEN p.I_REPEAT_REPAIR_NO END DESC
        
LIMIT pageOffset,pageSize;

END IF;

-- SELECT COUNT(1) AS Total FROM PROSENSE_DATA;
-- SELECT COUNT(DISTINCT I_VIN) AS Total FROM PROSENSE_DATA;

SELECT COUNT(DISTINCT ro.I_VIN) AS Total
FROM RO_JOURNEY_OPEN ro
JOIN PROSENSE_DATA p ON p.I_VIN=ro.I_VIN
WHERE ro.C_DLR NOT IN (SELECT C_DLR FROM EXCLUDED_DEALERS) -- Excluded Test Dealers
	AND IFNULL(ro.I_MOD_YR,'')!='' AND IFNULL(ro.C_FAM,'')!='' AND IFNULL(ro.C_FUEL_TYPE,'')!='' -- Excluded Competitive Vehicles
	AND ro.C_DLR_BUSINESS != 'I' -- Excluded International Dealers 
	AND (dealerCode = '' OR ro.C_DLR = dealerCode) 
	AND (businessCenter = '' OR ro.N_BUSINESS_CENTER = businessCenter) 
	AND (year = '' OR ro.I_MOD_YR = year) 
	AND (model = '' OR ro.C_FAM = model) 
	AND (engine = '' OR ro.C_ENGINE_SALES_CODE = engine)
;
END
===========================================
CREATE DEFINER=`t12247adm`@`%` PROCEDURE `db_12247_d_001_instance_1`.`PROC_GET_QNA_PART_DETAILS`(
	IN `roJourneyId` bigint,
	IN `vin` varchar(20)
)
    SQL SECURITY INVOKER
BEGIN
SELECT QP.I_PART AS partNumber,QP.Q_PART AS Quantity,QP.I_PART_COST AS cost FROM RO_JOURNEY_OPEN as RO
JOIN QNA_DATA as QD on QD.I_RO_JOURNEY = RO.I_RO_JOURNEY
JOIN QNA_PART as QP on QD.I_SYS_KEY = QP.I_SYS_KEY
WHERE RO.I_VIN = vin
		AND (roJourneyId = '' OR RO.I_RO_JOURNEY = roJourneyId);
END
====================================
CREATE DEFINER=`t12247adm`@`%` PROCEDURE `db_12247_d_001_instance_1`.`PROC_GET_REPAIR_COUNT_AGED_PERPHASE`(
	IN `businessCenter` VARCHAR(50),
	IN `dealerCode` VARCHAR(50),
	IN `year` VARCHAR(50),
	IN `model` VARCHAR(50),
	IN `engine` VARCHAR(50)
)
    SQL SECURITY INVOKER
BEGIN



SELECT COUNT(DISTINCT ro.I_VIN) AS vehicleCount,ro.L_CURRENT_RO_STATUS As labels,
(CASE	
	 
    WHEN ro.L_CURRENT_RO_STATUS = "Written Up" THEN
     AVG(IF (ro.N_SRCE_ADD = "QNA"AND ro.T_WIADVISOR_SCAN IS NULL AND ro.T_START_JOURNEY IS NOT NULL AND ro.T_WITECH_SCAN_EARLIEST IS NOT NULL ,DATEDIFF(ro.T_WITECH_SCAN_EARLIEST,ro.T_START_JOURNEY) ,IF(ro.T_WIADVISOR_SCAN IS NOT NULL AND ro.T_WITECH_SCAN_EARLIEST IS NOT NULL,DATEDIFF(ro.T_WITECH_SCAN_EARLIEST,ro.T_WIADVISOR_SCAN),0)))
--     (CASE WHEN ro.T_WIADVISOR_SCAN IS NOT NULL AND ro.T_WITECH_SCAN_EARLIEST IS NOT NULL THEN 
-- -- 			AVG( timestampdiff(DAY,  ro.T_WIADVISOR_SCAN, ro.T_WITECH_SCAN_EARLIEST))
-- 			AVG(DATEDIFF(ro.T_WITECH_SCAN_EARLIEST,ro.T_WIADVISOR_SCAN))
-- 		WHEN ro.N_SRCE_ADD = "QNA" AND ro.T_WIADVISOR_SCAN IS NULL AND ro.T_START_JOURNEY IS NOT NULL AND ro.T_WITECH_SCAN_EARLIEST IS NOT NULL THEN 
-- -- 			AVG(TIMESTAMPDIFF(DAY, ro.T_START_JOURNEY, ro.T_WITECH_SCAN_EARLIEST))
-- 			AVG(DATEDIFF(ro.T_WITECH_SCAN_EARLIEST,ro.T_START_JOURNEY))
-- 		ELSE 0
--     	END)
    WHEN ro.L_CURRENT_RO_STATUS = "Diagnosis/Case Created" THEN
    AVG(IF (ro.T_WITECH_SCAN_EARLIEST IS NOT NULL AND  cs1.cherwellcreteddatetime IS NOT NULL ,DATEDIFF(cs1.cherwellcreteddatetime,ro.T_WITECH_SCAN_EARLIEST) ,
   IF(ro.T_WIADVISOR_SCAN IS NOT NULL AND  cs1.cherwellcreteddatetime IS NOT NULL AND ro.T_WITECH_SCAN_EARLIEST IS NULL,DATEDIFF(cs1.cherwellcreteddatetime,ro.T_WIADVISOR_SCAN),0)))
--     (CASE WHEN ro.T_WITECH_SCAN_EARLIEST IS NOT NULL AND  cs1.cherwellcreteddatetime IS NOT NULL THEN 
-- -- 			AVG(TIMESTAMPDIFF(DAY, ro.T_WITECH_SCAN_EARLIEST, ro.T_FIRST_CREATED_CHERWELL_CASEID ))
-- 			AVG(DATEDIFF(cs1.cherwellcreteddatetime,ro.T_WITECH_SCAN_EARLIEST))
-- 	    WHEN ro.T_WIADVISOR_SCAN IS NOT NULL AND  cs1.cherwellcreteddatetime IS NOT NULL AND ro.T_WITECH_SCAN_EARLIEST IS NULL THEN      
-- -- 			AVG(timestampdiff(DAY,  ro.T_WIADVISOR_SCAN, ro.T_FIRST_CREATED_CHERWELL_CASEID ))
-- 			AVG(DATEDIFF(cs1.cherwellcreteddatetime,ro.T_WIADVISOR_SCAN))
-- 			ELSE 0
-- 			END)			
	WHEN ro.L_CURRENT_RO_STATUS = "Escalated" THEN
	(CASE WHEN cs.ESCALATETOENGINEERING = 1 AND cs1.cherwellcreteddatetime IS NOT NULL AND  cs.lastescalateddatetime IS NOT NULL THEN 
-- 			AVG(TIMESTAMPDIFF(DAY, ro.cherwellcreteddatetime, cs.lastescalateddatetime ))
			AVG(DATEDIFF(cs.lastescalateddatetime,cs1.cherwellcreteddatetime))
			ELSE 0
			END)
	
    WHEN ro.L_CURRENT_RO_STATUS = "Part Ordered" THEN
    AVG(IF (ESCALATETOENGINEERING = 1 AND gp.max_confirmdate IS NOT NULL AND cs.lastescalateddatetime IS NOT NULL ,DATEDIFF(gp.max_confirmdate,cs.lastescalateddatetime),IF(gp.max_confirmdate IS NOT NULL AND cs1.cherwellcreteddatetime IS NOT NULL,DATEDIFF(gp.max_confirmdate,cs1.cherwellcreteddatetime),0)))
--     (CASE WHEN  gp.max_confirmdate IS NOT NULL AND cs.lastescalateddatetime IS NOT NULL  THEN 
-- -- 			AVG(TIMESTAMPDIFF(DAY, cs.lastescalateddatetime,gp.max_confirmdate))
-- 			AVG(DATEDIFF(gp.max_confirmdate,cs.lastescalateddatetime))
-- 		  WHEN gp.max_confirmdate IS NOT NULL AND cs1.cherwellcreteddatetime IS NOT NULL  THEN 
-- -- 			TIMESTAMPDIFF(DAY,cs.LASTESCALATEDDATETIME, MAX(NULLIF (gp.T_ORDER_CONFIRM,0)) )
-- 			AVG(DATEDIFF(gp.max_confirmdate,cs1.cherwellcreteddatetime))
-- 		  ELSE 0
-- 			END)
    
	WHEN ro.L_CURRENT_RO_STATUS = "Part Shipped" THEN 
	(CASE WHEN gp.max_confirmdate IS NOT NULL AND gp.max_shipdate IS NOT NULL THEN
-- 	   	 AVG( TIMESTAMPDIFF(DAY,  gp.max_confirmdate, gp.max_shipdate))
	   	 AVG(DATEDIFF(gp.max_shipdate,gp.max_confirmdate))
	     ELSE 0
			END)
	WHEN ro.L_CURRENT_RO_STATUS = "Delivered" THEN
	(CASE WHEN gp.max_shipdate IS NOT NULL AND gp.max_delivery IS NOT NULL THEN
-- 	   	  AVG(TIMESTAMPDIFF(DAY, gp.max_shipdate, gp.max_delivery))
	   	  AVG(DATEDIFF(gp.max_delivery,gp.max_shipdate))
	     ELSE 0
			END)
	
	WHEN ro.L_CURRENT_RO_STATUS = "Under Repair" THEN 
	(CASE WHEN gp.max_delivery IS NOT NULL AND ro.T_END_JOURNEY IS NULL THEN 
-- 	       AVG(TIMESTAMPDIFF(DAY, gp.max_delivery, NOW()))
	       AVG(DATEDIFF( NOW(),gp.max_delivery))
	       ELSE 0
			END)
-- 	WHEN ro.L_CURRENT_RO_STATUS = "Open" THEN
-- 	 (CASE WHEN ro.T_START_JOURNEY IS NOT NULL AND ro.T_END_JOURNEY IS NULL THEN 
-- 	       AVG(TIMESTAMPDIFF(DAY, ro.T_START_JOURNEY, NOW()))
-- 	       ELSE 0
-- 		    END)
	ELSE 0
	END) As avgDay
FROM RO_JOURNEY_OPEN ro
LEFT JOIN (SELECT g.I_RO_JOURNEY,MAX(NULLIF(g.T_SHIPPED,0)) As max_shipdate,MAX(NULLIF (g.T_DELIVERY,0)) As max_delivery ,MAX(NULLIF (g.T_ORDER_CONFIRM,0)) As max_confirmdate FROM GPOP_DATA g GROUP BY g.I_RO_JOURNEY) gp ON gp.I_RO_JOURNEY = ro.I_RO_JOURNEY

LEFT JOIN (SELECT c.I_RO_JOURNEY,c.ESCALATETOENGINEERING,MAX(NULLIF(c.LASTESCALATEDDATETIME,0)) As lastescalateddatetime 
FROM CHERWELL_CASE_PART3 c WHERE c.ESCALATETOENGINEERING =1  GROUP BY c.I_RO_JOURNEY) cs ON  cs.I_RO_JOURNEY = ro.I_RO_JOURNEY AND cs.lastescalateddatetime !="1899-12-30 00:00:00"
LEFT JOIN (SELECT c1.I_RO_JOURNEY,IF(c3.ESCALATETOENGINEERING =1,c1.CREATEDDATETIME,MAX(c1.CREATEDDATETIME)) As cherwellcreteddatetime
FROM CHERWELL_CASE_PART1 c1  left join CHERWELL_CASE_PART3 c3 on c3.RECID=c1.RECID GROUP BY c1.I_RO_JOURNEY) cs1 ON  cs1.I_RO_JOURNEY = ro.I_RO_JOURNEY 
WHERE ro.C_DLR NOT IN (SELECT C_DLR FROM EXCLUDED_DEALERS) -- Excluded Test Dealers
	AND IFNULL(ro.I_MOD_YR,'')!='' AND IFNULL(ro.C_FAM,'')!='' AND IFNULL(ro.C_FUEL_TYPE,'')!='' -- Excluded Competitive Vehicles
	AND ro.C_DLR_BUSINESS != 'I' -- Excluded International Dealers 
	AND IFNULL(ro.L_IS_NVP,'N')!='Y' -- Excluded NVP
	AND (businessCenter = '' OR ro.N_BUSINESS_CENTER = businessCenter)
	AND (dealerCode = '' OR ro.C_DLR = dealerCode)
	AND (year = '' OR ro.I_MOD_YR = year)
	AND (model = '' OR ro.C_FAM = model)
	AND (engine = '' OR ro.C_ENGINE_SALES_CODE = engine)
	AND ro.L_CURRENT_RO_STATUS IS NOT NULL
	AND ro.L_CURRENT_RO_STATUS != "Open"
GROUP BY ro.L_CURRENT_RO_STATUS
ORDER BY ro.L_CURRENT_RO_STATUS;

END
====================================
CREATE DEFINER=`t12247adm`@`%` PROCEDURE `db_12247_d_001_instance_1`.`PROC_GET_REPAIR_DAYS_VS_COUNT`(
	IN `businessCenter` VARCHAR(50),
	IN `dealerCode` VARCHAR(50),
	IN `year` VARCHAR(50),
	IN `model` VARCHAR(50),
	IN `engine` VARCHAR(50)
)
    SQL SECURITY INVOKER
BEGIN

SELECT COUNT(DISTINCT ro.I_VIN) AS RepairCount,
	(CASE WHEN ro.I_DAYS_DOWN IS NULL OR ro.I_DAYS_DOWN = '' OR ro.I_DAYS_DOWN BETWEEN 0 AND 5 THEN '0-5'
			WHEN ro.I_DAYS_DOWN BETWEEN 6 AND 10 THEN '6-10'
            WHEN ro.I_DAYS_DOWN BETWEEN 11 AND 20 THEN '11-20'
			WHEN ro.I_DAYS_DOWN BETWEEN 21 AND 30 THEN '21-30'
			WHEN ro.I_DAYS_DOWN BETWEEN 31 AND 999 THEN '31-999' END) AS RepairDays,
	(CASE WHEN ro.I_DAYS_DOWN IS NULL OR ro.I_DAYS_DOWN = '' OR ro.I_DAYS_DOWN BETWEEN 0 AND 5 THEN 1
			WHEN ro.I_DAYS_DOWN BETWEEN 6 AND 10 THEN 2
            WHEN ro.I_DAYS_DOWN BETWEEN 11 AND 20 THEN 3
			WHEN ro.I_DAYS_DOWN BETWEEN 21 AND 30 THEN 4
			WHEN ro.I_DAYS_DOWN BETWEEN 31 AND 999 THEN 5 END) AS Priority
		  
FROM RO_JOURNEY_OPEN ro
WHERE ro.C_DLR NOT IN (SELECT C_DLR FROM EXCLUDED_DEALERS) -- Excluded Test Dealers
	AND IFNULL(ro.I_MOD_YR,'')!='' AND IFNULL(ro.C_FAM,'')!='' 	AND IFNULL(ro.C_FUEL_TYPE,'')!='' -- Excluded Competitive Vehicles
	AND ro.C_DLR_BUSINESS != 'I' -- Excluded International Dealers 
	AND IFNULL(ro.L_IS_NVP,'N')!='Y' -- Excluded NVP 
	AND (businessCenter = '' OR ro.N_BUSINESS_CENTER = businessCenter)
	AND (dealerCode = '' OR ro.C_DLR = dealerCode)
	AND (year = '' OR ro.I_MOD_YR = year)
	AND (model = '' OR ro.C_FAM = model)
	AND (engine = '' OR ro.C_ENGINE_SALES_CODE = engine)	
GROUP BY RepairDays
ORDER BY Priority;




SELECT COUNT(DISTINCT ro.I_VIN) AS RepairCount,
	(CASE WHEN ro.I_DAYS_DOWN IS NULL OR ro.I_DAYS_DOWN = '' OR ro.I_DAYS_DOWN BETWEEN 0 AND 5 THEN '0-5'
		    WHEN ro.I_DAYS_DOWN BETWEEN 6 AND 10 THEN '6-10'
            WHEN ro.I_DAYS_DOWN BETWEEN 11 AND 20 THEN '11-20'
			WHEN ro.I_DAYS_DOWN BETWEEN 21 AND 30 THEN '21-30'
			WHEN ro.I_DAYS_DOWN BETWEEN 31 AND 999 THEN '31-999' END) AS RepairDays,
     (CASE WHEN ro.I_DAYS_DOWN IS NULL OR ro.I_DAYS_DOWN = '' OR ro.I_DAYS_DOWN BETWEEN 0 AND 5 THEN 1
		    WHEN ro.I_DAYS_DOWN BETWEEN 6 AND 10 THEN 2
            WHEN ro.I_DAYS_DOWN BETWEEN 11 AND 20 THEN 3
			WHEN ro.I_DAYS_DOWN BETWEEN 21 AND 30 THEN 4
			WHEN ro.I_DAYS_DOWN BETWEEN 31 AND 999 THEN 5 END) AS Priority,       
	CONCAT(MONTH(ro.T_START_JOURNEY),' ',YEAR(ro.T_START_JOURNEY)) AS MonthYear 
FROM RO_JOURNEY_OPEN ro
WHERE ro.C_DLR NOT IN (SELECT C_DLR FROM EXCLUDED_DEALERS) -- Excluded Test Dealers
	AND IFNULL(ro.I_MOD_YR,'')!='' AND IFNULL(ro.C_FAM,'')!='' 	AND IFNULL(ro.C_FUEL_TYPE,'')!='' -- Excluded Competitive Vehicles
	AND ro.C_DLR_BUSINESS != 'I' -- Excluded International Dealers 
	AND IFNULL(ro.L_IS_NVP,'N')!='Y' -- Excluded NVP
	AND (businessCenter = '' OR ro.N_BUSINESS_CENTER = businessCenter)	 
	AND (dealerCode = '' OR ro.C_DLR = dealerCode)
	AND (year = '' OR ro.I_MOD_YR = year)
	AND (model = '' OR ro.C_FAM = model)
	AND (engine = '' OR ro.C_ENGINE_SALES_CODE = engine)	
GROUP BY YEAR(ro.T_START_JOURNEY),MONTH(ro.T_START_JOURNEY),Priority
ORDER BY YEAR(ro.T_START_JOURNEY),MONTH(ro.T_START_JOURNEY),Priority;


END
======================================
CREATE DEFINER=`t12247adm`@`%` PROCEDURE `db_12247_d_001_instance_1`.`PROC_GET_REPAIR_DAYS_VS_COUNT_VS_BUSINESS`(
	IN `businessCenter` VARCHAR(50),
	IN `dealerCode` VARCHAR(50),
	IN `year` VARCHAR(50),
	IN `model` VARCHAR(50),
	IN `engine` VARCHAR(50)
)
    SQL SECURITY INVOKER
BEGIN

SELECT COUNT(DISTINCT ro.I_VIN) AS RepairCount,
	(CASE WHEN ro.I_DAYS_DOWN IS NULL OR ro.I_DAYS_DOWN = '' OR ro.I_DAYS_DOWN BETWEEN 0 AND 5 THEN '0-5'
		    WHEN ro.I_DAYS_DOWN BETWEEN 6 AND 10 THEN '6-10'
			WHEN ro.I_DAYS_DOWN BETWEEN 11 AND 20 THEN '11-20'
			WHEN ro.I_DAYS_DOWN BETWEEN 21 AND 30 THEN '21-30'
			WHEN ro.I_DAYS_DOWN BETWEEN 31 AND 999 THEN '31-999' END) AS RepairDays,
	(CASE WHEN ro.I_DAYS_DOWN IS NULL OR ro.I_DAYS_DOWN = '' OR ro.I_DAYS_DOWN BETWEEN 0 AND 5 THEN 1
			WHEN ro.I_DAYS_DOWN BETWEEN 6 AND 10 THEN 2
			WHEN ro.I_DAYS_DOWN BETWEEN 11 AND 20 THEN 3
			WHEN ro.I_DAYS_DOWN BETWEEN 21 AND 30 THEN 4
			WHEN ro.I_DAYS_DOWN BETWEEN 31 AND 999 THEN 5 END) AS Priority,
	(CASE WHEN ro.N_BUSINESS_CENTER IS NULL THEN "N/A" ELSE CONCAT(b.X_COUNTRY,'-',ro.N_BUSINESS_CENTER) END) AS BusinessCenter
FROM RO_JOURNEY_OPEN ro
	INNER JOIN DEALER_MASTER d ON d.C_DLR=ro.C_DLR
	INNER JOIN BUSINESS_CENTER_DESC b ON d.C_DLR_BUSINESS=b.C_BUSINESS_CENTER AND d.X_COUNTRY=b.X_COUNTRY
WHERE ro.C_DLR NOT IN (SELECT C_DLR FROM EXCLUDED_DEALERS) -- Excluded Test Dealers
	AND IFNULL(ro.I_MOD_YR,'')!='' AND IFNULL(ro.C_FAM,'')!='' AND IFNULL(ro.C_FUEL_TYPE,'')!='' -- Excluded Competitive Vehicles
	AND ro.C_DLR_BUSINESS != 'I' -- Excluded International Dealers 
	AND IFNULL(ro.L_IS_NVP,'N')!='Y' -- Excluded NVP 
	AND (businessCenter = '' OR ro.N_BUSINESS_CENTER = businessCenter)
	AND (dealerCode = '' OR ro.C_DLR = dealerCode)
	AND (year = '' OR ro.I_MOD_YR = year)
	AND (model = '' OR ro.C_FAM = model)
	AND (engine = '' OR ro.C_ENGINE_SALES_CODE = engine)
GROUP BY ro.N_BUSINESS_CENTER,RepairDays
ORDER BY ro.N_BUSINESS_CENTER,Priority;

END
====================================
CREATE DEFINER=`t12247adm`@`%` PROCEDURE `db_12247_d_001_instance_1`.`PROC_GET_REPAIR_TIMELINE_GRAPH`(
IN `businessCenter` VARCHAR(50),
	IN `dealerCode` VARCHAR(50),
	IN `year` VARCHAR(50),
	IN `model` VARCHAR(50),
	IN `engine` VARCHAR(50)
	)
BEGIN

-- All vin repaired	
SELECT COUNT(DISTINCT ro.I_VIN) AS vehicleCount,ro.L_CURRENT_RO_STATUS As labels,
(CASE	
	 
    WHEN ro.L_CURRENT_RO_STATUS = "Written Up" THEN
     AVG(IF (ro.N_SRCE_ADD = "QNA"AND ro.T_WIADVISOR_SCAN IS NULL AND ro.T_START_JOURNEY IS NOT NULL AND ro.T_WITECH_SCAN_EARLIEST IS NOT NULL ,DATEDIFF(ro.T_WITECH_SCAN_EARLIEST,ro.T_START_JOURNEY) ,IF(ro.T_WIADVISOR_SCAN IS NOT NULL AND ro.T_WITECH_SCAN_EARLIEST IS NOT NULL,DATEDIFF(ro.T_WITECH_SCAN_EARLIEST,ro.T_WIADVISOR_SCAN),0)))
--     (CASE WHEN ro.T_WIADVISOR_SCAN IS NOT NULL AND ro.T_WITECH_SCAN_EARLIEST IS NOT NULL THEN 
-- -- 			AVG( timestampdiff(DAY,  ro.T_WIADVISOR_SCAN, ro.T_WITECH_SCAN_EARLIEST))
-- 			AVG(DATEDIFF(ro.T_WITECH_SCAN_EARLIEST,ro.T_WIADVISOR_SCAN))
-- 		WHEN ro.N_SRCE_ADD = "QNA" AND ro.T_WIADVISOR_SCAN IS NULL AND ro.T_START_JOURNEY IS NOT NULL AND ro.T_WITECH_SCAN_EARLIEST IS NOT NULL THEN 
-- -- 			AVG(TIMESTAMPDIFF(DAY, ro.T_START_JOURNEY, ro.T_WITECH_SCAN_EARLIEST))
-- 			AVG(DATEDIFF(ro.T_WITECH_SCAN_EARLIEST,ro.T_START_JOURNEY))
-- 		ELSE 0
--     	END)
    WHEN ro.L_CURRENT_RO_STATUS = "Diagnosis/Case Created" THEN
    AVG(IF (ro.T_WITECH_SCAN_EARLIEST IS NOT NULL AND  cs1.cherwellcreteddatetime IS NOT NULL ,DATEDIFF(cs1.cherwellcreteddatetime,ro.T_WITECH_SCAN_EARLIEST) ,
   IF(ro.T_WIADVISOR_SCAN IS NOT NULL AND  cs1.cherwellcreteddatetime IS NOT NULL AND ro.T_WITECH_SCAN_EARLIEST IS NULL,DATEDIFF(cs1.cherwellcreteddatetime,ro.T_WIADVISOR_SCAN),0)))
--     (CASE WHEN ro.T_WITECH_SCAN_EARLIEST IS NOT NULL AND  cs1.cherwellcreteddatetime IS NOT NULL THEN 
-- -- 			AVG(TIMESTAMPDIFF(DAY, ro.T_WITECH_SCAN_EARLIEST, ro.T_FIRST_CREATED_CHERWELL_CASEID ))
-- 			AVG(DATEDIFF(cs1.cherwellcreteddatetime,ro.T_WITECH_SCAN_EARLIEST))
-- 	    WHEN ro.T_WIADVISOR_SCAN IS NOT NULL AND  cs1.cherwellcreteddatetime IS NOT NULL AND ro.T_WITECH_SCAN_EARLIEST IS NULL THEN      
-- -- 			AVG(timestampdiff(DAY,  ro.T_WIADVISOR_SCAN, ro.T_FIRST_CREATED_CHERWELL_CASEID ))
-- 			AVG(DATEDIFF(cs1.cherwellcreteddatetime,ro.T_WIADVISOR_SCAN))
-- 			ELSE 0
-- 			END)			
	WHEN ro.L_CURRENT_RO_STATUS = "Escalated" THEN
	(CASE WHEN cs.ESCALATETOENGINEERING = 1 AND cs1.cherwellcreteddatetime IS NOT NULL AND  cs.lastescalateddatetime IS NOT NULL THEN 
-- 			AVG(TIMESTAMPDIFF(DAY, ro.cherwellcreteddatetime, cs.lastescalateddatetime ))
			AVG(DATEDIFF(cs.lastescalateddatetime,cs1.cherwellcreteddatetime))
			ELSE 0
			END)
	
    WHEN ro.L_CURRENT_RO_STATUS = "Part Ordered" THEN
    AVG(IF (ESCALATETOENGINEERING = 1 AND gp.max_confirmdate IS NOT NULL AND cs.lastescalateddatetime IS NOT NULL ,DATEDIFF(gp.max_confirmdate,cs.lastescalateddatetime),IF(gp.max_confirmdate IS NOT NULL AND cs1.cherwellcreteddatetime IS NOT NULL,DATEDIFF(gp.max_confirmdate,cs1.cherwellcreteddatetime),0)))
--     (CASE WHEN  gp.max_confirmdate IS NOT NULL AND cs.lastescalateddatetime IS NOT NULL  THEN 
-- -- 			AVG(TIMESTAMPDIFF(DAY, cs.lastescalateddatetime,gp.max_confirmdate))
-- 			AVG(DATEDIFF(gp.max_confirmdate,cs.lastescalateddatetime))
-- 		  WHEN gp.max_confirmdate IS NOT NULL AND cs1.cherwellcreteddatetime IS NOT NULL  THEN 
-- -- 			TIMESTAMPDIFF(DAY,cs.LASTESCALATEDDATETIME, MAX(NULLIF (gp.T_ORDER_CONFIRM,0)) )
-- 			AVG(DATEDIFF(gp.max_confirmdate,cs1.cherwellcreteddatetime))
-- 		  ELSE 0
-- 			END)
    
	WHEN ro.L_CURRENT_RO_STATUS = "Part Shipped" THEN 
	(CASE WHEN gp.max_confirmdate IS NOT NULL AND gp.max_shipdate IS NOT NULL THEN
-- 	   	 AVG( TIMESTAMPDIFF(DAY,  gp.max_confirmdate, gp.max_shipdate))
	   	 AVG(DATEDIFF(gp.max_shipdate,gp.max_confirmdate))
	     ELSE 0
			END)
	WHEN ro.L_CURRENT_RO_STATUS = "Delivered" THEN
	(CASE WHEN gp.max_shipdate IS NOT NULL AND gp.max_delivery IS NOT NULL THEN
-- 	   	  AVG(TIMESTAMPDIFF(DAY, gp.max_shipdate, gp.max_delivery))
	   	  AVG(DATEDIFF(gp.max_delivery,gp.max_shipdate))
	     ELSE 0
			END)
	
	WHEN ro.L_CURRENT_RO_STATUS = "Under Repair" THEN 
	(CASE WHEN gp.max_delivery IS NOT NULL AND ro.T_END_JOURNEY IS NULL THEN 
-- 	       AVG(TIMESTAMPDIFF(DAY, gp.max_delivery, NOW()))
	       AVG(DATEDIFF( NOW(),gp.max_delivery))
	       ELSE 0
			END)
-- 	WHEN ro.L_CURRENT_RO_STATUS = "Open" THEN
-- 	 (CASE WHEN ro.T_START_JOURNEY IS NOT NULL AND ro.T_END_JOURNEY IS NULL THEN 
-- 	       AVG(TIMESTAMPDIFF(DAY, ro.T_START_JOURNEY, NOW()))
-- 	       ELSE 0
-- 		    END)
	ELSE 0
	END) As avgDay
FROM RO_JOURNEY_OPEN ro
LEFT JOIN (SELECT g.I_RO_JOURNEY,MAX(NULLIF(g.T_SHIPPED,0)) As max_shipdate,MAX(NULLIF (g.T_DELIVERY,0)) As max_delivery ,MAX(NULLIF (g.T_ORDER_CONFIRM,0)) As max_confirmdate FROM GPOP_DATA g GROUP BY g.I_RO_JOURNEY) gp ON gp.I_RO_JOURNEY = ro.I_RO_JOURNEY

LEFT JOIN (SELECT c.I_RO_JOURNEY,c.ESCALATETOENGINEERING,MAX(NULLIF(c.LASTESCALATEDDATETIME,0)) As lastescalateddatetime 
FROM CHERWELL_CASE_PART3 c WHERE c.ESCALATETOENGINEERING =1  GROUP BY c.I_RO_JOURNEY) cs ON  cs.I_RO_JOURNEY = ro.I_RO_JOURNEY AND cs.lastescalateddatetime !="1899-12-30 00:00:00"
LEFT JOIN (SELECT c1.I_RO_JOURNEY,IF(c3.ESCALATETOENGINEERING =1,c1.CREATEDDATETIME,MAX(c1.CREATEDDATETIME)) As cherwellcreteddatetime
FROM CHERWELL_CASE_PART1 c1  left join CHERWELL_CASE_PART3 c3 on c3.RECID=c1.RECID GROUP BY c1.I_RO_JOURNEY) cs1 ON  cs1.I_RO_JOURNEY = ro.I_RO_JOURNEY 
WHERE ro.C_DLR NOT IN (SELECT C_DLR FROM EXCLUDED_DEALERS) -- Excluded Test Dealers
	AND IFNULL(ro.I_MOD_YR,'')!='' AND IFNULL(ro.C_FAM,'')!='' AND IFNULL(ro.C_FUEL_TYPE,'')!='' -- Excluded Competitive Vehicles
	AND ro.C_DLR_BUSINESS != 'I' -- Excluded International Dealers 
	AND IFNULL(ro.L_IS_NVP,'N')!='Y' -- Excluded NVP
	AND (businessCenter = '' OR ro.N_BUSINESS_CENTER = businessCenter)
	AND (dealerCode = '' OR ro.C_DLR = dealerCode)
	AND (year = '' OR ro.I_MOD_YR = year)
	AND (model = '' OR ro.C_FAM = model)
	AND (engine = '' OR ro.C_ENGINE_SALES_CODE = engine)
	AND ro.L_CURRENT_RO_STATUS IS NOT NULL
	AND ro.L_CURRENT_RO_STATUS != "Open"
GROUP BY ro.L_CURRENT_RO_STATUS
ORDER BY ro.L_CURRENT_RO_STATUS;

-- Dealer owned vin repaired
SELECT COUNT(DISTINCT ro.I_VIN) AS vehicleCount,ro.L_CURRENT_RO_STATUS As labels,
(CASE	
	 
    WHEN ro.L_CURRENT_RO_STATUS = "Written Up" THEN
     AVG(IF (ro.N_SRCE_ADD = "QNA"AND ro.T_WIADVISOR_SCAN IS NULL AND ro.T_START_JOURNEY IS NOT NULL AND ro.T_WITECH_SCAN_EARLIEST IS NOT NULL ,DATEDIFF(ro.T_WITECH_SCAN_EARLIEST,ro.T_START_JOURNEY) ,IF(ro.T_WIADVISOR_SCAN IS NOT NULL AND ro.T_WITECH_SCAN_EARLIEST IS NOT NULL,DATEDIFF(ro.T_WITECH_SCAN_EARLIEST,ro.T_WIADVISOR_SCAN),0)))
--     (CASE WHEN ro.T_WIADVISOR_SCAN IS NOT NULL AND ro.T_WITECH_SCAN_EARLIEST IS NOT NULL THEN 
-- -- 			AVG( timestampdiff(DAY,  ro.T_WIADVISOR_SCAN, ro.T_WITECH_SCAN_EARLIEST))
-- 			AVG(DATEDIFF(ro.T_WITECH_SCAN_EARLIEST,ro.T_WIADVISOR_SCAN))
-- 		WHEN ro.N_SRCE_ADD = "QNA" AND ro.T_WIADVISOR_SCAN IS NULL AND ro.T_START_JOURNEY IS NOT NULL AND ro.T_WITECH_SCAN_EARLIEST IS NOT NULL THEN 
-- -- 			AVG(TIMESTAMPDIFF(DAY, ro.T_START_JOURNEY, ro.T_WITECH_SCAN_EARLIEST))
-- 			AVG(DATEDIFF(ro.T_WITECH_SCAN_EARLIEST,ro.T_START_JOURNEY))
-- 		ELSE 0
--     	END)
    WHEN ro.L_CURRENT_RO_STATUS = "Diagnosis/Case Created" THEN
    AVG(IF (ro.T_WITECH_SCAN_EARLIEST IS NOT NULL AND  cs1.cherwellcreteddatetime IS NOT NULL ,DATEDIFF(cs1.cherwellcreteddatetime,ro.T_WITECH_SCAN_EARLIEST) ,
   IF(ro.T_WIADVISOR_SCAN IS NOT NULL AND  cs1.cherwellcreteddatetime IS NOT NULL AND ro.T_WITECH_SCAN_EARLIEST IS NULL,DATEDIFF(cs1.cherwellcreteddatetime,ro.T_WIADVISOR_SCAN),0)))
--     (CASE WHEN ro.T_WITECH_SCAN_EARLIEST IS NOT NULL AND  cs1.cherwellcreteddatetime IS NOT NULL THEN 
-- -- 			AVG(TIMESTAMPDIFF(DAY, ro.T_WITECH_SCAN_EARLIEST, ro.T_FIRST_CREATED_CHERWELL_CASEID ))
-- 			AVG(DATEDIFF(cs1.cherwellcreteddatetime,ro.T_WITECH_SCAN_EARLIEST))
-- 	    WHEN ro.T_WIADVISOR_SCAN IS NOT NULL AND  cs1.cherwellcreteddatetime IS NOT NULL AND ro.T_WITECH_SCAN_EARLIEST IS NULL THEN      
-- -- 			AVG(timestampdiff(DAY,  ro.T_WIADVISOR_SCAN, ro.T_FIRST_CREATED_CHERWELL_CASEID ))
-- 			AVG(DATEDIFF(cs1.cherwellcreteddatetime,ro.T_WIADVISOR_SCAN))
-- 			ELSE 0
-- 			END)			
	WHEN ro.L_CURRENT_RO_STATUS = "Escalated" THEN
	(CASE WHEN cs.ESCALATETOENGINEERING = 1 AND cs1.cherwellcreteddatetime IS NOT NULL AND  cs.lastescalateddatetime IS NOT NULL THEN 
-- 			AVG(TIMESTAMPDIFF(DAY, ro.cherwellcreteddatetime, cs.lastescalateddatetime ))
			AVG(DATEDIFF(cs.lastescalateddatetime,cs1.cherwellcreteddatetime))
			ELSE 0
			END)
	
    WHEN ro.L_CURRENT_RO_STATUS = "Part Ordered" THEN
    AVG(IF (ESCALATETOENGINEERING = 1 AND gp.max_confirmdate IS NOT NULL AND cs.lastescalateddatetime IS NOT NULL ,DATEDIFF(gp.max_confirmdate,cs.lastescalateddatetime),IF(gp.max_confirmdate IS NOT NULL AND cs1.cherwellcreteddatetime IS NOT NULL,DATEDIFF(gp.max_confirmdate,cs1.cherwellcreteddatetime),0)))
--     (CASE WHEN  gp.max_confirmdate IS NOT NULL AND cs.lastescalateddatetime IS NOT NULL  THEN 
-- -- 			AVG(TIMESTAMPDIFF(DAY, cs.lastescalateddatetime,gp.max_confirmdate))
-- 			AVG(DATEDIFF(gp.max_confirmdate,cs.lastescalateddatetime))
-- 		  WHEN gp.max_confirmdate IS NOT NULL AND cs1.cherwellcreteddatetime IS NOT NULL  THEN 
-- -- 			TIMESTAMPDIFF(DAY,cs.LASTESCALATEDDATETIME, MAX(NULLIF (gp.T_ORDER_CONFIRM,0)) )
-- 			AVG(DATEDIFF(gp.max_confirmdate,cs1.cherwellcreteddatetime))
-- 		  ELSE 0
-- 			END)
    
	WHEN ro.L_CURRENT_RO_STATUS = "Part Shipped" THEN 
	(CASE WHEN gp.max_confirmdate IS NOT NULL AND gp.max_shipdate IS NOT NULL THEN
-- 	   	 AVG( TIMESTAMPDIFF(DAY,  gp.max_confirmdate, gp.max_shipdate))
	   	 AVG(DATEDIFF(gp.max_shipdate,gp.max_confirmdate))
	     ELSE 0
			END)
	WHEN ro.L_CURRENT_RO_STATUS = "Delivered" THEN
	(CASE WHEN gp.max_shipdate IS NOT NULL AND gp.max_delivery IS NOT NULL THEN
-- 	   	  AVG(TIMESTAMPDIFF(DAY, gp.max_shipdate, gp.max_delivery))
	   	  AVG(DATEDIFF(gp.max_delivery,gp.max_shipdate))
	     ELSE 0
			END)
	
	WHEN ro.L_CURRENT_RO_STATUS = "Under Repair" THEN 
	(CASE WHEN gp.max_delivery IS NOT NULL AND ro.T_END_JOURNEY IS NULL THEN 
-- 	       AVG(TIMESTAMPDIFF(DAY, gp.max_delivery, NOW()))
	       AVG(DATEDIFF( NOW(),gp.max_delivery))
	       ELSE 0
			END)
-- 	WHEN ro.L_CURRENT_RO_STATUS = "Open" THEN
-- 	 (CASE WHEN ro.T_START_JOURNEY IS NOT NULL AND ro.T_END_JOURNEY IS NULL THEN 
-- 	       AVG(TIMESTAMPDIFF(DAY, ro.T_START_JOURNEY, NOW()))
-- 	       ELSE 0
-- 		    END)
	ELSE 0
	END) As avgDay
FROM RO_JOURNEY_OPEN ro
LEFT JOIN (SELECT g.I_RO_JOURNEY,MAX(NULLIF(g.T_SHIPPED,0)) As max_shipdate,MAX(NULLIF (g.T_DELIVERY,0)) As max_delivery ,MAX(NULLIF (g.T_ORDER_CONFIRM,0)) As max_confirmdate FROM GPOP_DATA g GROUP BY g.I_RO_JOURNEY) gp ON gp.I_RO_JOURNEY = ro.I_RO_JOURNEY

LEFT JOIN (SELECT c.I_RO_JOURNEY,c.ESCALATETOENGINEERING,MAX(NULLIF(c.LASTESCALATEDDATETIME,0)) As lastescalateddatetime 
FROM CHERWELL_CASE_PART3 c WHERE c.ESCALATETOENGINEERING =1  GROUP BY c.I_RO_JOURNEY) cs ON  cs.I_RO_JOURNEY = ro.I_RO_JOURNEY AND cs.lastescalateddatetime !="1899-12-30 00:00:00"
LEFT JOIN (SELECT c1.I_RO_JOURNEY,IF(c3.ESCALATETOENGINEERING =1,c1.CREATEDDATETIME,MAX(c1.CREATEDDATETIME)) As cherwellcreteddatetime
FROM CHERWELL_CASE_PART1 c1  left join CHERWELL_CASE_PART3 c3 on c3.RECID=c1.RECID GROUP BY c1.I_RO_JOURNEY) cs1 ON  cs1.I_RO_JOURNEY = ro.I_RO_JOURNEY 
LEFT JOIN VEHICLE_MASTER vm ON ro.I_VIN = vm.I_VIN 
WHERE ro.C_DLR NOT IN (SELECT C_DLR FROM EXCLUDED_DEALERS) -- Excluded Test Dealers
	AND IFNULL(ro.I_MOD_YR,'')!='' AND IFNULL(ro.C_FAM,'')!='' AND IFNULL(ro.C_FUEL_TYPE,'')!='' -- Excluded Competitive Vehicles
	AND ro.C_DLR_BUSINESS != 'I' -- Excluded International Dealers 
	AND IFNULL(ro.L_IS_NVP,'N')!='Y' -- Excluded NVP
	AND (businessCenter = '' OR ro.N_BUSINESS_CENTER = businessCenter)
	AND (dealerCode = '' OR ro.C_DLR = dealerCode)
	AND (year = '' OR ro.I_MOD_YR = year)
	AND (model = '' OR ro.C_FAM = model)
	AND (engine = '' OR ro.C_ENGINE_SALES_CODE = engine)
	AND ro.L_CURRENT_RO_STATUS IS NOT NULL
	AND ro.L_CURRENT_RO_STATUS != "Open"
	AND (vm.D_VHCL_SOLD IS  NULL OR vm.D_VHCL_SOLD = "0001-01-01")
GROUP BY ro.L_CURRENT_RO_STATUS
ORDER BY ro.L_CURRENT_RO_STATUS;

-- Customer owned vin repaired

SELECT COUNT(DISTINCT ro.I_VIN) AS vehicleCount,ro.L_CURRENT_RO_STATUS As labels,
(CASE	
	 
    WHEN ro.L_CURRENT_RO_STATUS = "Written Up" THEN
     AVG(IF (ro.N_SRCE_ADD = "QNA"AND ro.T_WIADVISOR_SCAN IS NULL AND ro.T_START_JOURNEY IS NOT NULL AND ro.T_WITECH_SCAN_EARLIEST IS NOT NULL ,DATEDIFF(ro.T_WITECH_SCAN_EARLIEST,ro.T_START_JOURNEY) ,IF(ro.T_WIADVISOR_SCAN IS NOT NULL AND ro.T_WITECH_SCAN_EARLIEST IS NOT NULL,DATEDIFF(ro.T_WITECH_SCAN_EARLIEST,ro.T_WIADVISOR_SCAN),0)))
--     (CASE WHEN ro.T_WIADVISOR_SCAN IS NOT NULL AND ro.T_WITECH_SCAN_EARLIEST IS NOT NULL THEN 
-- -- 			AVG( timestampdiff(DAY,  ro.T_WIADVISOR_SCAN, ro.T_WITECH_SCAN_EARLIEST))
-- 			AVG(DATEDIFF(ro.T_WITECH_SCAN_EARLIEST,ro.T_WIADVISOR_SCAN))
-- 		WHEN ro.N_SRCE_ADD = "QNA" AND ro.T_WIADVISOR_SCAN IS NULL AND ro.T_START_JOURNEY IS NOT NULL AND ro.T_WITECH_SCAN_EARLIEST IS NOT NULL THEN 
-- -- 			AVG(TIMESTAMPDIFF(DAY, ro.T_START_JOURNEY, ro.T_WITECH_SCAN_EARLIEST))
-- 			AVG(DATEDIFF(ro.T_WITECH_SCAN_EARLIEST,ro.T_START_JOURNEY))
-- 		ELSE 0
--     	END)
    WHEN ro.L_CURRENT_RO_STATUS = "Diagnosis/Case Created" THEN
    AVG(IF (ro.T_WITECH_SCAN_EARLIEST IS NOT NULL AND  cs1.cherwellcreteddatetime IS NOT NULL ,DATEDIFF(cs1.cherwellcreteddatetime,ro.T_WITECH_SCAN_EARLIEST) ,
   IF(ro.T_WIADVISOR_SCAN IS NOT NULL AND  cs1.cherwellcreteddatetime IS NOT NULL AND ro.T_WITECH_SCAN_EARLIEST IS NULL,DATEDIFF(cs1.cherwellcreteddatetime,ro.T_WIADVISOR_SCAN),0)))
--     (CASE WHEN ro.T_WITECH_SCAN_EARLIEST IS NOT NULL AND  cs1.cherwellcreteddatetime IS NOT NULL THEN 
-- -- 			AVG(TIMESTAMPDIFF(DAY, ro.T_WITECH_SCAN_EARLIEST, ro.T_FIRST_CREATED_CHERWELL_CASEID ))
-- 			AVG(DATEDIFF(cs1.cherwellcreteddatetime,ro.T_WITECH_SCAN_EARLIEST))
-- 	    WHEN ro.T_WIADVISOR_SCAN IS NOT NULL AND  cs1.cherwellcreteddatetime IS NOT NULL AND ro.T_WITECH_SCAN_EARLIEST IS NULL THEN      
-- -- 			AVG(timestampdiff(DAY,  ro.T_WIADVISOR_SCAN, ro.T_FIRST_CREATED_CHERWELL_CASEID ))
-- 			AVG(DATEDIFF(cs1.cherwellcreteddatetime,ro.T_WIADVISOR_SCAN))
-- 			ELSE 0
-- 			END)			
	WHEN ro.L_CURRENT_RO_STATUS = "Escalated" THEN
	(CASE WHEN cs.ESCALATETOENGINEERING = 1 AND cs1.cherwellcreteddatetime IS NOT NULL AND  cs.lastescalateddatetime IS NOT NULL THEN 
-- 			AVG(TIMESTAMPDIFF(DAY, ro.cherwellcreteddatetime, cs.lastescalateddatetime ))
			AVG(DATEDIFF(cs.lastescalateddatetime,cs1.cherwellcreteddatetime))
			ELSE 0
			END)
	
    WHEN ro.L_CURRENT_RO_STATUS = "Part Ordered" THEN
    AVG(IF (ESCALATETOENGINEERING = 1 AND gp.max_confirmdate IS NOT NULL AND cs.lastescalateddatetime IS NOT NULL ,DATEDIFF(gp.max_confirmdate,cs.lastescalateddatetime),IF(gp.max_confirmdate IS NOT NULL AND cs1.cherwellcreteddatetime IS NOT NULL,DATEDIFF(gp.max_confirmdate,cs1.cherwellcreteddatetime),0)))
--     (CASE WHEN  gp.max_confirmdate IS NOT NULL AND cs.lastescalateddatetime IS NOT NULL  THEN 
-- -- 			AVG(TIMESTAMPDIFF(DAY, cs.lastescalateddatetime,gp.max_confirmdate))
-- 			AVG(DATEDIFF(gp.max_confirmdate,cs.lastescalateddatetime))
-- 		  WHEN gp.max_confirmdate IS NOT NULL AND cs1.cherwellcreteddatetime IS NOT NULL  THEN 
-- -- 			TIMESTAMPDIFF(DAY,cs.LASTESCALATEDDATETIME, MAX(NULLIF (gp.T_ORDER_CONFIRM,0)) )
-- 			AVG(DATEDIFF(gp.max_confirmdate,cs1.cherwellcreteddatetime))
-- 		  ELSE 0
-- 			END)
    
	WHEN ro.L_CURRENT_RO_STATUS = "Part Shipped" THEN 
	(CASE WHEN gp.max_confirmdate IS NOT NULL AND gp.max_shipdate IS NOT NULL THEN
-- 	   	 AVG( TIMESTAMPDIFF(DAY,  gp.max_confirmdate, gp.max_shipdate))
	   	 AVG(DATEDIFF(gp.max_shipdate,gp.max_confirmdate))
	     ELSE 0
			END)
	WHEN ro.L_CURRENT_RO_STATUS = "Delivered" THEN
	(CASE WHEN gp.max_shipdate IS NOT NULL AND gp.max_delivery IS NOT NULL THEN
-- 	   	  AVG(TIMESTAMPDIFF(DAY, gp.max_shipdate, gp.max_delivery))
	   	  AVG(DATEDIFF(gp.max_delivery,gp.max_shipdate))
	     ELSE 0
			END)
	
	WHEN ro.L_CURRENT_RO_STATUS = "Under Repair" THEN 
	(CASE WHEN gp.max_delivery IS NOT NULL AND ro.T_END_JOURNEY IS NULL THEN 
-- 	       AVG(TIMESTAMPDIFF(DAY, gp.max_delivery, NOW()))
	       AVG(DATEDIFF( NOW(),gp.max_delivery))
	       ELSE 0
			END)
-- 	WHEN ro.L_CURRENT_RO_STATUS = "Open" THEN
-- 	 (CASE WHEN ro.T_START_JOURNEY IS NOT NULL AND ro.T_END_JOURNEY IS NULL THEN 
-- 	       AVG(TIMESTAMPDIFF(DAY, ro.T_START_JOURNEY, NOW()))
-- 	       ELSE 0
-- 		    END)
	ELSE 0
	END) As avgDay
FROM RO_JOURNEY_OPEN ro
LEFT JOIN (SELECT g.I_RO_JOURNEY,MAX(NULLIF(g.T_SHIPPED,0)) As max_shipdate,MAX(NULLIF (g.T_DELIVERY,0)) As max_delivery ,MAX(NULLIF (g.T_ORDER_CONFIRM,0)) As max_confirmdate FROM GPOP_DATA g GROUP BY g.I_RO_JOURNEY) gp ON gp.I_RO_JOURNEY = ro.I_RO_JOURNEY

LEFT JOIN (SELECT c.I_RO_JOURNEY,c.ESCALATETOENGINEERING,MAX(NULLIF(c.LASTESCALATEDDATETIME,0)) As lastescalateddatetime 
FROM CHERWELL_CASE_PART3 c WHERE c.ESCALATETOENGINEERING =1  GROUP BY c.I_RO_JOURNEY) cs ON  cs.I_RO_JOURNEY = ro.I_RO_JOURNEY AND cs.lastescalateddatetime !="1899-12-30 00:00:00"
LEFT JOIN (SELECT c1.I_RO_JOURNEY,IF(c3.ESCALATETOENGINEERING =1,c1.CREATEDDATETIME,MAX(c1.CREATEDDATETIME)) As cherwellcreteddatetime
FROM CHERWELL_CASE_PART1 c1  left join CHERWELL_CASE_PART3 c3 on c3.RECID=c1.RECID GROUP BY c1.I_RO_JOURNEY) cs1 ON  cs1.I_RO_JOURNEY = ro.I_RO_JOURNEY 
LEFT JOIN VEHICLE_MASTER vm ON ro.I_VIN = vm.I_VIN 
WHERE ro.C_DLR NOT IN (SELECT C_DLR FROM EXCLUDED_DEALERS) -- Excluded Test Dealers
	AND IFNULL(ro.I_MOD_YR,'')!='' AND IFNULL(ro.C_FAM,'')!='' AND IFNULL(ro.C_FUEL_TYPE,'')!='' -- Excluded Competitive Vehicles
	AND ro.C_DLR_BUSINESS != 'I' -- Excluded International Dealers 
	AND IFNULL(ro.L_IS_NVP,'N')!='Y' -- Excluded NVP
	AND (businessCenter = '' OR ro.N_BUSINESS_CENTER = businessCenter)
	AND (dealerCode = '' OR ro.C_DLR = dealerCode)
	AND (year = '' OR ro.I_MOD_YR = year)
	AND (model = '' OR ro.C_FAM = model)
	AND (engine = '' OR ro.C_ENGINE_SALES_CODE = engine)
	AND ro.L_CURRENT_RO_STATUS IS NOT NULL
	AND ro.L_CURRENT_RO_STATUS != "Open"
	AND (vm.D_VHCL_SOLD IS NOT NULL AND vm.D_VHCL_SOLD != "0001-01-01")
GROUP BY ro.L_CURRENT_RO_STATUS
ORDER BY ro.L_CURRENT_RO_STATUS;
-- Phev target Days

SELECT RepairPhase AS labels, SUM(TargetDays) AS vehicleCount, AVG(TargetDays) AS avgDay
FROM REPAIR_TARGET_DAYS 
WHERE VehicleType IN 
(SELECT IF((C_FUEL_TYPE="GAS" OR C_FUEL_TYPE="FLEX" OR C_FUEL_TYPE = "DIESEL" OR C_FUEL_TYPE = "MHEV" ),'GAS',
		IF((C_FUEL_TYPE = "PHEV" OR C_FUEL_TYPE="FHEV"),'PHEV',C_FUEL_TYPE))   		 	
	FROM FUELTYPE
	WHERE engine = ''  OR C_ENGINE_SALES_CODE = engine
)
GROUP BY(RepairPhase);
	
END
=========================================
CREATE DEFINER=`t12247adm`@`%` PROCEDURE `db_12247_d_001_instance_1`.`PROC_GET_REPEAT_REPAIRS_VEH`(
	IN `businessCenter` VARCHAR(500),
	IN `dealerCode` VARCHAR(500),
	IN `year` VARCHAR(500),
	IN `model` VARCHAR(500),
	IN `engine` VARCHAR(500),
	IN `roOpenDateFrom` DATE,
	IN `roOpenDateTo` DATE,
	IN `caseOpenDateFrom` DATE,
	IN `caseOpenDateTo` DATE,
	IN `caseCloseDateFrom` DATE,
	IN `caseCloseDateTo` DATE,
	IN `status` VARCHAR(50),
	IN `salesCode` VARCHAR(3),
	IN `fuelType` VARCHAR(50),
	IN `cumDays` VARCHAR(10),
	IN `daysDown` VARCHAR(10),
	IN `repairCount` VARCHAR(10),
	IN `odometer` VARCHAR(50),
	IN `witech` VARCHAR(5),
	IN `wiadvisor` VARCHAR(5),
	IN `roNumber` VARCHAR(5),
	IN `forceClose` VARCHAR(5),
	IN `caseEscalatedDateFrom` DATE,
	IN `caseEscalatedDateTo` DATE,
	IN `partsOrderedDateFrom` DATE,
	IN `partsOrderedDateTo` DATE,
	IN `partsShippedDateFrom` DATE,
	IN `partsShippedDateTo` DATE,
	IN `partsDeliveredDateFrom` DATE,
	IN `partsDeliveredDateTo` DATE,
	IN `pageOffset` INT,
	IN `pageSize` INT,
	IN `sortBy` VARCHAR(50),
	IN `sortOrder` VARCHAR(50)
)
    SQL SECURITY INVOKER
BEGIN
DECLARE dayDownRangeStart INT;
DECLARE dayDownRangeEnd INT;
DECLARE cumDaysRangeStart INT;
DECLARE cumDaysRangeEnd INT;
DECLARE repairCountRangeStart INT;
DECLARE repairCountRangeEnd INT;

SET dayDownRangeStart = SUBSTRING_INDEX(daysDown, '-', 1);
SET dayDownRangeEnd = SUBSTRING_INDEX(daysDown,'-',-1);

SET cumDaysRangeStart = SUBSTRING_INDEX(cumDays,'-',1);
SET cumDaysRangeEnd = SUBSTRING_INDEX(cumDays,'-',-1);

SET repairCountRangeStart = SUBSTRING_INDEX(repairCount,'-',1);
SET repairCountRangeEnd = SUBSTRING_INDEX(repairCount,'-',-1);

SET pageSize = IF(pageSize=0, 10,pageSize);

IF sortBy = '' THEN
    -- return current page records only
	SELECT DISTINCT ro.I_RO_JOURNEY as roJourneyId,
			 ro.I_VIN AS vin,
			 ro.C_FAM AS model,
			 ro.I_MOD_YR AS year,
			 FLOOR(ro.Q_ODOMETER) AS odometer,
			 ro.N_DLR AS dealer,
			 ro.T_START_JOURNEY AS roDate,
			 ro.I_DAYS_DOWN AS noOfDaysDown,
			 ro.I_REPAIR_COUNT AS repairCount,
			 ro.I_CUM_DAYS AS cumDays,
			 L_CURRENT_RO_STATUS AS status,
			 ro.I_FIRST_CHERWELL_CASEID AS starCaseId, 
			 ro.T_FIRST_CREATED_CHERWELL_CASEID AS caseOpenDate,
			 ro.I_DLR_PH_NMBR AS dealerContact,
			 ro.C_DLR AS dealerCode,
			 ro.C_FUEL_TYPE AS `fuelType`,
			 ro.C_ENGINE_SALES_CODE AS `engine`
	FROM RO_JOURNEY_OPEN ro
	LEFT JOIN GPOP_DATA g ON ro.I_RO_JOURNEY=g.I_RO_JOURNEY AND ro.I_VIN=g.I_VIN AND g.C_DLR=ro.C_DLR
	LEFT JOIN CHERWELL_CASE_PART3 c ON c.I_RO_JOURNEY=ro.I_RO_JOURNEY AND c.I_VIN=ro.I_VIN AND c.C_DLR=ro.C_DLR
	WHERE ro.L_REPEAT_REPAIR IS NOT NULL
		AND ro.C_DLR NOT IN (SELECT C_DLR FROM EXCLUDED_DEALERS) -- Excluded Test Dealers
		AND IFNULL(ro.I_MOD_YR,'')!='' AND IFNULL(ro.C_FAM,'')!='' AND IFNULL(ro.C_FUEL_TYPE,'')!='' -- Excluded Competitive Vehicles
		AND ro.C_DLR_BUSINESS != 'I' -- Excluded International Dealers 
		AND (dealerCode = '' OR FIND_IN_SET(ro.C_DLR,dealerCode))
		AND (businessCenter = '' OR FIND_IN_SET(ro.N_BUSINESS_CENTER,businessCenter))
		AND (year = '' OR FIND_IN_SET(ro.I_MOD_YR,year))
		AND (model = '' OR FIND_IN_SET(ro.C_FAM,model))
		AND (`engine` = '' OR FIND_IN_SET(ro.C_ENGINE_SALES_CODE,`engine`))
		AND (`status` = '' OR ro.L_CURRENT_RO_STATUS = `status`) 
	   AND (salesCode = '' OR ro.C_TRANSM = salesCode) 
	   AND (`fuelType` = '' OR IFNULL(ro.C_FUEL_TYPE,'') = `fuelType`)    
	   AND (roOpenDateFrom IS NULL OR DATE(ro.T_START_JOURNEY) BETWEEN roOpenDateFrom AND roOpenDateTo) 
		AND (caseOpenDateFrom IS NULL OR DATE(ro.T_FIRST_CREATED_CHERWELL_CASEID) BETWEEN caseOpenDateFrom AND caseOpenDateTo) 
		AND (caseCloseDateFrom IS NULL OR DATE(ro.T_LAST_CLOSE_CHERWELL_CASEID) BETWEEN caseCloseDateFrom AND caseCloseDateTo)
		AND (cumDays = '' OR ro.I_CUM_DAYS BETWEEN cumDaysRangeStart AND cumDaysRangeEnd)
		AND (daysDown = '' OR ro.I_DAYS_DOWN BETWEEN dayDownRangeStart AND dayDownRangeEnd)
		AND (repairCount = '' OR ro.I_REPAIR_COUNT BETWEEN repairCountRangeStart AND repairCountRangeEnd)
		AND (odometer = '' OR (CASE WHEN odometer = '-50' THEN (CAST(ro.Q_ODOMETER AS DECIMAL) < 50) WHEN odometer = '+50' THEN (CAST(ro.Q_ODOMETER AS DECIMAL) > 50) END))
		AND (witech = '' OR (CASE WHEN witech = 'true' THEN ro.T_WITECH_SCAN_EARLIEST IS NOT NULL WHEN witech = 'false' THEN ro.T_WITECH_SCAN_EARLIEST IS NULL END))	
		AND (wiadvisor = '' OR (CASE WHEN wiadvisor = 'true' THEN ro.T_WIADVISOR_SCAN IS NOT NULL WHEN wiadvisor = 'false' THEN ro.T_WIADVISOR_SCAN IS NULL END))	
		AND (roNumber = '' OR (CASE WHEN roNumber = 'true' THEN ro.I_RO IS NOT NULL WHEN roNumber = 'false' THEN ro.I_RO IS NULL END))	
		AND (forceClose = '' OR (CASE WHEN forceClose = 'true' THEN ro.L_FORCE_CLOSE IS NOT NULL WHEN forceClose = 'false' THEN ro.L_FORCE_CLOSE IS NULL END))	
		AND (caseEscalatedDateFrom IS NULL OR DATE(c.LASTESCALATEDDATETIME) BETWEEN caseEscalatedDateFrom AND caseEscalatedDateTo)
		AND (partsOrderedDateFrom IS NULL OR DATE(g.T_ORDER_CONFIRM) BETWEEN partsOrderedDateFrom AND partsOrderedDateTo)
		AND (partsShippedDateFrom IS NULL OR DATE(g.T_SHIPPED) BETWEEN partsShippedDateFrom AND partsShippedDateTo)
		AND (partsDeliveredDateFrom IS NULL OR DATE(g.T_DELIVERY) BETWEEN partsDeliveredDateFrom AND partsDeliveredDateTo)
	ORDER BY ro.T_START_JOURNEY DESC
	LIMIT pageOffset,pageSize;
ELSE

	SELECT DISTINCT ro.I_RO_JOURNEY as roJourneyId,
			 ro.I_VIN AS vin,
			 ro.C_FAM AS model,
			 ro.I_MOD_YR AS year,
			 FLOOR(ro.Q_ODOMETER) AS odometer,
			 ro.N_DLR AS dealer,
			 ro.T_START_JOURNEY AS roDate,
			 ro.I_DAYS_DOWN AS noOfDaysDown,
			 ro.I_REPAIR_COUNT AS repairCount,
			 ro.I_CUM_DAYS AS cumDays,
			 L_CURRENT_RO_STATUS AS status,
			 ro.I_FIRST_CHERWELL_CASEID AS starCaseId, 
			 ro.T_FIRST_CREATED_CHERWELL_CASEID AS caseOpenDate,
			 ro.I_DLR_PH_NMBR AS dealerContact,
			 ro.C_DLR AS dealerCode,
			 ro.C_FUEL_TYPE AS `fuelType`,
			 ro.C_ENGINE_SALES_CODE AS `engine`
	FROM RO_JOURNEY_OPEN ro
	LEFT JOIN GPOP_DATA g ON ro.I_RO_JOURNEY=g.I_RO_JOURNEY AND ro.I_VIN=g.I_VIN AND g.C_DLR=ro.C_DLR
	LEFT JOIN CHERWELL_CASE_PART3 c ON c.I_RO_JOURNEY=ro.I_RO_JOURNEY AND c.I_VIN=ro.I_VIN AND c.C_DLR=ro.C_DLR
	WHERE ro.L_REPEAT_REPAIR IS NOT NULL
		AND ro.C_DLR NOT IN (SELECT C_DLR FROM EXCLUDED_DEALERS) -- Excluded Test Dealers
		AND IFNULL(ro.I_MOD_YR,'')!='' AND IFNULL(ro.C_FAM,'')!='' AND IFNULL(ro.C_FUEL_TYPE,'')!='' -- Excluded Competitive Vehicles
		AND ro.C_DLR_BUSINESS != 'I' -- Excluded International Dealers 
	   AND (dealerCode = '' OR FIND_IN_SET(ro.C_DLR,dealerCode))
		AND (businessCenter = '' OR FIND_IN_SET(ro.N_BUSINESS_CENTER,businessCenter))
		AND (year = '' OR FIND_IN_SET(ro.I_MOD_YR,year))
		AND (model = '' OR FIND_IN_SET(ro.C_FAM,model))
		AND (`engine` = '' OR FIND_IN_SET(ro.C_ENGINE_SALES_CODE,`engine`))
		AND (`status` = '' OR ro.L_CURRENT_RO_STATUS = `status`) 
	   AND (salesCode = '' OR ro.C_TRANSM = salesCode) 
	   AND (`fuelType` = '' OR IFNULL(ro.C_FUEL_TYPE,'') = `fuelType`)    
	   AND (roOpenDateFrom IS NULL OR DATE(ro.T_START_JOURNEY) BETWEEN roOpenDateFrom AND roOpenDateTo) 
		AND (caseOpenDateFrom IS NULL OR DATE(ro.T_FIRST_CREATED_CHERWELL_CASEID) BETWEEN caseOpenDateFrom AND caseOpenDateTo) 
		AND (caseCloseDateFrom IS NULL OR DATE(ro.T_LAST_CLOSE_CHERWELL_CASEID) BETWEEN caseCloseDateFrom AND caseCloseDateTo)
		AND (cumDays = '' OR ro.I_CUM_DAYS BETWEEN cumDaysRangeStart AND cumDaysRangeEnd)
		AND (daysDown = '' OR ro.I_DAYS_DOWN BETWEEN dayDownRangeStart AND dayDownRangeEnd)
		AND (repairCount = '' OR ro.I_REPAIR_COUNT BETWEEN repairCountRangeStart AND repairCountRangeEnd)
		AND (odometer = '' OR (CASE WHEN odometer = '-50' THEN (CAST(ro.Q_ODOMETER AS DECIMAL) < 50) WHEN odometer = '+50' THEN (CAST(ro.Q_ODOMETER AS DECIMAL) > 50) END))
		AND (witech = '' OR (CASE WHEN witech = 'true' THEN ro.T_WITECH_SCAN_EARLIEST IS NOT NULL WHEN witech = 'false' THEN ro.T_WITECH_SCAN_EARLIEST IS NULL END))	
		AND (wiadvisor = '' OR (CASE WHEN wiadvisor = 'true' THEN ro.T_WIADVISOR_SCAN IS NOT NULL WHEN wiadvisor = 'false' THEN ro.T_WIADVISOR_SCAN IS NULL END))	
		AND (roNumber = '' OR (CASE WHEN roNumber = 'true' THEN ro.I_RO IS NOT NULL WHEN roNumber = 'false' THEN ro.I_RO IS NULL END))	
		AND (forceClose = '' OR (CASE WHEN forceClose = 'true' THEN ro.L_FORCE_CLOSE IS NOT NULL WHEN forceClose = 'false' THEN ro.L_FORCE_CLOSE IS NULL END))	
		AND (caseEscalatedDateFrom IS NULL OR DATE(c.LASTESCALATEDDATETIME) BETWEEN caseEscalatedDateFrom AND caseEscalatedDateTo)
		AND (partsOrderedDateFrom IS NULL OR DATE(g.T_ORDER_CONFIRM) BETWEEN partsOrderedDateFrom AND partsOrderedDateTo)
		AND (partsShippedDateFrom IS NULL OR DATE(g.T_SHIPPED) BETWEEN partsShippedDateFrom AND partsShippedDateTo)
		AND (partsDeliveredDateFrom IS NULL OR DATE(g.T_DELIVERY) BETWEEN partsDeliveredDateFrom AND partsDeliveredDateTo)
	ORDER BY 
		  CASE WHEN sortBy ='vin' AND sortOrder ='ASC' THEN ro.I_VIN END ASC,
        CASE WHEN sortBy ='vin' AND sortOrder ='DESC' THEN ro.I_VIN END DESC,
        CASE WHEN sortBy ='model' AND sortOrder ='ASC' THEN ro.C_FAM END ASC,
        CASE WHEN sortBy ='model' AND sortOrder ='DESC' THEN ro.C_FAM END DESC,
        CASE WHEN sortBy ='year' AND sortOrder ='ASC' THEN ro.I_MOD_YR END ASC,
        CASE WHEN sortBy ='year' AND sortOrder ='DESC' THEN ro.I_MOD_YR END DESC,
        CASE WHEN sortBy ='engine' AND sortOrder ='ASC' THEN ro.C_ENGINE_SALES_CODE END ASC,
        CASE WHEN sortBy ='engine' AND sortOrder ='DESC' THEN ro.C_ENGINE_SALES_CODE END DESC,
        CASE WHEN sortBy ='fuelType' AND sortOrder ='ASC' THEN ro.C_FUEL_TYPE END ASC,
        CASE WHEN sortBy ='fuelType' AND sortOrder ='DESC' THEN ro.C_FUEL_TYPE END DESC,
        CASE WHEN sortBy ='dealerCode' AND sortOrder ='ASC' THEN ro.C_DLR END ASC,
        CASE WHEN sortBy ='dealerCode' AND sortOrder ='DESC' THEN ro.C_DLR END DESC,
        CASE WHEN sortBy ='roJourneyId' AND sortOrder ='ASC' THEN ro.I_RO_JOURNEY END ASC,
        CASE WHEN sortBy ='roJourneyId' AND sortOrder ='DESC' THEN ro.I_RO_JOURNEY END DESC,
        CASE WHEN sortBy ='roDate' AND sortOrder ='ASC' THEN ro.T_START_JOURNEY END ASC,
        CASE WHEN sortBy ='roDate' AND sortOrder ='DESC' THEN ro.T_START_JOURNEY END DESC,
	     CASE WHEN sortBy ='noOfDaysDown' AND sortOrder ='ASC' THEN ro.I_DAYS_DOWN END ASC,
        CASE WHEN sortBy ='noOfDaysDown' AND sortOrder ='DESC' THEN ro.I_DAYS_DOWN END DESC,
        CASE WHEN sortBy ='repairCount' AND sortOrder ='ASC' THEN ro.I_REPAIR_COUNT END ASC,
        CASE WHEN sortBy ='repairCount' AND sortOrder='DESC' THEN ro.I_REPAIR_COUNT END DESC,
        CASE WHEN sortBy ='odometer' AND sortOrder ='ASC' THEN CAST(ro.Q_ODOMETER AS DECIMAL) END ASC,
        CASE WHEN sortBy ='odometer' AND sortOrder ='DESC' THEN CAST(ro.Q_ODOMETER AS DECIMAL) END DESC,
        CASE WHEN sortBy ='cumDays' AND sortOrder ='ASC' THEN ro.I_CUM_DAYS END ASC,
        CASE WHEN sortBy ='cumDays' AND sortOrder ='DESC' THEN ro.I_CUM_DAYS END DESC,
        CASE WHEN sortBy ='starCaseId' AND sortOrder ='ASC' THEN ro.I_FIRST_CHERWELL_CASEID END ASC,
        CASE WHEN sortBy ='starCaseId' AND sortOrder ='DESC' THEN ro.I_FIRST_CHERWELL_CASEID END DESC,
        CASE WHEN sortBy ='caseOpenDate' AND sortOrder ='ASC' THEN ro.T_FIRST_CREATED_CHERWELL_CASEID END ASC,
        CASE WHEN sortBy ='caseOpenDate' AND sortOrder ='DESC' THEN ro.T_FIRST_CREATED_CHERWELL_CASEID END DESC,
        CASE WHEN sortBy ='status' AND sortOrder ='ASC' THEN ro.L_CURRENT_RO_STATUS END ASC,
        CASE WHEN sortBy ='status' AND sortOrder ='DESC' THEN ro.L_CURRENT_RO_STATUS END DESC
	LIMIT pageOffset,pageSize;
	
END IF;
	
	-- return total number of records
	SELECT  COUNT(DISTINCT ro.I_VIN) AS Total
	FROM RO_JOURNEY_OPEN ro
	LEFT JOIN GPOP_DATA g ON ro.I_RO_JOURNEY=g.I_RO_JOURNEY AND ro.I_VIN=g.I_VIN AND g.C_DLR=ro.C_DLR
	LEFT JOIN CHERWELL_CASE_PART3 c ON c.I_RO_JOURNEY=ro.I_RO_JOURNEY AND c.I_VIN=ro.I_VIN AND c.C_DLR=ro.C_DLR
	WHERE ro.L_REPEAT_REPAIR IS NOT NULL
		AND ro.C_DLR NOT IN (SELECT C_DLR FROM EXCLUDED_DEALERS) -- Excluded Test Dealers
		AND IFNULL(ro.I_MOD_YR,'')!='' AND IFNULL(ro.C_FAM,'')!='' AND IFNULL(ro.C_FUEL_TYPE,'')!='' -- Excluded Competitive Vehicles
		AND ro.C_DLR_BUSINESS != 'I' -- Excluded International Dealers 
		AND (dealerCode = '' OR FIND_IN_SET(ro.C_DLR,dealerCode))
		AND (businessCenter = '' OR FIND_IN_SET(ro.N_BUSINESS_CENTER,businessCenter))
		AND (year = '' OR FIND_IN_SET(ro.I_MOD_YR,year))
		AND (model = '' OR FIND_IN_SET(ro.C_FAM,model))
		AND (`engine` = '' OR FIND_IN_SET(ro.C_ENGINE_SALES_CODE,`engine`))
		AND (`status` = '' OR ro.L_CURRENT_RO_STATUS = `status`) 
	   AND (salesCode = '' OR ro.C_TRANSM = salesCode) 
	   AND (`fuelType` = '' OR IFNULL(ro.C_FUEL_TYPE,'') = `fuelType`)    
	   AND (roOpenDateFrom IS NULL OR DATE(ro.T_START_JOURNEY) BETWEEN roOpenDateFrom AND roOpenDateTo) 
		AND (caseOpenDateFrom IS NULL OR DATE(ro.T_FIRST_CREATED_CHERWELL_CASEID) BETWEEN caseOpenDateFrom AND caseOpenDateTo) 
		AND (caseCloseDateFrom IS NULL OR DATE(ro.T_LAST_CLOSE_CHERWELL_CASEID) BETWEEN caseCloseDateFrom AND caseCloseDateTo)
		AND (cumDays = '' OR ro.I_CUM_DAYS BETWEEN cumDaysRangeStart AND cumDaysRangeEnd)
		AND (daysDown = '' OR ro.I_DAYS_DOWN BETWEEN dayDownRangeStart AND dayDownRangeEnd)
		AND (repairCount = '' OR ro.I_REPAIR_COUNT BETWEEN repairCountRangeStart AND repairCountRangeEnd)
		AND (odometer = '' OR (CASE WHEN odometer = '-50' THEN (CAST(ro.Q_ODOMETER AS DECIMAL) < 50) WHEN odometer = '+50' THEN (CAST(ro.Q_ODOMETER AS DECIMAL) > 50) END))
		AND (witech = '' OR (CASE WHEN witech = 'true' THEN ro.T_WITECH_SCAN_EARLIEST IS NOT NULL WHEN witech = 'false' THEN ro.T_WITECH_SCAN_EARLIEST IS NULL END))	
		AND (wiadvisor = '' OR (CASE WHEN wiadvisor = 'true' THEN ro.T_WIADVISOR_SCAN IS NOT NULL WHEN wiadvisor = 'false' THEN ro.T_WIADVISOR_SCAN IS NULL END))	
		AND (roNumber = '' OR (CASE WHEN roNumber = 'true' THEN ro.I_RO IS NOT NULL WHEN roNumber = 'false' THEN ro.I_RO IS NULL END))	
		AND (forceClose = '' OR (CASE WHEN forceClose = 'true' THEN ro.L_FORCE_CLOSE IS NOT NULL WHEN forceClose = 'false' THEN ro.L_FORCE_CLOSE IS NULL END))	
		AND (caseEscalatedDateFrom IS NULL OR DATE(c.LASTESCALATEDDATETIME) BETWEEN caseEscalatedDateFrom AND caseEscalatedDateTo)
		AND (partsOrderedDateFrom IS NULL OR DATE(g.T_ORDER_CONFIRM) BETWEEN partsOrderedDateFrom AND partsOrderedDateTo)
		AND (partsShippedDateFrom IS NULL OR DATE(g.T_SHIPPED) BETWEEN partsShippedDateFrom AND partsShippedDateTo)
		AND (partsDeliveredDateFrom IS NULL OR DATE(g.T_DELIVERY) BETWEEN partsDeliveredDateFrom AND partsDeliveredDateTo)
	;
END
=======================================
CREATE DEFINER=`t12247adm`@`%` PROCEDURE `db_12247_d_001_instance_1`.`PROC_GET_RO_CLOSED_VEH`(
	IN `roCloseDateFrom` DATE,
	IN `roCloseDateTo` DATE,
	IN `pageOffset` INT,
	IN `pageSize` INT,
	IN `sortBy` VARCHAR(50),
	IN `sortOrder` VARCHAR(50)
)
    SQL SECURITY INVOKER
BEGIN

SET roCloseDateFrom = IF(roCloseDateFrom IS NULL, DATE(DATE_ADD(NOW(), INTERVAL -1 MONTH)), roCloseDateFrom);
SET roCloseDateTo = IF(roCloseDateTo IS NULL, DATE(NOW()), roCloseDateTo);

SET pageSize = IF(pageSize=0, 10,pageSize);

 	IF sortBy = '' THEN
		-- return current page records only without sort
		SELECT DISTINCT ro.I_RO_JOURNEY as roJourneyId,
			 ro.I_VIN AS vin,
			 ro.C_FAM AS model,
			 ro.I_MOD_YR AS year,
			 FLOOR(ro.Q_ODOMETER) AS odometer,
			 ro.N_DLR AS dealer,
			 ro.T_START_JOURNEY AS roDate,
			 ro.I_DAYS_DOWN AS noOfDaysDown,
			 ro.I_REPAIR_COUNT AS repairCount,
			 ro.I_CUM_DAYS AS cumDays,
			 ro.L_CURRENT_RO_STATUS AS `status`,
			 ro.I_FIRST_CHERWELL_CASEID AS starCaseId, 
			 ro.T_FIRST_CREATED_CHERWELL_CASEID AS caseOpenDate,
			 ro.I_DLR_PH_NMBR AS dealerContact,
			 ro.C_DLR AS dealerCode,
			 ro.C_FUEL_TYPE AS `fuelType`,
			 ro.C_ENGINE_SALES_CODE AS `engine`
		FROM RO_JOURNEY ro 
			LEFT JOIN GPOP_DATA g ON ro.I_RO_JOURNEY=g.I_RO_JOURNEY AND g.I_VIN=ro.I_VIN AND g.C_DLR=ro.C_DLR
			LEFT JOIN CHERWELL_CASE_PART3 c ON c.I_RO_JOURNEY=ro.I_RO_JOURNEY AND c.I_VIN=ro.I_VIN AND c.C_DLR=ro.C_DLR
		WHERE ro.T_END_JOURNEY IS NOT NULL 
			-- AND ro.T_END_JOURNEY >= DATE_ADD(NOW(), INTERVAL -3 MONTH)    
		   AND (DATE(ro.T_END_JOURNEY) BETWEEN roCloseDateFrom AND roCloseDateTo) 
		ORDER BY ro.T_START_JOURNEY DESC
		LIMIT pageOffset,pageSize;
	ELSE
		-- return current page records only with sort
		SELECT DISTINCT ro.I_RO_JOURNEY as roJourneyId,
			 ro.I_VIN AS vin,
			 ro.C_FAM AS model,
			 ro.I_MOD_YR AS year,
			 FLOOR(ro.Q_ODOMETER) AS odometer,
			 ro.N_DLR AS dealer,
			 ro.T_START_JOURNEY AS roDate,
			 ro.I_DAYS_DOWN AS noOfDaysDown,
			 ro.I_REPAIR_COUNT AS repairCount,
			 ro.I_CUM_DAYS AS cumDays,
			 ro.L_CURRENT_RO_STATUS AS `status`,
			 ro.I_FIRST_CHERWELL_CASEID AS starCaseId, 
			 ro.T_FIRST_CREATED_CHERWELL_CASEID AS caseOpenDate,
			 ro.I_DLR_PH_NMBR AS dealerContact,
			 ro.C_DLR AS dealerCode,
			 ro.C_FUEL_TYPE AS `fuelType`,
			 ro.C_ENGINE_SALES_CODE AS `engine`
		FROM RO_JOURNEY ro 
			LEFT JOIN GPOP_DATA g ON ro.I_RO_JOURNEY=g.I_RO_JOURNEY AND g.I_VIN=ro.I_VIN AND g.C_DLR=ro.C_DLR
			LEFT JOIN CHERWELL_CASE_PART3 c ON c.I_RO_JOURNEY=ro.I_RO_JOURNEY AND c.I_VIN=ro.I_VIN AND c.C_DLR=ro.C_DLR
		WHERE ro.T_END_JOURNEY IS NOT NULL 
			-- AND ro.T_END_JOURNEY >= DATE_ADD(NOW(), INTERVAL -3 MONTH)    
		   AND (DATE(ro.T_END_JOURNEY) BETWEEN roCloseDateFrom AND roCloseDateTo) 
		ORDER BY 
			CASE WHEN sortBy ='vin' AND sortOrder ='ASC' THEN ro.I_VIN END ASC,
			CASE WHEN sortBy ='vin' AND sortOrder ='DESC' THEN ro.I_VIN END DESC,
			CASE WHEN sortBy ='model' AND sortOrder ='ASC' THEN ro.C_FAM END ASC,
			CASE WHEN sortBy ='model' AND sortOrder ='DESC' THEN ro.C_FAM END DESC,
			CASE WHEN sortBy ='year' AND sortOrder ='ASC' THEN ro.I_MOD_YR END ASC,
			CASE WHEN sortBy ='year' AND sortOrder ='DESC' THEN ro.I_MOD_YR END DESC,
			CASE WHEN sortBy ='engine' AND sortOrder ='ASC' THEN ro.C_ENGINE_SALES_CODE END ASC,
			CASE WHEN sortBy ='engine' AND sortOrder ='DESC' THEN ro.C_ENGINE_SALES_CODE END DESC,
			CASE WHEN sortBy ='fuelType' AND sortOrder ='ASC' THEN ro.C_FUEL_TYPE END ASC,
			CASE WHEN sortBy ='fuelType' AND sortOrder ='DESC' THEN ro.C_FUEL_TYPE END DESC,
			CASE WHEN sortBy ='dealerCode' AND sortOrder ='ASC' THEN ro.C_DLR END ASC,
			CASE WHEN sortBy ='dealerCode' AND sortOrder ='DESC' THEN ro.C_DLR END DESC,
			CASE WHEN sortBy ='roJourneyId' AND sortOrder ='ASC' THEN ro.I_RO_JOURNEY END ASC,
			CASE WHEN sortBy ='roJourneyId' AND sortOrder ='DESC' THEN ro.I_RO_JOURNEY END DESC,
			CASE WHEN sortBy ='roDate' AND sortOrder ='ASC' THEN ro.T_START_JOURNEY END ASC,
			CASE WHEN sortBy ='roDate' AND sortOrder ='DESC' THEN ro.T_START_JOURNEY END DESC,
			CASE WHEN sortBy ='noOfDaysDown' AND sortOrder ='ASC' THEN ro.I_DAYS_DOWN END ASC,
			CASE WHEN sortBy ='noOfDaysDown' AND sortOrder ='DESC' THEN ro.I_DAYS_DOWN END DESC,
			CASE WHEN sortBy ='repairCount' AND sortOrder ='ASC' THEN ro.I_REPAIR_COUNT END ASC,
			CASE WHEN sortBy ='repairCount' AND sortOrder='DESC' THEN ro.I_REPAIR_COUNT END DESC,
			CASE WHEN sortBy ='odometer' AND sortOrder ='ASC' THEN CAST(ro.Q_ODOMETER AS DECIMAL) END ASC,
			CASE WHEN sortBy ='odometer' AND sortOrder ='DESC' THEN CAST(ro.Q_ODOMETER AS DECIMAL) END DESC,
			CASE WHEN sortBy ='cumDays' AND sortOrder ='ASC' THEN ro.I_CUM_DAYS END ASC,
			CASE WHEN sortBy ='cumDays' AND sortOrder ='DESC' THEN ro.I_CUM_DAYS END DESC,
			CASE WHEN sortBy ='starCaseId' AND sortOrder ='ASC' THEN ro.I_FIRST_CHERWELL_CASEID END ASC,
			CASE WHEN sortBy ='starCaseId' AND sortOrder ='DESC' THEN ro.I_FIRST_CHERWELL_CASEID END DESC,
			CASE WHEN sortBy ='caseOpenDate' AND sortOrder ='ASC' THEN ro.T_FIRST_CREATED_CHERWELL_CASEID END ASC,
			CASE WHEN sortBy ='caseOpenDate' AND sortOrder ='DESC' THEN ro.T_FIRST_CREATED_CHERWELL_CASEID END DESC,
			CASE WHEN sortBy ='status' AND sortOrder ='ASC' THEN ro.L_CURRENT_RO_STATUS END ASC,
			CASE WHEN sortBy ='status' AND sortOrder ='DESC' THEN ro.L_CURRENT_RO_STATUS END DESC
		LIMIT pageOffset,pageSize;
	END IF;
	
	-- return total number of records
	SELECT COUNT(DISTINCT ro.I_VIN) AS Total
	FROM RO_JOURNEY ro 
		LEFT JOIN GPOP_DATA g ON ro.I_RO_JOURNEY=g.I_RO_JOURNEY AND g.I_VIN=ro.I_VIN AND g.C_DLR=ro.C_DLR
		LEFT JOIN CHERWELL_CASE_PART3 c ON c.I_RO_JOURNEY=ro.I_RO_JOURNEY AND c.I_VIN=ro.I_VIN AND c.C_DLR=ro.C_DLR
		WHERE ro.T_END_JOURNEY IS NOT NULL 
			-- AND ro.T_END_JOURNEY >= DATE_ADD(NOW(), INTERVAL -3 MONTH)    
		   AND (DATE(ro.T_END_JOURNEY) BETWEEN roCloseDateFrom AND roCloseDateTo) 
		ORDER BY ro.T_START_JOURNEY DESC;
END
===================
CREATE DEFINER=`t12247adm`@`%` PROCEDURE `db_12247_d_001_instance_1`.`PROC_GET_RO_INFO_MISSING_VEH`(
	IN `businessCenter` VARCHAR(50),
	IN `dealerCode` VARCHAR(50),
	IN `year` VARCHAR(10),
	IN `model` VARCHAR(50),
	IN `engine` VARCHAR(50),
	IN `roOpenDateFrom` DATE,
	IN `roOpenDateTo` DATE,
	IN `caseOpenDateFrom` DATE,
	IN `caseOpenDateTo` DATE,
	IN `caseCloseDateFrom` DATE,
	IN `caseCloseDateTo` DATE,
	IN `status` VARCHAR(50),
	IN `salesCode` VARCHAR(3),
	IN `fuelType` VARCHAR(50),
	IN `cumDays` VARCHAR(10),
	IN `daysDown` VARCHAR(10),
	IN `repairCount` VARCHAR(10),
	IN `odometer` VARCHAR(50),
	IN `witech` VARCHAR(5),
	IN `wiadvisor` VARCHAR(5),
	IN `pageOffset` INT,
	IN `pageSize` INT,
	IN `sortBy` VARCHAR(50),
	IN `sortOrder` VARCHAR(50)
)
    SQL SECURITY INVOKER
BEGIN

	SET pageSize = IF(pageSize=0, 10,pageSize);
	
IF sortBy = '' THEN  
    -- return current page records only
	SELECT ro.I_RO_JOURNEY as roJourneyId,
			 ro.I_VIN AS vin,
			 ro.C_FAM AS model,
			 ro.I_MOD_YR AS year,
			 ro.Q_ODOMETER AS odometer,
			 ro.N_DLR AS dealer,
			 DATE_FORMAT(ro.T_START_JOURNEY, '%m/%d/%y') AS roDate,
			 ro.I_DAYS_DOWN AS noOfDaysDown,
			 ro.I_REPAIR_COUNT AS repairCount,
			 ro.I_CUM_DAYS AS cumDays,
			 L_CURRENT_RO_STATUS AS `status`,
			 ro.I_FIRST_CHERWELL_CASEID AS starCaseId, 
			 DATE_FORMAT(ro.T_FIRST_CREATED_CHERWELL_CASEID, '%m/%d/%y') AS caseOpenDate,
			 ro.I_DLR_PH_NMBR AS dealerContact,
			 ro.C_DLR AS dealerCode,
			 ro.C_FUEL_TYPE AS `fuelType`,
			 ro.C_ENGINE_SALES_CODE AS `engine`
	FROM RO_JOURNEY_OPEN ro
	#LEFT JOIN CHERWELL_CASE_PART1 c ON c.I_RO_JOURNEY=ro.I_RO_JOURNEY
	WHERE (ro.I_RO IS NULL OR ro.I_RO = '') AND DATE(ro.T_START_JOURNEY) < DATE(NOW())
		AND ro.C_DLR != 99970
		AND  ro.C_DLR_BUSINESS = 'I' 
		AND	(`year` = '' OR ro.I_MOD_YR = `year`) 
		AND	(model = '' OR ro.C_FAM = model)
		AND	(`engine` = '' OR ro.C_ENGINE_SALES_CODE = `engine`)
		AND 	(`status` = '' OR ro.L_CURRENT_RO_STATUS = `status`) 
		AND	(salesCode = '' OR ro.C_TRANSM = salesCode) 
		AND	(`fuelType` = '' OR IFNULL(ro.C_FUEL_TYPE,'') = `fuelType`)
		AND 	(businessCenter = '' OR ro.N_BUSINESS_CENTER = businessCenter) 
		AND	(dealerCode = '' OR ro.C_DLR = dealerCode) 
		AND 	(roOpenDateFrom IS NULL OR DATE(ro.T_START_JOURNEY) BETWEEN roOpenDateFrom AND roOpenDateTo) 
		AND (caseOpenDateFrom IS NULL OR DATE(ro.T_FIRST_CREATED_CHERWELL_CASEID) BETWEEN caseOpenDateFrom AND caseOpenDateTo) 
		AND (caseCloseDateFrom IS NULL OR DATE(ro.T_LAST_CLOSE_CHERWELL_CASEID) BETWEEN caseCloseDateFrom AND caseCloseDateTo)
		AND (odometer = '' OR (CASE WHEN odometer = '-50' THEN (ro.Q_ODOMETER < 50) WHEN odometer = '+50' THEN (ro.Q_ODOMETER > 50) END))
		AND (witech = '' OR (CASE WHEN witech = 'true' THEN ro.T_WITECH_SCAN_EARLIEST IS NOT NULL WHEN witech = 'false' THEN ro.T_WITECH_SCAN_EARLIEST IS NULL END))	
	 	AND (wiadvisor = '' OR (CASE WHEN wiadvisor = 'true' THEN ro.T_WIADVISOR_SCAN IS NOT NULL WHEN wiadvisor = 'false' THEN ro.T_WIADVISOR_SCAN IS NULL END))	
	ORDER BY ro.T_START_JOURNEY DESC
	LIMIT pageOffset,pageSize;
ELSE

	SELECT ro.I_RO_JOURNEY as roJourneyId,
			 ro.I_VIN AS vin,
			 ro.C_FAM AS model,
			 ro.I_MOD_YR AS year,
			 ro.Q_ODOMETER AS odometer,
			 ro.N_DLR AS dealer,
			 DATE_FORMAT(ro.T_START_JOURNEY, '%m/%d/%y') AS roDate,
			 ro.I_DAYS_DOWN AS noOfDaysDown,
			 ro.I_REPAIR_COUNT AS repairCount,
			 ro.I_CUM_DAYS AS cumDays,
			 L_CURRENT_RO_STATUS AS `status`,
			 ro.I_FIRST_CHERWELL_CASEID AS starCaseId, 
			 DATE_FORMAT(ro.T_FIRST_CREATED_CHERWELL_CASEID, '%m/%d/%y') AS caseOpenDate,
			 ro.I_DLR_PH_NMBR AS dealerContact,
			 ro.C_DLR AS dealerCode,
			 ro.C_FUEL_TYPE AS `fuelType`,
			 ro.C_ENGINE_SALES_CODE AS `engine`
	FROM RO_JOURNEY_OPEN ro
	#LEFT JOIN CHERWELL_CASE_PART1 c ON c.I_RO_JOURNEY=ro.I_RO_JOURNEY
	WHERE (ro.I_RO IS NULL OR ro.I_RO = '') AND DATE(ro.T_START_JOURNEY) < DATE(NOW())
		AND ro.C_DLR != 99970
		AND  ro.C_DLR_BUSINESS = 'I' 
		AND	(`year` = '' OR ro.I_MOD_YR = `year`) 
		AND	(model = '' OR ro.C_FAM = model)
		AND	(`engine` = '' OR ro.C_ENGINE_SALES_CODE = `engine`)
		AND 	(`status` = '' OR ro.L_CURRENT_RO_STATUS = `status`) 
		AND	(salesCode = '' OR ro.C_TRANSM = salesCode) 
		AND	(`fuelType` = '' OR IFNULL(ro.C_FUEL_TYPE,'') = `fuelType`)
		AND 	(businessCenter = '' OR ro.N_BUSINESS_CENTER = businessCenter) 
		AND	(dealerCode = '' OR ro.C_DLR = dealerCode) 
		AND 	(roOpenDateFrom IS NULL OR DATE(ro.T_START_JOURNEY) BETWEEN roOpenDateFrom AND roOpenDateTo) 
		AND (caseOpenDateFrom IS NULL OR DATE(ro.T_FIRST_CREATED_CHERWELL_CASEID) BETWEEN caseOpenDateFrom AND caseOpenDateTo) 
		AND (caseCloseDateFrom IS NULL OR DATE(ro.T_LAST_CLOSE_CHERWELL_CASEID) BETWEEN caseCloseDateFrom AND caseCloseDateTo)
		AND (odometer = '' OR (CASE WHEN odometer = '-50' THEN (ro.Q_ODOMETER < 50) WHEN odometer = '+50' THEN (ro.Q_ODOMETER > 50) END))
		AND (witech = '' OR (CASE WHEN witech = 'true' THEN ro.T_WITECH_SCAN_EARLIEST IS NOT NULL WHEN witech = 'false' THEN ro.T_WITECH_SCAN_EARLIEST IS NULL END))	
	 	AND (wiadvisor = '' OR (CASE WHEN wiadvisor = 'true' THEN ro.T_WIADVISOR_SCAN IS NOT NULL WHEN wiadvisor = 'false' THEN ro.T_WIADVISOR_SCAN IS NULL END))	
	ORDER BY 
		  CASE WHEN sortBy ='vin' AND sortOrder ='ASC' THEN ro.I_VIN END ASC,
        CASE WHEN sortBy ='vin' AND sortOrder ='DESC' THEN ro.I_VIN END DESC,
        CASE WHEN sortBy ='model' AND sortOrder ='ASC' THEN ro.C_FAM END ASC,
        CASE WHEN sortBy ='model' AND sortOrder ='DESC' THEN ro.C_FAM END DESC,
        CASE WHEN sortBy ='year' AND sortOrder ='ASC' THEN ro.I_MOD_YR END ASC,
        CASE WHEN sortBy ='year' AND sortOrder ='DESC' THEN ro.I_MOD_YR END DESC,
        CASE WHEN sortBy ='engine' AND sortOrder ='ASC' THEN ro.C_ENGINE_SALES_CODE END ASC,
        CASE WHEN sortBy ='engine' AND sortOrder ='DESC' THEN ro.C_ENGINE_SALES_CODE END DESC,
        CASE WHEN sortBy ='fuelType' AND sortOrder ='ASC' THEN ro.C_FUEL_TYPE END ASC,
        CASE WHEN sortBy ='fuelType' AND sortOrder ='DESC' THEN ro.C_FUEL_TYPE END DESC,
        CASE WHEN sortBy ='dealerCode' AND sortOrder ='ASC' THEN ro.C_DLR END ASC,
        CASE WHEN sortBy ='dealerCode' AND sortOrder ='DESC' THEN ro.C_DLR END DESC,
        CASE WHEN sortBy ='roJourneyId' AND sortOrder ='ASC' THEN ro.I_RO_JOURNEY END ASC,
        CASE WHEN sortBy ='roJourneyId' AND sortOrder ='DESC' THEN ro.I_RO_JOURNEY END DESC,
        CASE WHEN sortBy ='roDate' AND sortOrder ='ASC' THEN ro.T_START_JOURNEY END ASC,
        CASE WHEN sortBy ='roDate' AND sortOrder ='DESC' THEN ro.T_START_JOURNEY END DESC,
	     CASE WHEN sortBy ='noOfDaysDown' AND sortOrder ='ASC' THEN ro.I_DAYS_DOWN END ASC,
        CASE WHEN sortBy ='noOfDaysDown' AND sortOrder ='DESC' THEN ro.I_DAYS_DOWN END DESC,
        CASE WHEN sortBy ='repairCount' AND sortOrder ='ASC' THEN ro.I_REPAIR_COUNT END ASC,
        CASE WHEN sortBy ='repairCount' AND sortOrder='DESC' THEN ro.I_REPAIR_COUNT END DESC,
        CASE WHEN sortBy ='cumDays' AND sortOrder ='ASC' THEN ro.I_CUM_DAYS END ASC,
        CASE WHEN sortBy ='cumDays' AND sortOrder ='DESC' THEN ro.I_CUM_DAYS END DESC,
        CASE WHEN sortBy ='starCaseId' AND sortOrder ='ASC' THEN ro.I_FIRST_CHERWELL_CASEID END ASC,
        CASE WHEN sortBy ='starCaseId' AND sortOrder ='DESC' THEN ro.I_FIRST_CHERWELL_CASEID END DESC,
        CASE WHEN sortBy ='caseOpenDate' AND sortOrder ='ASC' THEN ro.T_FIRST_CREATED_CHERWELL_CASEID END ASC,
        CASE WHEN sortBy ='caseOpenDate' AND sortOrder ='DESC' THEN ro.T_FIRST_CREATED_CHERWELL_CASEID END DESC,
        CASE WHEN sortBy ='status' AND sortOrder ='ASC' THEN ro.L_CURRENT_RO_STATUS END ASC,
        CASE WHEN sortBy ='status' AND sortOrder ='DESC' THEN ro.L_CURRENT_RO_STATUS END DESC
	LIMIT pageOffset,pageSize;
	
	
END IF;
	
	-- return total number of records
	SELECT  COUNT(1) AS Total
	FROM RO_JOURNEY_OPEN ro
	#LEFT JOIN CHERWELL_CASE_PART1 c ON c.I_RO_JOURNEY=ro.I_RO_JOURNEY
	WHERE (ro.I_RO IS NULL OR ro.I_RO = '') AND DATE(ro.T_START_JOURNEY) < DATE(NOW())
	AND ro.C_DLR != 99970
	AND  ro.C_DLR_BUSINESS = 'I' 
	AND	(`year` = '' OR ro.I_MOD_YR = `year`) 
	AND	(model = '' OR ro.C_FAM = model)
	AND	(`engine` = '' OR ro.C_ENGINE_SALES_CODE = `engine`)
	AND (`status` = '' OR ro.L_CURRENT_RO_STATUS = `status`) 
	AND	(salesCode = '' OR ro.C_TRANSM = salesCode) 
	AND	(`fuelType` = '' OR IFNULL(ro.C_FUEL_TYPE,'') = `fuelType`)
	AND (businessCenter = '' OR ro.N_BUSINESS_CENTER = businessCenter) 
	AND	(dealerCode = '' OR ro.C_DLR = dealerCode) 
	AND (roOpenDateFrom IS NULL OR DATE(ro.T_START_JOURNEY) BETWEEN roOpenDateFrom AND roOpenDateTo) 
	AND (caseOpenDateFrom IS NULL OR DATE(ro.T_FIRST_CREATED_CHERWELL_CASEID) BETWEEN caseOpenDateFrom AND caseOpenDateTo) 
	AND (caseCloseDateFrom IS NULL OR DATE(ro.T_LAST_CLOSE_CHERWELL_CASEID) BETWEEN caseCloseDateFrom AND caseCloseDateTo)
	AND (odometer = '' OR (CASE WHEN odometer = '-50' THEN (ro.Q_ODOMETER < 50) WHEN odometer = '+50' THEN (ro.Q_ODOMETER > 50) END))
	AND (witech = '' OR (CASE WHEN witech = 'true' THEN ro.T_WITECH_SCAN_EARLIEST IS NOT NULL WHEN witech = 'false' THEN ro.T_WITECH_SCAN_EARLIEST IS NULL END))	
	AND (wiadvisor = '' OR (CASE WHEN wiadvisor = 'true' THEN ro.T_WIADVISOR_SCAN IS NOT NULL WHEN wiadvisor = 'false' THEN ro.T_WIADVISOR_SCAN IS NULL END))	
	;
END
======================
CREATE DEFINER=`t12247adm`@`%` PROCEDURE `db_12247_d_001_instance_1`.`PROC_GET_RO_JOURNEY_COMMENTS`(
	IN `RO_JOURNEY_ID` bigint
)
    SQL SECURITY INVOKER
BEGIN
	
	SELECT 
	I_RO_JOURNEY AS roJourneyID,
	I_COMMENT_ID AS commentID,
	X_COMMENT AS value,
	X_COMMENT_TYPE AS type,
	I_ADDED_BY_ID AS addedById,
	X_ADDED_BY_NAME AS addedByName,
	I_REPLY_TO_COMMENT_ID AS replayCommentId,
	T_STMP_ADD  AS date	
	FROM RO_JOURNEY_COMMENT 
	WHERE I_RO_JOURNEY = RO_JOURNEY_ID AND X_COMMENT IS NOT NULL AND IS_ACTIVE = 1
	ORDER BY T_STMP_ADD ASC;

END
======================================
CREATE DEFINER=`t12247adm`@`%` PROCEDURE `db_12247_d_001_instance_1`.`PROC_GET_RO_JOURNEY_DETAILS`(
	IN `RO_JOURNEY_ID` bigint
)
    SQL SECURITY INVOKER
BEGIN
-- 	DECLARE N INT; 
  -- RO Journey Details
    SELECT  
    I_RO_JOURNEY AS roJourneyId, C_DLR AS dealerCode, Q_ODOMETER AS odometerReading,
    I_RO AS roNumber, T_START_JOURNEY AS journeyStartDate, T_END_JOURNEY AS journeyEndDate,
    C_ISSUE AS customerIssued, T_WITECH_SCAN_EARLIEST AS witechEarliestScan, I_MOD_YR AS modelYear,
    C_FAM AS familyCode, scm.SALES_CODE_DESC AS engineDescription, L_REPEAT_REPAIR_DLR AS repeatRepair,
    X_UNDER_WARRANTY AS underWarrenty, ro.N_SRCE_ADD AS sourceAdded, ro.N_SRCE_UPDATE AS sourceUpdated,
    CASE
      WHEN ro.T_END_JOURNEY IS NULL then 'Y'
    ELSE 'N' 
    END AS activeStatus,
    CASE
		  WHEN ro.T_END_JOURNEY IS NOT NULL then timestampdiff(DAY, T_WITECH_SCAN_EARLIEST, T_END_JOURNEY)
	ELSE timestampdiff(DAY, T_WITECH_SCAN_EARLIEST, CURRENT_TIMESTAMP()) 
	END AS totalDownTime,
	ro.I_DAYS_DOWN AS daysDown,
	ro.I_REPAIR_COUNT AS repairCount,
	ro.I_CUM_DAYS AS cumDays,
	ro.T_WIADVISOR_SCAN AS wiAdvisorScan
    FROM RO_JOURNEY ro
    LEFT JOIN SALES_CODE_MASTER scm ON ro.C_ENGINE_SALES_CODE = scm.SALES_CODE AND ro.I_MOD_YR=scm.MODEL_YEAR
    where ro.I_RO_JOURNEY = RO_JOURNEY_ID;
    
   -- RO Narration QNA_DATA
	SELECT 'Customer Concern QnA' AS name, qa.X_NARR_TXT AS value, qa.D_UPD_RO AS date
	FROM QNA_DATA qa WHERE
	qa.I_RO_JOURNEY = RO_JOURNEY_ID AND qa.X_NARR_TXT IS NOT NULL ;
    
     -- wiADVISOR comments 
   SELECT 'Customer Concern wiADVISOR' AS name, wa.X_COMMENT AS value, 
	wa.T_SESSION AS date FROM wiADVISOR_SELECTED_SERVICE wa
	WHERE wa.I_RO_JOURNEY = RO_JOURNEY_ID AND wa.X_COMMENT IS NOT NULL;
	 
  -- RO JOURNEY MILESTONE CALCULATION 
    
SELECT 
		 
		 
-- (Written Up)    -- Waiting for Dispatch to Technician DAYS
		CASE WHEN ro.T_WITECH_SCAN_EARLIEST IS NULL AND ro.T_WIADVISOR_SCAN IS NULL THEN
					"NA"
		WHEN ro.T_WITECH_SCAN_EARLIEST IS NULL AND ro.T_START_JOURNEY IS NULL THEN
					"NA"
		WHEN ro.T_WIADVISOR_SCAN IS NOT NULL AND ro.T_WITECH_SCAN_EARLIEST IS NOT NULL AND DATE(ro.T_WIADVISOR_SCAN) > DATE(ro.T_WITECH_SCAN_EARLIEST)   THEN 
					"NA"
		WHEN ro.T_WIADVISOR_SCAN IS NULL AND ro.T_WITECH_SCAN_EARLIEST IS NOT NULL AND ro.T_START_JOURNEY IS NOT NULL AND DATE(ro.T_START_JOURNEY) > DATE(ro.T_WITECH_SCAN_EARLIEST)   THEN 
					"NA"
		WHEN ro.N_SRCE_ADD = "wiADVISOR" AND ro.T_WIADVISOR_SCAN IS NOT NULL AND ro.T_WITECH_SCAN_EARLIEST IS NOT NULL THEN
					DATEDIFF(ro.T_WITECH_SCAN_EARLIEST,ro.T_START_JOURNEY)
		WHEN ro.T_WIADVISOR_SCAN IS NOT NULL AND ro.T_WITECH_SCAN_EARLIEST IS NOT NULL THEN
					DATEDIFF(ro.T_WITECH_SCAN_EARLIEST,ro.T_WIADVISOR_SCAN)
		WHEN ro.N_SRCE_ADD = "QNA" AND ro.T_WIADVISOR_SCAN IS NULL AND ro.T_START_JOURNEY IS NOT NULL AND ro.T_WITECH_SCAN_EARLIEST IS NOT NULL THEN 
			DATEDIFF(ro.T_WITECH_SCAN_EARLIEST,ro.T_START_JOURNEY)
		ELSE "NA"	
			END AS `WAITING_FOR_DISPATCH_TO_TECHNICIAN_DAYS`,
			
-- (Written Up)    -- Waiting for Dispatch to Technician DATE 	
		CASE WHEN ro.N_SRCE_ADD = "wiADVISOR" AND ro.T_WIADVISOR_SCAN IS NOT NULL THEN
				ro.T_START_JOURNEY
			WHEN ro.T_WIADVISOR_SCAN IS NOT NULL THEN
					ro.T_WIADVISOR_SCAN
			WHEN  ro.T_WIADVISOR_SCAN IS NULL AND ro.T_START_JOURNEY IS NOT NULL THEN 
				ro.T_START_JOURNEY
			END AS "WAITING_FOR_DISPATCH_TO_TECHNICIAN_DATE",

-- (Diagnosis)     -- Time taken to Diagnose DAYS		
	CASE WHEN ro.T_WIADVISOR_SCAN IS NULL AND  MAX(NULLIF (cs1.CREATEDDATETIME, 0)) IS NULL AND ro.T_WITECH_SCAN_EARLIEST IS NULL THEN 
				"NA"
		 WHEN  ro.T_WITECH_SCAN_EARLIEST IS NOT NULL AND MAX(NULLIF (cs1.CREATEDDATETIME, 0)) IS NOT NULL AND  DATE(ro.T_WITECH_SCAN_EARLIEST) > DATE(MAX(NULLIF (cs1.CREATEDDATETIME, 0))) THEN 
		 		"NA"
		  WHEN  ro.T_WITECH_SCAN_EARLIEST IS NULL AND MAX(NULLIF (cs1.CREATEDDATETIME, 0)) IS NOT NULL AND ro.T_WIADVISOR_SCAN IS NOT NULL AND DATE(ro.T_WIADVISOR_SCAN) > DATE(MAX(NULLIF (cs1.CREATEDDATETIME, 0))) THEN 
		 		"NA"
		 WHEN ro.T_WITECH_SCAN_EARLIEST IS NOT NULL AND  MAX(NULLIF (cs1.CREATEDDATETIME, 0)) IS NOT NULL THEN 
			DATEDIFF(MAX(NULLIF (cs1.CREATEDDATETIME, 0)),ro.T_WITECH_SCAN_EARLIEST)
		 WHEN ro.T_WITECH_SCAN_EARLIEST IS NULL AND  ro.T_FIRST_CREATED_CHERWELL_CASEID IS NOT NULL AND ro.T_WIADVISOR_SCAN IS NOT NULL THEN 
			DATEDIFF(MAX(NULLIF (cs1.CREATEDDATETIME, 0)),ro.T_WIADVISOR_SCAN)
		 ELSE "NA"	
			END AS `TIME_TAKEN_TO_DIAGNOSE_DAYES`,
-- (Diagnosis)     -- Time taken to Diagnose DATE
CASE WHEN ro.T_WITECH_SCAN_EARLIEST IS NOT NULL AND ro.T_WIADVISOR_SCAN IS NULL THEN		
			ro.T_WITECH_SCAN_EARLIEST
	WHEN ro.T_WITECH_SCAN_EARLIEST IS NULL AND ro.T_WIADVISOR_SCAN IS NOT NULL	THEN	
			ro.T_WIADVISOR_SCAN
	WHEN ro.T_WITECH_SCAN_EARLIEST IS NOT NULL AND ro.T_WIADVISOR_SCAN IS NOT NULL	THEN	
			ro.T_WITECH_SCAN_EARLIEST
			END AS `TIME_TAKEN_TO_DIAGNOSE_DATE`,		
			
			
-- (Escalated) 	-- Time taken to escalate to engineering DAYS
	CASE WHEN MAX(NULLIF (cs1.CREATEDDATETIME, 0)) IS NULL AND  cs.LASTESCALATEDDATETIME IS NULL THEN 
			"NA"
		WHEN DATE(MAX(NULLIF (cs1.CREATEDDATETIME, 0))) > DATE(cs.LASTESCALATEDDATETIME)  THEN 
			"NA"
		WHEN cs.ESCALATETOENGINEERING = 1 AND MAX(NULLIF (cs1.CREATEDDATETIME, 0)) IS NOT NULL AND  cs.LASTESCALATEDDATETIME IS NOT NULL THEN 
			DATEDIFF(cs.LASTESCALATEDDATETIME,MAX(NULLIF (cs1.CREATEDDATETIME, 0)))
		ELSE "NA"	
		END AS "TIME_TAKEN_TO_ESCALATE_TO_ENGINEERING_DAYS",
-- (Escalated) 	-- Time taken to escalate to engineering DATE
	 	MAX(cs1.CREATEDDATETIME) AS "TIME_TAKEN_TO_ESCALATE_TO_ENGINEERING_DATE",
	
-- (Part Ordered)  -- Time taken for order approval 	
	CASE WHEN cs.ESCALATETOENGINEERING = 1 AND MAX(NULLIF (gp.T_ORDER_CONFIRM,0)) IS NULL AND cs.LASTESCALATEDDATETIME IS NULL THEN
				"NA"
		 WHEN cs.ESCALATETOENGINEERING = 1 AND DATE(cs.LASTESCALATEDDATETIME) > DATE(MAX(NULLIF (gp.T_ORDER_CONFIRM,0))) THEN
				"NA"
		WHEN cs.ESCALATETOENGINEERING = 1 AND MAX(NULLIF (gp.T_ORDER_CONFIRM,0)) IS NOT NULL AND cs.LASTESCALATEDDATETIME IS NOT NULL  THEN 
			DATEDIFF(MAX(NULLIF (gp.T_ORDER_CONFIRM,0)),cs.LASTESCALATEDDATETIME)
		WHEN  MAX(NULLIF (gp.T_ORDER_CONFIRM,0)) IS NOT NULL AND MAX(NULLIF (cs1.CREATEDDATETIME, 0)) IS NOT NULL  THEN 
			DATEDIFF(MAX(NULLIF (gp.T_ORDER_CONFIRM,0)),MAX(NULLIF (cs1.CREATEDDATETIME, 0)))
		ELSE "NA"	
		END AS "TIME_TAKEN_FOR_ORDER_APPROVAL_DAYS",
-- (Part Ordered)  -- Time taken for order approval DATE 	
			CASE WHEN cs.ESCALATETOENGINEERING = 1 AND cs.LASTESCALATEDDATETIME IS NOT NULL THEN
					cs.LASTESCALATEDDATETIME
			WHEN  MAX(NULLIF (cs1.CREATEDDATETIME, 0)) IS NOT NULL THEN 
				MAX(cs1.CREATEDDATETIME)		
	 		END AS "TIME_TAKEN_FOR_ORDER_APPROVAL_DATE",
	
-- (Part Shipped ) -- Time taken to ship part DAYS	
	CASE WHEN MAX(NULLIF (gp.T_ORDER_CONFIRM,0)) IS NULL AND MAX(NULLIF(gp.T_SHIPPED,0)) IS NULL THEN
			"NA"
		WHEN MAX(NULLIF (gp.T_ORDER_CONFIRM,0)) >  MAX(NULLIF(gp.T_SHIPPED,0)) THEN
			"NA"
-- 		WHEN MAX(NULLIF (gp.T_ORDER_CONFIRM,0)) < ro.T_START_JOURNEY THEN
-- 			"NA"
		WHEN MAX(NULLIF (gp.T_ORDER_CONFIRM,0)) IS NOT NULL AND MAX(NULLIF(gp.T_SHIPPED,0)) IS NOT NULL THEN
	   	  DATEDIFF(MAX(NULLIF (gp.T_SHIPPED,0)),MAX(NULLIF (gp.T_ORDER_CONFIRM,0)))
	   	ELSE "NA"  
	      END AS "TIME_TAKEN_TO_SHIP_PART_DAYS",
-- (Part Shipped ) -- Time taken to ship part DATE		      
	 	 MAX(gp.T_ORDER_CONFIRM) AS "TIME_TAKEN_TO_SHIP_PART_DATE",

-- (Part Delivered) -- Time taken for part delivery	DAYS 	 	
		CASE WHEN MAX(NULLIF (gp.T_SHIPPED,0)) IS NULL AND MAX(NULLIF(gp.T_DELIVERY,0)) IS NULL THEN
			"NA"
		WHEN MAX(NULLIF (gp.T_SHIPPED,0)) >  MAX(NULLIF(gp.T_DELIVERY,0)) THEN
			"NA"
-- 		WHEN MAX(NULLIF (gp.T_SHIPPED,0)) < ro.T_START_JOURNEY THEN
-- 			"NA"
		WHEN MAX(NULLIF (gp.T_SHIPPED,0)) IS NOT NULL AND MAX(NULLIF(gp.T_DELIVERY,0)) IS NOT NULL THEN
	   	   DATEDIFF(MAX(NULLIF (gp.T_DELIVERY,0)),MAX(NULLIF (gp.T_SHIPPED,0)))
	   	 ELSE "NA" 
	      END AS "TIME_TAKEN_FOR_PART_DELIVERY_DAYS",
-- (Part Delivered) -- Time taken for part delivery	DATE 	      
	 	  MAX(gp.T_SHIPPED) AS "TIME_TAKEN_FOR_PART_DELIVERY_DATE",
	
-- (Under Repair)  -- Time taken for part delivery 	DAYS 	 	
	CASE WHEN MAX(NULLIF (gp.T_DELIVERY,0)) IS NULL AND ro.T_END_JOURNEY IS NULL THEN
			"NA"
		WHEN MAX(NULLIF (gp.T_DELIVERY,0)) >  ro.T_END_JOURNEY THEN
			"NA"
-- 		WHEN MAX(NULLIF (gp.T_DELIVERY,0)) < ro.T_START_JOURNEY  THEN
-- 			"NA"
		
		WHEN MAX(NULLIF (gp.T_DELIVERY,0)) IS NOT NULL AND ro.T_END_JOURNEY IS  NULL THEN 
	       DATEDIFF(NOW(),MAX(NULLIF (gp.T_DELIVERY,0)))
	     ELSE "NA"  
	     END AS "TIME_TAKEN_FOR_PART_REPAIR_DAYS",  
-- (Under Repair)  -- Time taken for part delivery 	DATE
	MAX(gp.T_DELIVERY) AS "TIME_TAKEN_FOR_PART_REPAIR_DATE",

-- (Completed)    -- Time taken to complete the RO Journey DAYS	 
CASE WHEN ro.T_START_JOURNEY IS NULL AND ro.T_END_JOURNEY IS NULL THEN 
		"NA"
	 WHEN ro.T_START_JOURNEY > ro.T_END_JOURNEY THEN
	 	"NA"
	 WHEN ro.T_START_JOURNEY IS NOT NULL AND ro.T_END_JOURNEY IS NOT NULL THEN 
			 DATEDIFF(ro.T_END_JOURNEY,ro.T_START_JOURNEY)
		ELSE "NA"	
		END AS "TIME_TAKEN_TO_COMPLETE_THE_RO_JOURNEY_DAYS",
		
-- (Completed)    -- Time taken to complete the RO Journey DATE	
IF(ro.T_END_JOURNEY ,ro.T_END_JOURNEY,NOW()) AS "TIME_TAKEN_TO_COMPLETE_THE_RO_JOURNEY_DATE",
-- 		 ro.T_END_JOURNEY  AS "TIME_TAKEN_TO_COMPLETE_THE_RO_JOURNEY_DATE",
		 
		 ro.T_START_JOURNEY  AS "RO_JOURNEY_START_DATE"
	

		 
	FROM RO_JOURNEY ro 

	LEFT JOIN GPOP_DATA gp ON gp.I_RO_JOURNEY = ro.I_RO_JOURNEY
-- 	-- Dlr code , vin 
	LEFT JOIN CHERWELL_CASE_PART3 cs ON  cs.I_RO_JOURNEY = ro.I_RO_JOURNEY AND cs.LASTESCALATEDDATETIME !="1899-12-30 00:00:00" AND cs.ESCALATETOENGINEERING = 1
	LEFT JOIN CHERWELL_CASE_PART1 cs1 ON  IF(cs.ESCALATETOENGINEERING = 1,cs.RECID=cs1.RECID,cs1.I_RO_JOURNEY=ro.I_RO_JOURNEY)
 	WHERE ro.I_RO_JOURNEY = RO_JOURNEY_ID;
END
====================================
CREATE DEFINER=`t12247adm`@`%` PROCEDURE `db_12247_d_001_instance_1`.`PROC_GET_STAR_CASE_OPEN_VEH`(
	IN `businessCenter` VARCHAR(500),
	IN `dealerCode` VARCHAR(500),
	IN `year` VARCHAR(500),
	IN `model` VARCHAR(500),
	IN `engine` VARCHAR(500),
	IN `roOpenDateFrom` DATE,
	IN `roOpenDateTo` DATE,
	IN `caseOpenDateFrom` DATE,
	IN `caseOpenDateTo` DATE,
	IN `caseCloseDateFrom` DATE,
	IN `caseCloseDateTo` DATE,
	IN `status` VARCHAR(50),
	IN `salesCode` VARCHAR(3),
	IN `fuelType` VARCHAR(50),
	IN `cumDays` VARCHAR(10),
	IN `daysDown` VARCHAR(10),
	IN `repairCount` VARCHAR(10),
	IN `odometer` VARCHAR(50),
	IN `witech` VARCHAR(5),
	IN `wiadvisor` VARCHAR(5),
	IN `roNumber` VARCHAR(5),
	IN `forceClose` VARCHAR(5),
	IN `caseEscalatedDateFrom` DATE,
	IN `caseEscalatedDateTo` DATE,
	IN `partsOrderedDateFrom` DATE,
	IN `partsOrderedDateTo` DATE,
	IN `partsShippedDateFrom` DATE,
	IN `partsShippedDateTo` DATE,
	IN `partsDeliveredDateFrom` DATE,
	IN `partsDeliveredDateTo` DATE,
	IN `pageOffset` INT,
	IN `pageSize` INT,
	IN `sortBy` VARCHAR(50),
	IN `sortOrder` VARCHAR(50)
)
    SQL SECURITY INVOKER
BEGIN

DECLARE dayDownRangeStart INT;
DECLARE dayDownRangeEnd INT;
DECLARE cumDaysRangeStart INT;
DECLARE cumDaysRangeEnd INT;
DECLARE repairCountRangeStart INT;
DECLARE repairCountRangeEnd INT;


SET dayDownRangeStart = SUBSTRING_INDEX(daysDown, '-', 1);
SET dayDownRangeEnd = SUBSTRING_INDEX(daysDown,'-',-1);

SET cumDaysRangeStart = SUBSTRING_INDEX(cumDays,'-',1);
SET cumDaysRangeEnd = SUBSTRING_INDEX(cumDays,'-',-1);

SET repairCountRangeStart = SUBSTRING_INDEX(repairCount,'-',1);
SET repairCountRangeEnd = SUBSTRING_INDEX(repairCount,'-',-1);

SET pageSize = IF(pageSize=0, 10,pageSize);

IF sortBy = '' THEN
    -- return current page records only
	SELECT DISTINCT ro.I_RO_JOURNEY as roJourneyId,
			 ro.I_VIN AS vin,
			 ro.C_FAM AS model,
			 ro.I_MOD_YR AS year,
			 FLOOR(ro.Q_ODOMETER) AS odometer,
			 ro.N_DLR AS dealer,
			 ro.T_START_JOURNEY AS roDate,
			 ro.I_DAYS_DOWN AS noOfDaysDown,
			 ro.I_REPAIR_COUNT AS repairCount,
			 ro.I_CUM_DAYS AS cumDays,
			 L_CURRENT_RO_STATUS AS `status`,
			 ro.I_FIRST_CHERWELL_CASEID AS starCaseId, 
			 ro.T_FIRST_CREATED_CHERWELL_CASEID AS caseOpenDate,
			 ro.I_DLR_PH_NMBR AS dealerContact,
			 ro.C_DLR AS dealerCode,
			 ro.C_FUEL_TYPE AS `fuelType`,
			 ro.C_ENGINE_SALES_CODE AS `engine`
	FROM RO_JOURNEY_OPEN ro
	LEFT JOIN GPOP_DATA g ON ro.I_RO_JOURNEY=g.I_RO_JOURNEY AND ro.I_VIN=g.I_VIN AND g.C_DLR=ro.C_DLR
	LEFT JOIN CHERWELL_CASE_PART3 c ON c.I_RO_JOURNEY=ro.I_RO_JOURNEY AND c.I_VIN=ro.I_VIN AND c.C_DLR=ro.C_DLR
	WHERE ro.I_FIRST_CHERWELL_CASEID IS NOT NULL
		AND  ro.C_DLR NOT IN (SELECT C_DLR FROM EXCLUDED_DEALERS) -- Excluded Test Dealers
		AND IFNULL(ro.I_MOD_YR,'')!='' AND IFNULL(ro.C_FAM,'')!='' AND IFNULL(ro.C_FUEL_TYPE,'')!='' -- Excluded Competitive Vehicles
		AND ro.C_DLR_BUSINESS != 'I' -- Excluded International Dealers 
		AND (dealerCode = '' OR FIND_IN_SET(ro.C_DLR,dealerCode))
		AND (businessCenter = '' OR FIND_IN_SET(ro.N_BUSINESS_CENTER,businessCenter))
		AND (year = '' OR FIND_IN_SET(ro.I_MOD_YR,year))
		AND (model = '' OR FIND_IN_SET(ro.C_FAM,model))
		AND (`engine` = '' OR FIND_IN_SET(ro.C_ENGINE_SALES_CODE,`engine`))
		AND (`status` = '' OR ro.L_CURRENT_RO_STATUS = `status`) 
	   AND (salesCode = '' OR ro.C_TRANSM = salesCode) 
	   AND (`fuelType` = '' OR IFNULL(ro.C_FUEL_TYPE,'') = `fuelType`)    
	   AND (roOpenDateFrom IS NULL OR DATE(ro.T_START_JOURNEY) BETWEEN roOpenDateFrom AND roOpenDateTo) 
		AND (caseOpenDateFrom IS NULL OR DATE(ro.T_FIRST_CREATED_CHERWELL_CASEID) BETWEEN caseOpenDateFrom AND caseOpenDateTo) 
		AND (caseCloseDateFrom IS NULL OR DATE(ro.T_LAST_CLOSE_CHERWELL_CASEID) BETWEEN caseCloseDateFrom AND caseCloseDateTo)
		AND (cumDays = '' OR ro.I_CUM_DAYS BETWEEN cumDaysRangeStart AND cumDaysRangeEnd)
		AND (daysDown = '' OR ro.I_DAYS_DOWN BETWEEN dayDownRangeStart AND dayDownRangeEnd)
		AND (repairCount = '' OR ro.I_REPAIR_COUNT BETWEEN repairCountRangeStart AND repairCountRangeEnd)
		AND (odometer = '' OR (CASE WHEN odometer = '-50' THEN (CAST(ro.Q_ODOMETER AS DECIMAL) < 50) WHEN odometer = '+50' THEN (CAST(ro.Q_ODOMETER AS DECIMAL) > 50) END))
		AND (witech = '' OR (CASE WHEN witech = 'true' THEN ro.T_WITECH_SCAN_EARLIEST IS NOT NULL WHEN witech = 'false' THEN ro.T_WITECH_SCAN_EARLIEST IS NULL END))	
		AND (wiadvisor = '' OR (CASE WHEN wiadvisor = 'true' THEN ro.T_WIADVISOR_SCAN IS NOT NULL WHEN wiadvisor = 'false' THEN ro.T_WIADVISOR_SCAN IS NULL END))	
		AND (roNumber = '' OR (CASE WHEN roNumber = 'true' THEN ro.I_RO IS NOT NULL WHEN roNumber = 'false' THEN ro.I_RO IS NULL END))	
		AND (forceClose = '' OR (CASE WHEN forceClose = 'true' THEN ro.L_FORCE_CLOSE IS NOT NULL WHEN forceClose = 'false' THEN ro.L_FORCE_CLOSE IS NULL END))	
		AND (caseEscalatedDateFrom IS NULL OR DATE(c.LASTESCALATEDDATETIME) BETWEEN caseEscalatedDateFrom AND caseEscalatedDateTo)
		AND (partsOrderedDateFrom IS NULL OR DATE(g.T_ORDER_CONFIRM) BETWEEN partsOrderedDateFrom AND partsOrderedDateTo)
		AND (partsShippedDateFrom IS NULL OR DATE(g.T_SHIPPED) BETWEEN partsShippedDateFrom AND partsShippedDateTo)
		AND (partsDeliveredDateFrom IS NULL OR DATE(g.T_DELIVERY) BETWEEN partsDeliveredDateFrom AND partsDeliveredDateTo)
	ORDER BY ro.T_START_JOURNEY DESC
	LIMIT pageOffset,pageSize;
ELSE

	SELECT DISTINCT ro.I_RO_JOURNEY as roJourneyId,
			 ro.I_VIN AS vin,
			 ro.C_FAM AS model,
			 ro.I_MOD_YR AS year,
			 FLOOR(ro.Q_ODOMETER) AS odometer,
			 ro.N_DLR AS dealer,
			 ro.T_START_JOURNEY AS roDate,
			 ro.I_DAYS_DOWN AS noOfDaysDown,
			 ro.I_REPAIR_COUNT AS repairCount,
			 ro.I_CUM_DAYS AS cumDays,
			 L_CURRENT_RO_STATUS AS `status`,
			 ro.I_FIRST_CHERWELL_CASEID AS starCaseId, 
			 ro.T_FIRST_CREATED_CHERWELL_CASEID AS caseOpenDate,
			 ro.I_DLR_PH_NMBR AS dealerContact,
			 ro.C_DLR AS dealerCode,
			 ro.C_FUEL_TYPE AS `fuelType`,
			 ro.C_ENGINE_SALES_CODE AS `engine`
	FROM RO_JOURNEY_OPEN ro
	LEFT JOIN GPOP_DATA g ON ro.I_RO_JOURNEY=g.I_RO_JOURNEY AND ro.I_VIN=g.I_VIN AND g.C_DLR=ro.C_DLR
	LEFT JOIN CHERWELL_CASE_PART3 c ON c.I_RO_JOURNEY=ro.I_RO_JOURNEY AND c.I_VIN=ro.I_VIN AND c.C_DLR=ro.C_DLR
	WHERE ro.I_FIRST_CHERWELL_CASEID IS NOT NULL
		AND ro.C_DLR NOT IN (SELECT C_DLR FROM EXCLUDED_DEALERS) -- Excluded Test Dealers
		AND IFNULL(ro.I_MOD_YR,'')!='' AND IFNULL(ro.C_FAM,'')!='' AND IFNULL(ro.C_FUEL_TYPE,'')!='' -- Excluded Competitive Vehicles
		AND ro.C_DLR_BUSINESS != 'I' -- Excluded International Dealers 
		AND (dealerCode = '' OR FIND_IN_SET(ro.C_DLR,dealerCode))
		AND (businessCenter = '' OR FIND_IN_SET(ro.N_BUSINESS_CENTER,businessCenter))
		AND (year = '' OR FIND_IN_SET(ro.I_MOD_YR,year))
		AND (model = '' OR FIND_IN_SET(ro.C_FAM,model))
		AND (`engine` = '' OR FIND_IN_SET(ro.C_ENGINE_SALES_CODE,`engine`))
		AND (`status` = '' OR ro.L_CURRENT_RO_STATUS = `status`) 
	   AND (salesCode = '' OR ro.C_TRANSM = salesCode) 
	   AND (`fuelType` = '' OR IFNULL(ro.C_FUEL_TYPE,'') = `fuelType`)    
	   AND (roOpenDateFrom IS NULL OR DATE(ro.T_START_JOURNEY) BETWEEN roOpenDateFrom AND roOpenDateTo) 
		AND (caseOpenDateFrom IS NULL OR DATE(ro.T_FIRST_CREATED_CHERWELL_CASEID) BETWEEN caseOpenDateFrom AND caseOpenDateTo) 
		AND (caseCloseDateFrom IS NULL OR DATE(ro.T_LAST_CLOSE_CHERWELL_CASEID) BETWEEN caseCloseDateFrom AND caseCloseDateTo)
		AND (cumDays = '' OR ro.I_CUM_DAYS BETWEEN cumDaysRangeStart AND cumDaysRangeEnd)
		AND (daysDown = '' OR ro.I_DAYS_DOWN BETWEEN dayDownRangeStart AND dayDownRangeEnd)
		AND (repairCount = '' OR ro.I_REPAIR_COUNT BETWEEN repairCountRangeStart AND repairCountRangeEnd)
		AND (odometer = '' OR (CASE WHEN odometer = '-50' THEN (CAST(ro.Q_ODOMETER AS DECIMAL) < 50) WHEN odometer = '+50' THEN (CAST(ro.Q_ODOMETER AS DECIMAL) > 50) END))
		AND (witech = '' OR (CASE WHEN witech = 'true' THEN ro.T_WITECH_SCAN_EARLIEST IS NOT NULL WHEN witech = 'false' THEN ro.T_WITECH_SCAN_EARLIEST IS NULL END))	
		AND (wiadvisor = '' OR (CASE WHEN wiadvisor = 'true' THEN ro.T_WIADVISOR_SCAN IS NOT NULL WHEN wiadvisor = 'false' THEN ro.T_WIADVISOR_SCAN IS NULL END))	
		AND (roNumber = '' OR (CASE WHEN roNumber = 'true' THEN ro.I_RO IS NOT NULL WHEN roNumber = 'false' THEN ro.I_RO IS NULL END))	
		AND (forceClose = '' OR (CASE WHEN forceClose = 'true' THEN ro.L_FORCE_CLOSE IS NOT NULL WHEN forceClose = 'false' THEN ro.L_FORCE_CLOSE IS NULL END))	
		AND (caseEscalatedDateFrom IS NULL OR DATE(c.LASTESCALATEDDATETIME) BETWEEN caseEscalatedDateFrom AND caseEscalatedDateTo)
		AND (partsOrderedDateFrom IS NULL OR DATE(g.T_ORDER_CONFIRM) BETWEEN partsOrderedDateFrom AND partsOrderedDateTo)
		AND (partsShippedDateFrom IS NULL OR DATE(g.T_SHIPPED) BETWEEN partsShippedDateFrom AND partsShippedDateTo)
		AND (partsDeliveredDateFrom IS NULL OR DATE(g.T_DELIVERY) BETWEEN partsDeliveredDateFrom AND partsDeliveredDateTo)
	ORDER BY 
		  CASE WHEN sortBy ='vin' AND sortOrder ='ASC' THEN ro.I_VIN END ASC,
        CASE WHEN sortBy ='vin' AND sortOrder ='DESC' THEN ro.I_VIN END DESC,
        CASE WHEN sortBy ='model' AND sortOrder ='ASC' THEN ro.C_FAM END ASC,
        CASE WHEN sortBy ='model' AND sortOrder ='DESC' THEN ro.C_FAM END DESC,
        CASE WHEN sortBy ='year' AND sortOrder ='ASC' THEN ro.I_MOD_YR END ASC,
        CASE WHEN sortBy ='year' AND sortOrder ='DESC' THEN ro.I_MOD_YR END DESC,
        CASE WHEN sortBy ='engine' AND sortOrder ='ASC' THEN ro.C_ENGINE_SALES_CODE END ASC,
        CASE WHEN sortBy ='engine' AND sortOrder ='DESC' THEN ro.C_ENGINE_SALES_CODE END DESC,
        CASE WHEN sortBy ='fuelType' AND sortOrder ='ASC' THEN ro.C_FUEL_TYPE END ASC,
        CASE WHEN sortBy ='fuelType' AND sortOrder ='DESC' THEN ro.C_FUEL_TYPE END DESC,
        CASE WHEN sortBy ='dealerCode' AND sortOrder ='ASC' THEN ro.C_DLR END ASC,
        CASE WHEN sortBy ='dealerCode' AND sortOrder ='DESC' THEN ro.C_DLR END DESC,
        CASE WHEN sortBy ='roJourneyId' AND sortOrder ='ASC' THEN ro.I_RO_JOURNEY END ASC,
        CASE WHEN sortBy ='roJourneyId' AND sortOrder ='DESC' THEN ro.I_RO_JOURNEY END DESC,
        CASE WHEN sortBy ='roDate' AND sortOrder ='ASC' THEN ro.T_START_JOURNEY END ASC,
        CASE WHEN sortBy ='roDate' AND sortOrder ='DESC' THEN ro.T_START_JOURNEY END DESC,
	     CASE WHEN sortBy ='noOfDaysDown' AND sortOrder ='ASC' THEN ro.I_DAYS_DOWN END ASC,
        CASE WHEN sortBy ='noOfDaysDown' AND sortOrder ='DESC' THEN ro.I_DAYS_DOWN END DESC,
        CASE WHEN sortBy ='repairCount' AND sortOrder ='ASC' THEN ro.I_REPAIR_COUNT END ASC,
        CASE WHEN sortBy ='repairCount' AND sortOrder='DESC' THEN ro.I_REPAIR_COUNT END DESC,
        CASE WHEN sortBy ='odometer' AND sortOrder ='ASC' THEN CAST(ro.Q_ODOMETER AS DECIMAL) END ASC,
        CASE WHEN sortBy ='odometer' AND sortOrder ='DESC' THEN CAST(ro.Q_ODOMETER AS DECIMAL) END DESC,
        CASE WHEN sortBy ='cumDays' AND sortOrder ='ASC' THEN ro.I_CUM_DAYS END ASC,
        CASE WHEN sortBy ='cumDays' AND sortOrder ='DESC' THEN ro.I_CUM_DAYS END DESC,
        CASE WHEN sortBy ='starCaseId' AND sortOrder ='ASC' THEN ro.I_FIRST_CHERWELL_CASEID END ASC,
        CASE WHEN sortBy ='starCaseId' AND sortOrder ='DESC' THEN ro.I_FIRST_CHERWELL_CASEID END DESC,
        CASE WHEN sortBy ='caseOpenDate' AND sortOrder ='ASC' THEN ro.T_FIRST_CREATED_CHERWELL_CASEID END ASC,
        CASE WHEN sortBy ='caseOpenDate' AND sortOrder ='DESC' THEN ro.T_FIRST_CREATED_CHERWELL_CASEID END DESC,
        CASE WHEN sortBy ='status' AND sortOrder ='ASC' THEN ro.L_CURRENT_RO_STATUS END ASC,
        CASE WHEN sortBy ='status' AND sortOrder ='DESC' THEN ro.L_CURRENT_RO_STATUS END DESC
	LIMIT pageOffset,pageSize;
	
END IF;
	
	-- return total number of records
	SELECT  COUNT(DISTINCT ro.I_VIN) AS Total
	FROM RO_JOURNEY_OPEN ro
	LEFT JOIN GPOP_DATA g ON ro.I_RO_JOURNEY=g.I_RO_JOURNEY AND ro.I_VIN=g.I_VIN AND g.C_DLR=ro.C_DLR
	LEFT JOIN CHERWELL_CASE_PART3 c ON c.I_RO_JOURNEY=ro.I_RO_JOURNEY AND c.I_VIN=ro.I_VIN AND c.C_DLR=ro.C_DLR
	WHERE ro.I_FIRST_CHERWELL_CASEID IS NOT NULL
		AND ro.C_DLR NOT IN (SELECT C_DLR FROM EXCLUDED_DEALERS) -- Excluded Test Dealers
		AND IFNULL(ro.I_MOD_YR,'')!='' AND IFNULL(ro.C_FAM,'')!='' AND IFNULL(ro.C_FUEL_TYPE,'')!='' -- Excluded Competitive Vehicles
		AND ro.C_DLR_BUSINESS != 'I' -- Excluded International Dealers 
		AND (dealerCode = '' OR FIND_IN_SET(ro.C_DLR,dealerCode))
		AND (businessCenter = '' OR FIND_IN_SET(ro.N_BUSINESS_CENTER,businessCenter))
		AND (year = '' OR FIND_IN_SET(ro.I_MOD_YR,year))
		AND (model = '' OR FIND_IN_SET(ro.C_FAM,model))
		AND (`engine` = '' OR FIND_IN_SET(ro.C_ENGINE_SALES_CODE,`engine`))
		AND (`status` = '' OR ro.L_CURRENT_RO_STATUS = `status`) 
	   AND (salesCode = '' OR ro.C_TRANSM = salesCode) 
	   AND (`fuelType` = '' OR IFNULL(ro.C_FUEL_TYPE,'') = `fuelType`)    
	   AND (roOpenDateFrom IS NULL OR DATE(ro.T_START_JOURNEY) BETWEEN roOpenDateFrom AND roOpenDateTo) 
		AND (caseOpenDateFrom IS NULL OR DATE(ro.T_FIRST_CREATED_CHERWELL_CASEID) BETWEEN caseOpenDateFrom AND caseOpenDateTo) 
		AND (caseCloseDateFrom IS NULL OR DATE(ro.T_LAST_CLOSE_CHERWELL_CASEID) BETWEEN caseCloseDateFrom AND caseCloseDateTo)
		AND (cumDays = '' OR ro.I_CUM_DAYS BETWEEN cumDaysRangeStart AND cumDaysRangeEnd)
		AND (daysDown = '' OR ro.I_DAYS_DOWN BETWEEN dayDownRangeStart AND dayDownRangeEnd)
		AND (repairCount = '' OR ro.I_REPAIR_COUNT BETWEEN repairCountRangeStart AND repairCountRangeEnd)
		AND (odometer = '' OR (CASE WHEN odometer = '-50' THEN (CAST(ro.Q_ODOMETER AS DECIMAL) < 50) WHEN odometer = '+50' THEN (CAST(ro.Q_ODOMETER AS DECIMAL) > 50) END))
		AND (witech = '' OR (CASE WHEN witech = 'true' THEN ro.T_WITECH_SCAN_EARLIEST IS NOT NULL WHEN witech = 'false' THEN ro.T_WITECH_SCAN_EARLIEST IS NULL END))	
		AND (wiadvisor = '' OR (CASE WHEN wiadvisor = 'true' THEN ro.T_WIADVISOR_SCAN IS NOT NULL WHEN wiadvisor = 'false' THEN ro.T_WIADVISOR_SCAN IS NULL END))	
		AND (roNumber = '' OR (CASE WHEN roNumber = 'true' THEN ro.I_RO IS NOT NULL WHEN roNumber = 'false' THEN ro.I_RO IS NULL END))	
		AND (forceClose = '' OR (CASE WHEN forceClose = 'true' THEN ro.L_FORCE_CLOSE IS NOT NULL WHEN forceClose = 'false' THEN ro.L_FORCE_CLOSE IS NULL END))	
		AND (caseEscalatedDateFrom IS NULL OR DATE(c.LASTESCALATEDDATETIME) BETWEEN caseEscalatedDateFrom AND caseEscalatedDateTo)
		AND (partsOrderedDateFrom IS NULL OR DATE(g.T_ORDER_CONFIRM) BETWEEN partsOrderedDateFrom AND partsOrderedDateTo)
		AND (partsShippedDateFrom IS NULL OR DATE(g.T_SHIPPED) BETWEEN partsShippedDateFrom AND partsShippedDateTo)
		AND (partsDeliveredDateFrom IS NULL OR DATE(g.T_DELIVERY) BETWEEN partsDeliveredDateFrom AND partsDeliveredDateTo)
	;
END
===============================
CREATE DEFINER=`t12247adm`@`%` PROCEDURE `db_12247_d_001_instance_1`.`PROC_GET_SUMMARY`(
	IN `businessCenter` VARCHAR(50),
	IN `dealerCode` VARCHAR(50),
	IN `year` INT,
	IN `model` VARCHAR(50),
	IN `engine` VARCHAR(50)
)
    SQL SECURITY INVOKER
BEGIN

	DECLARE TOTAL_VEHICLE_IN_FOR_SERVICE INT;
	DECLARE PHEV_VEHICLES INT;
	DECLARE WAITING_FOR_PARTS INT ;
	DECLARE NEARING_BUYBACK_SITUATION INT;
	DECLARE NEEDS_IMMEDIATE_ATTENTION INT ;
	DECLARE TECHNICAL_ASSITANCE INT ;
	DECLARE RO_INFO_MISSING INT ;
	DECLARE REPEAT_REPAIRS INT;
	DECLARE REPAIR_ORDERS_CLOSED INT;
	DECLARE REPAIR_ORDERS_CLOSED_CTD INT;
	DECLARE PROSENSE INT ;
	DECLARE STAR_CASE_OPEN INT;
	DECLARE NEW_VEH_PREP INT;
	
	#DECLARE FIRST_DAY DATE;
	-- Total vehicles in for service, PHEV vehicles, Repeat Repairs,RO Info missing
   SELECT 	COUNT(DISTINCT ro.I_VIN) - COUNT(CASE WHEN ro.L_IS_NVP = 'Y' THEN ro.I_VIN ELSE NULL END),
			  	COUNT(CASE WHEN ro.C_FUEL_TYPE IN ('ELECTRIC','FHEV','PHEV','MHEV') THEN ro.I_VIN ELSE NULL END) - COUNT(CASE WHEN ro.L_IS_NVP = 'Y' AND ro.C_FUEL_TYPE IN ('ELECTRIC','FHEV','PHEV','MHEV') THEN ro.I_VIN ELSE NULL END),
			  	COUNT(CASE WHEN ro.L_REPEAT_REPAIR IS NOT NULL THEN ro.I_VIN ELSE NULL END),
			  	#COUNT(CASE WHEN ((ro.I_RO IS NULL OR ro.I_RO = '') AND DATE(ro.T_START_JOURNEY) < DATE(NOW())) THEN ro.I_VIN ELSE NULL END),
			  	COUNT(CASE WHEN ro.I_FIRST_CHERWELL_CASEID IS NOT NULL THEN ro.I_VIN ELSE NULL END),
			  	COUNT(CASE WHEN ro.L_IS_NVP = 'Y' THEN ro.I_VIN ELSE NULL END)
	  INTO   TOTAL_VEHICLE_IN_FOR_SERVICE,
			   PHEV_VEHICLES,
			   REPEAT_REPAIRS,
			   #RO_INFO_MISSING,
			   STAR_CASE_OPEN,
			   NEW_VEH_PREP
	FROM RO_JOURNEY_OPEN ro
	WHERE ro.C_DLR NOT IN (SELECT C_DLR FROM EXCLUDED_DEALERS) -- Excluded Test Dealers
		AND IFNULL(ro.I_MOD_YR,'')!='' AND IFNULL(ro.C_FAM,'')!='' AND IFNULL(ro.C_FUEL_TYPE,'')!='' -- Excluded Competitive Vehicles
		AND  ro.C_DLR_BUSINESS != 'I' -- Excluded International Dealers
		AND (dealerCode = '' OR ro.C_DLR = dealerCode) 
		AND (businessCenter = '' OR ro.N_BUSINESS_CENTER = businessCenter) 
		AND (year = '' OR ro.I_MOD_YR = year) 
		AND (model = '' OR ro.C_FAM = model) 
		AND (engine = '' OR ro.C_ENGINE_SALES_CODE = engine) 
	;	
	
	-- Waiting for parts (gpop)
  	SELECT 0 INTO WAITING_FOR_PARTS;
	
	-- Nearing Buyback Situation (buyback/prosensing)
  	SELECT COUNT(1) INTO NEARING_BUYBACK_SITUATION 
	FROM BUYBACK_DATA b
		JOIN VEHICLE_MASTER v ON b.I_VIN=v.I_VIN
	WHERE DATE(b.D_PACKAGE_CREATION) >= DATE(NOW()) - INTERVAL 13 MONTH
		AND (year = '' OR v.I_MOD_YR = year) 
		AND (model = '' OR v.C_FAM = model) 
		AND (engine = '' OR v.C_ENGINE_SALES_CODE = engine)
	;

	
  	
  	-- Needs Immediate Attention
  	SELECT 0 INTO NEEDS_IMMEDIATE_ATTENTION;
  	
  	-- Technical Assitance
  	SELECT 0 INTO TECHNICAL_ASSITANCE;
  		
  	-- Customer Experience
  	-- SELECT 0 INTO CUSTOMER_EXP;
  	
  	-- REPEAT_REPAIRS
	/*
  	SELECT COUNT(ro.I_VIN) INTO REPEAT_REPAIRS 
	FROM RO_JOURNEY ro 
	JOIN DEALER_MASTER d ON ro.C_DLR = d.C_DLR
	WHERE ro.I_REPEAT_REPAIR_COMPUTED_PREV_RO IS NOT NULL AND
		ro.T_START_JOURNEY >= NOW() - INTERVAL 7 DAY AND 
		ro.T_END_JOURNEY IS NULL AND
	   ro.T_FORCE_CLOSE_RO IS NULL AND
		(businessCenter = '' OR d.C_DLR_BUSINESS = businessCenter) AND
		(dealerCode = '' OR d.C_DLR = dealerCode) AND
		(year = '' OR ro.I_MOD_YR = year) AND
		(model = '' OR ro.C_FAM = model) AND
		(engine = '' OR ro.C_ENGINE_SALES_CODE = engine);	    
	 */  
  	#/*
    
    #SELECT DATE_SUB(LAST_DAY(NOW()), INTERVAL DAY(LAST_DAY(NOW()))-1 DAY) INTO FIRST_DAY;
    
  	-- REPAIR_ORDERS_CLOSED
   /* HINT T_FORCE_CLOSE_RO PARALLEL*/
  	/*
	SELECT COUNT( ro.I_VIN) INTO REPAIR_ORDERS_CLOSED
	FROM 
    RO_JOURNEY_CLOSE ro 
    #RO_JOURNEY_TEMP ro 
	-- JOIN DEALER_MASTER d	ON ro.C_DLR = d.C_DLR
	WHERE 
	#(ro.T_END_JOURNEY IS NOT NULL OR ro.T_FORCE_CLOSE_RO IS NOT NULL) 
	#( ro.T_END_JOURNEY>= FIRST_DAY OR  ro.T_FORCE_CLOSE_RO >= FIRST_DAY)
	#ro.T_END_JOURNEY IS NOT NULL
   ro.T_END_JOURNEY>= '2022-08-01'
   #DATE(IFNULL(T_END_JOURNEY,T_FORCE_CLOSE_RO)) >= FIRST_DAY
	#AND ro.T_START_JOURNEY >= NOW() - INTERVAL 7 DAY 
	#AND	MONTH(ro.T_END_JOURNEY)=MONTH(NOW())
	#AND YEAR(ro.T_END_JOURNEY)=YEAR(NOW()) 
	#AND DATE_FORMAT(IFNULL(T_END_JOURNEY,T_FORCE_CLOSE_RO),'%Y%m') = DATE_FORMAT(CURRENT_TIMESTAMP(),'%Y%m')
	#AND YEAR(IFNULL(ro.T_END_JOURNEY,ro.T_FORCE_CLOSE_RO))=YEAR(NOW())
   #AND MONTH(IFNULL(ro.T_END_JOURNEY,ro.T_FORCE_CLOSE_RO))=MONTH(NOW())
   #AND DATE(IFNULL(T_END_JOURNEY,T_FORCE_CLOSE_RO)) >= FIRST_DAY
   AND   (businessCenter = '' OR d.C_DLR_BUSINESS = businessCenter) 
	AND   (dealerCode = '' OR d.C_DLR = dealerCode)
	AND	(year = '' OR ro.I_MOD_YR = year) 
	AND	(model = '' OR ro.C_FAM = model) 
	AND	(engine = '' OR ro.C_ENGINE_SALES_CODE = engine);	   
  	*/
  	
  	
  	/*SELECT 
	  		COUNT(CASE WHEN ro.T_END_JOURNEY >= FIRST_DAY THEN ro.I_VIN ELSE NULL END), 
	  		COUNT(CASE WHEN 
			  		(
				  		YEAR(ro.T_END_JOURNEY)=YEAR(NOW()) AND
	   				MONTH(ro.T_END_JOURNEY)=MONTH(NOW()) - 1
					) THEN ro.I_VIN ELSE NULL END)
	  INTO 
	  		REPAIR_ORDERS_CLOSED_CTD,
	  		REPAIR_ORDERS_CLOSED
	FROM RO_JOURNEY_CLOSE ro
	WHERE (businessCenter = '' OR ro.C_DLR_BUSINESS = businessCenter) 
		AND   (dealerCode = '' OR ro.C_DLR = dealerCode)
		AND	(year = '' OR ro.I_MOD_YR = year) 
		AND	(model = '' OR ro.C_FAM = model) 
		AND	(engine = '' OR ro.C_ENGINE_SALES_CODE = ENGINE);
  	  	
  	*/
  	
  	-- Repair orders closed (last month)
  	SELECT X_ATTRIBUTE_VALUE
   INTO REPAIR_ORDERS_CLOSED
	FROM STATS_COUNT 
	WHERE N_ATTRIBUTE = 'RO_CLOSE' AND X_ATTRIBUTE_PERIOD = 'LAST_MONTH';
	
	-- Repair orders closed (current month)
	SELECT X_ATTRIBUTE_VALUE
   INTO REPAIR_ORDERS_CLOSED_CTD
	FROM STATS_COUNT 
	WHERE N_ATTRIBUTE = 'RO_CLOSE' AND X_ATTRIBUTE_PERIOD = 'CURRENT_TO_DATE';
  
  	-- PROSENSE
  	SELECT COUNT(DISTINCT ro.I_VIN) INTO PROSENSE
  	FROM RO_JOURNEY_OPEN ro
  	JOIN PROSENSE_DATA p ON p.I_VIN=ro.I_VIN
  	WHERE ro.C_DLR NOT IN (SELECT C_DLR FROM EXCLUDED_DEALERS) -- Excluded Test Dealers
		AND IFNULL(ro.I_MOD_YR,'')!='' AND IFNULL(ro.C_FAM,'')!='' AND IFNULL(ro.C_FUEL_TYPE,'')!='' -- Excluded Competitive Vehicles
		AND  ro.C_DLR_BUSINESS != 'I' -- Excluded International Dealers
	   AND (dealerCode = '' OR ro.C_DLR = dealerCode) 
		AND (businessCenter = '' OR ro.N_BUSINESS_CENTER = businessCenter) 
		AND (year = '' OR ro.I_MOD_YR = year) 
		AND (model = '' OR ro.C_FAM = model) 
		AND (engine = '' OR ro.C_ENGINE_SALES_CODE = engine)
  	;
	
	
	-- Result
	SELECT 
		TOTAL_VEHICLE_IN_FOR_SERVICE,
		PHEV_VEHICLES,
   	WAITING_FOR_PARTS,
   	NEARING_BUYBACK_SITUATION,
   	NEEDS_IMMEDIATE_ATTENTION,
   	TECHNICAL_ASSITANCE,
		RO_INFO_MISSING,
		REPEAT_REPAIRS,
		REPAIR_ORDERS_CLOSED,
		REPAIR_ORDERS_CLOSED_CTD,
		PROSENSE,
		STAR_CASE_OPEN,
		NEW_VEH_PREP;
   	
END
======================================
CREATE DEFINER=`t12247adm`@`%` PROCEDURE `db_12247_d_001_instance_1`.`PROC_GET_VEH_INFO`(
	IN `VIN` VARCHAR(50)
)
    SQL SECURITY INVOKER
BEGIN

	-- Vehicle details
	SELECT DISTINCT I_VIN AS vin,C_FAM AS family,I_MOD_YR AS modelYear,e.SALES_CODE_DESC AS engineDesc,C_FUEL_TYPE AS fuelType,
		(SELECT Q_ODOMETER FROM RO_JOURNEY_OPEN WHERE I_VIN=v.I_VIN ORDER BY I_RO_JOURNEY DESC LIMIT 1) AS odometer,
		t.SALES_CODE_DESC AS transmissionDesc,DATE_FORMAT(D_VHCL_SOLD, "%m/%d/%Y") AS vehicleSold,DATE_FORMAT(D_VHCL_BUILT, "%m/%d/%Y") AS vehicleBuild,
		C_RADIO_SALES_CODE AS radio,C_ENGINE_SALES_CODE AS engine,C_TRANSMISSION_SALES_CODE AS transmission
	FROM VEHICLE_MASTER v
	LEFT JOIN SALES_CODE_MASTER e ON v.C_ENGINE_SALES_CODE=e.SALES_CODE AND v.I_MOD_YR=e.MODEL_YEAR
	LEFT JOIN SALES_CODE_MASTER t ON v.C_TRANSMISSION_SALES_CODE=t.SALES_CODE AND v.I_MOD_YR=t.MODEL_YEAR
	WHERE I_VIN = VIN;
	
	-- Dealer details
-- 	SELECT ro.C_DLR AS dealerCode,TRIM(ro.N_DLR) AS dealerName,CONCAT(TRIM(b.C_BUSINESS_CENTER),'-',TRIM(b.N_BUSINESS_CENTER)) AS businessCenter,TRIM(ro.I_DLR_PH_NMBR) AS phoneNumber,
-- 		CONCAT(
-- 			RTRIM(X_DLR_ADDR1),
-- 			CASE WHEN RTRIM(X_DLR_ADDR2)='' THEN '' ELSE CONCAT(', ',RTRIM(X_DLR_ADDR2)) END,
-- 			CASE WHEN RTRIM(X_DLR_ZONE)='' THEN '' ELSE CONCAT(', ',RTRIM(X_DLR_ZONE)) END,
-- 			CASE WHEN RTRIM(X_DLR_CITY)='' THEN '' ELSE CONCAT(', ',RTRIM(X_DLR_CITY)) END,
-- 			CASE WHEN RTRIM(X_DLR_STATE)='' THEN '' ELSE CONCAT(', ',RTRIM(X_DLR_STATE)) END,
-- 			CASE WHEN RTRIM(I_ZIP)='' THEN '' ELSE CONCAT(' ',RTRIM(I_ZIP)) END,
-- 			CASE WHEN RTRIM(d.X_COUNTRY)='' THEN '' ELSE CONCAT(', ',RTRIM(d.X_COUNTRY)) END
-- 		) AS address,
-- 		RTRIM(X_DLR_STATE) AS state 
-- 	FROM RO_JOURNEY_OPEN ro
-- 	LEFT JOIN DEALER_MASTER d ON  d.C_DLR = ro.C_DLR
-- 	LEFT JOIN BUSINESS_CENTER_DESC b ON b.C_BUSINESS_CENTER=d.C_DLR_BUSINESS AND b.X_COUNTRY=d.X_COUNTRY
-- 	WHERE ro.I_VIN = VIN AND 
-- 	ro.T_END_JOURNEY IS NULL;
-- 	
	-- Repair orders
-- 	SELECT I_RO_JOURNEY AS roJourneyId,I_RO AS roNumber,DATE_FORMAT(T_START_JOURNEY, "%m/%d/%Y") AS roOpenDate,DATE_FORMAT(T_END_JOURNEY, "%m/%d/%Y") AS roCloseDate
-- 	FROM RO_JOURNEY_OPEN ro
-- 	WHERE ro.I_VIN = VIN 
-- 	ORDER BY I_RO_JOURNEY DESC LIMIT 1;

	SELECT I_RO_JOURNEY AS roJourneyId,I_RO AS roNumber,T_START_JOURNEY AS roOpenDate,T_END_JOURNEY AS roCloseDate,
		ro.C_DLR AS dealerCode,TRIM(d.N_DLR) AS dealerName,CONCAT(TRIM(b.X_COUNTRY),'-',TRIM(b.N_BUSINESS_CENTER)) AS businessCenter,TRIM(d.I_DLR_PH_NMBR) AS phoneNumber,
		CONCAT(
			RTRIM(X_DLR_ADDR1),
			CASE WHEN RTRIM(X_DLR_ADDR2)='' THEN '' ELSE CONCAT(', ',RTRIM(X_DLR_ADDR2)) END,
			-- CASE WHEN RTRIM(X_DLR_ZONE)='' THEN '' ELSE CONCAT(', ',RTRIM(X_DLR_ZONE)) END,
			CASE WHEN RTRIM(X_DLR_CITY)='' THEN '' ELSE CONCAT(', ',RTRIM(X_DLR_CITY)) END,
			CASE WHEN RTRIM(X_DLR_STATE)='' THEN '' ELSE CONCAT(', ',RTRIM(X_DLR_STATE)) END,
			CASE WHEN RTRIM(I_ZIP)='' THEN '' ELSE CONCAT(' ',RTRIM(I_ZIP)) END,
			CASE WHEN RTRIM(d.X_COUNTRY)='' THEN '' ELSE CONCAT(', ',RTRIM(d.X_COUNTRY)) END
		) AS address,
		RTRIM(X_DLR_STATE) AS state 
	FROM RO_JOURNEY ro
	LEFT JOIN DEALER_MASTER d ON  d.C_DLR = ro.C_DLR
	LEFT JOIN BUSINESS_CENTER_DESC b ON b.C_BUSINESS_CENTER=d.C_DLR_BUSINESS AND b.X_COUNTRY=d.X_COUNTRY
	WHERE ro.I_VIN = VIN
	ORDER BY I_RO_JOURNEY DESC
	LIMIT 1;
	
	-- buyback Data
	SELECT DATE_FORMAT(bd.D_PACKAGE_CREATION, "%m/%d/%Y") AS templateDate,"" AS checkDate,D_VHCL_SURRENDER AS surrenderDate,
	A_BUYBACK_AMT AS buybackAmount,bd.A_TOTAL_BUYBACK_AMT AS totalBuybackAmount,bd.N_PACKAGE_TYPE AS buybackType
	FROM BUYBACK_DATA bd 
	WHERE bd.I_VIN=VIN;
	
	-- PROSENSEDATA Data
	SELECT P_RISK_SCORE AS riskScore,C_STATE AS proState,T_STMP_UPDATE AS lastUpdate,
	I_DAYS_DOWN AS daysDown,I_REPEAT_REPAIR_NO AS repeatRepair 
	FROM PROSENSE_DATA pd 
	WHERE pd.I_VIN=VIN;
	
END
======================
CREATE DEFINER=`t12247adm`@`%` PROCEDURE `db_12247_d_001_instance_1`.`PROC_GET_VEH_IN_FOR_SERVICE`(
	IN `businessCenter` VARCHAR(500),
	IN `dealerCode` VARCHAR(500),
	IN `year` VARCHAR(500),
	IN `model` VARCHAR(500),
	IN `engine` VARCHAR(500),
	IN `roOpenDateFrom` DATE,
	IN `roOpenDateTo` DATE,
	IN `caseOpenDateFrom` DATE,
	IN `caseOpenDateTo` DATE,
	IN `caseCloseDateFrom` DATE,
	IN `caseCloseDateTo` DATE,
	IN `status` VARCHAR(50),
	IN `salesCode` VARCHAR(3),
	IN `fuelType` VARCHAR(50),
	IN `cumDays` VARCHAR(10),
	IN `daysDown` VARCHAR(10),
	IN `repairCount` VARCHAR(10),
	IN `odometer` VARCHAR(50),
	IN `witech` VARCHAR(5),
	IN `wiadvisor` VARCHAR(5),
	IN `roNumber` VARCHAR(5),
	IN `forceClose` VARCHAR(5),
	IN `caseEscalatedDateFrom` DATE,
	IN `caseEscalatedDateTo` DATE,
	IN `partsOrderedDateFrom` DATE,
	IN `partsOrderedDateTo` DATE,
	IN `partsShippedDateFrom` DATE,
	IN `partsShippedDateTo` DATE,
	IN `partsDeliveredDateFrom` DATE,
	IN `partsDeliveredDateTo` DATE,
	IN `pageOffset` INT,
	IN `pageSize` INT,
	IN `sortBy` VARCHAR(50),
	IN `sortOrder` VARCHAR(50)
)
    SQL SECURITY INVOKER
BEGIN

DECLARE dayDownRangeStart INT;
DECLARE dayDownRangeEnd INT;
DECLARE cumDaysRangeStart INT;
DECLARE cumDaysRangeEnd INT;
DECLARE repairCountRangeStart INT;
DECLARE repairCountRangeEnd INT;


SET dayDownRangeStart = SUBSTRING_INDEX(daysDown, '-', 1);
SET dayDownRangeEnd = SUBSTRING_INDEX(daysDown,'-',-1);

SET cumDaysRangeStart = SUBSTRING_INDEX(cumDays,'-',1);
SET cumDaysRangeEnd = SUBSTRING_INDEX(cumDays,'-',-1);

SET repairCountRangeStart = SUBSTRING_INDEX(repairCount,'-',1);
SET repairCountRangeEnd = SUBSTRING_INDEX(repairCount,'-',-1);

SET pageSize = IF(pageSize=0, 10,pageSize);

 IF sortBy = '' THEN
	-- return current page records only without sort
	SELECT DISTINCT ro.I_RO_JOURNEY as roJourneyId,
			 ro.I_VIN AS vin,
			 ro.C_FAM AS model,
			 ro.I_MOD_YR AS year,
			 FLOOR(ro.Q_ODOMETER) AS odometer,
			 ro.N_DLR AS dealer,
			 ro.T_START_JOURNEY AS roDate,
			 ro.I_DAYS_DOWN AS noOfDaysDown,
			 ro.I_REPAIR_COUNT AS repairCount,
			 ro.I_CUM_DAYS AS cumDays,
			 ro.L_CURRENT_RO_STATUS AS `status`,
			 ro.I_FIRST_CHERWELL_CASEID AS starCaseId, 
			 ro.T_FIRST_CREATED_CHERWELL_CASEID AS caseOpenDate,
			 ro.I_DLR_PH_NMBR AS dealerContact,
			 ro.C_DLR AS dealerCode,
			 ro.C_FUEL_TYPE AS `fuelType`,
			 ro.C_ENGINE_SALES_CODE AS `engine`
	FROM RO_JOURNEY_OPEN ro
	LEFT JOIN GPOP_DATA g ON ro.I_RO_JOURNEY=g.I_RO_JOURNEY AND ro.I_VIN=g.I_VIN AND g.C_DLR=ro.C_DLR
	LEFT JOIN CHERWELL_CASE_PART3 c ON c.I_RO_JOURNEY=ro.I_RO_JOURNEY AND c.I_VIN=ro.I_VIN AND c.C_DLR=ro.C_DLR
	WHERE ro.C_DLR NOT IN (SELECT C_DLR FROM EXCLUDED_DEALERS) -- Excluded Test Dealers
		AND IFNULL(ro.I_MOD_YR,'')!='' AND IFNULL(ro.C_FAM,'')!='' AND IFNULL(ro.C_FUEL_TYPE,'')!='' -- Excluded Competitive Vehicles
		AND  ro.C_DLR_BUSINESS != 'I' -- Excluded International Dealers
	 	AND IFNULL(ro.L_IS_NVP,'N')!='Y'
    	AND (dealerCode = '' OR FIND_IN_SET(ro.C_DLR,dealerCode))
		AND (businessCenter = '' OR FIND_IN_SET(ro.N_BUSINESS_CENTER,businessCenter))
		AND (year = '' OR FIND_IN_SET(ro.I_MOD_YR,year))
		AND (model = '' OR FIND_IN_SET(ro.C_FAM,model))
		AND (`engine` = '' OR FIND_IN_SET(ro.C_ENGINE_SALES_CODE,`engine`))
		AND (`status` = '' OR ro.L_CURRENT_RO_STATUS = `status`) 
	   AND (salesCode = '' OR ro.C_TRANSM = salesCode) 
	   AND (`fuelType` = '' OR IFNULL(ro.C_FUEL_TYPE,'') = `fuelType`)    
	   AND (roOpenDateFrom IS NULL OR DATE(ro.T_START_JOURNEY) BETWEEN roOpenDateFrom AND roOpenDateTo) 
		AND (caseOpenDateFrom IS NULL OR DATE(ro.T_FIRST_CREATED_CHERWELL_CASEID) BETWEEN caseOpenDateFrom AND caseOpenDateTo) 
		AND (caseCloseDateFrom IS NULL OR DATE(ro.T_LAST_CLOSE_CHERWELL_CASEID) BETWEEN caseCloseDateFrom AND caseCloseDateTo)
		AND (cumDays = '' OR ro.I_CUM_DAYS BETWEEN cumDaysRangeStart AND cumDaysRangeEnd)
		AND (daysDown = '' OR ro.I_DAYS_DOWN BETWEEN dayDownRangeStart AND dayDownRangeEnd)
		AND (repairCount = '' OR ro.I_REPAIR_COUNT BETWEEN repairCountRangeStart AND repairCountRangeEnd)
		AND (odometer = '' OR (CASE WHEN odometer = '-50' THEN (CAST(ro.Q_ODOMETER AS DECIMAL) < 50) WHEN odometer = '+50' THEN (CAST(ro.Q_ODOMETER AS DECIMAL) > 50) END))
		AND (witech = '' OR (CASE WHEN witech = 'true' THEN ro.T_WITECH_SCAN_EARLIEST IS NOT NULL WHEN witech = 'false' THEN ro.T_WITECH_SCAN_EARLIEST IS NULL END))	
		AND (wiadvisor = '' OR (CASE WHEN wiadvisor = 'true' THEN ro.T_WIADVISOR_SCAN IS NOT NULL WHEN wiadvisor = 'false' THEN ro.T_WIADVISOR_SCAN IS NULL END))	
		AND (roNumber = '' OR (CASE WHEN roNumber = 'true' THEN ro.I_RO IS NOT NULL WHEN roNumber = 'false' THEN ro.I_RO IS NULL END))	
		AND (forceClose = '' OR (CASE WHEN forceClose = 'true' THEN ro.L_FORCE_CLOSE IS NOT NULL WHEN forceClose = 'false' THEN ro.L_FORCE_CLOSE IS NULL END))	
		AND (caseEscalatedDateFrom IS NULL OR DATE(c.LASTESCALATEDDATETIME) BETWEEN caseEscalatedDateFrom AND caseEscalatedDateTo)
		AND (partsOrderedDateFrom IS NULL OR DATE(g.T_ORDER_CONFIRM) BETWEEN partsOrderedDateFrom AND partsOrderedDateTo)
		AND (partsShippedDateFrom IS NULL OR DATE(g.T_SHIPPED) BETWEEN partsShippedDateFrom AND partsShippedDateTo)
		AND (partsDeliveredDateFrom IS NULL OR DATE(g.T_DELIVERY) BETWEEN partsDeliveredDateFrom AND partsDeliveredDateTo)
	ORDER BY ro.T_START_JOURNEY DESC
	LIMIT pageOffset,pageSize;

ELSE
	-- return current page records only with sort
	SELECT DISTINCT ro.I_RO_JOURNEY as roJourneyId,
			 ro.I_VIN AS vin,
			 ro.C_FAM AS model,
			 ro.I_MOD_YR AS year,
			 FLOOR(ro.Q_ODOMETER) AS odometer,
			 ro.N_DLR AS dealer,
			 ro.T_START_JOURNEY AS roDate,
			 ro.I_DAYS_DOWN AS noOfDaysDown,
			 ro.I_REPAIR_COUNT AS repairCount,
			 ro.I_CUM_DAYS AS cumDays,
			 ro.L_CURRENT_RO_STATUS AS `status`,
			 ro.I_FIRST_CHERWELL_CASEID AS starCaseId, 
			 ro.T_FIRST_CREATED_CHERWELL_CASEID AS caseOpenDate,
			 ro.I_DLR_PH_NMBR AS dealerContact,
			 ro.C_DLR AS dealerCode,
			 ro.C_FUEL_TYPE AS `fuelType`,
			 ro.C_ENGINE_SALES_CODE AS `engine`
	FROM RO_JOURNEY_OPEN ro
	LEFT JOIN GPOP_DATA g ON ro.I_RO_JOURNEY=g.I_RO_JOURNEY AND ro.I_VIN=g.I_VIN AND g.C_DLR=ro.C_DLR
	LEFT JOIN CHERWELL_CASE_PART3 c ON c.I_RO_JOURNEY=ro.I_RO_JOURNEY AND c.I_VIN=ro.I_VIN AND c.C_DLR=ro.C_DLR
	WHERE ro.C_DLR NOT IN (SELECT C_DLR FROM EXCLUDED_DEALERS) -- Excluded Test Dealers
		AND IFNULL(ro.I_MOD_YR,'')!='' AND IFNULL(ro.C_FAM,'')!='' AND IFNULL(ro.C_FUEL_TYPE,'')!='' -- Excluded Competitive Vehicles
		AND  ro.C_DLR_BUSINESS != 'I' -- Excluded International Dealers
    	AND IFNULL(ro.L_IS_NVP,'N')!='Y'
	 	AND (dealerCode = '' OR FIND_IN_SET(ro.C_DLR,dealerCode))
		AND (businessCenter = '' OR FIND_IN_SET(ro.N_BUSINESS_CENTER,businessCenter))
		AND (year = '' OR FIND_IN_SET(ro.I_MOD_YR,year))
		AND (model = '' OR FIND_IN_SET(ro.C_FAM,model))
		AND (`engine` = '' OR FIND_IN_SET(ro.C_ENGINE_SALES_CODE,`engine`))
		AND (`status` = '' OR ro.L_CURRENT_RO_STATUS = `status`) 
	   AND (salesCode = '' OR ro.C_TRANSM = salesCode) 
	   AND (`fuelType` = '' OR IFNULL(ro.C_FUEL_TYPE,'') = `fuelType`)    
	   AND (roOpenDateFrom IS NULL OR DATE(ro.T_START_JOURNEY) BETWEEN roOpenDateFrom AND roOpenDateTo) 
		AND (caseOpenDateFrom IS NULL OR DATE(ro.T_FIRST_CREATED_CHERWELL_CASEID) BETWEEN caseOpenDateFrom AND caseOpenDateTo) 
		AND (caseCloseDateFrom IS NULL OR DATE(ro.T_LAST_CLOSE_CHERWELL_CASEID) BETWEEN caseCloseDateFrom AND caseCloseDateTo)
		AND (cumDays = '' OR ro.I_CUM_DAYS BETWEEN cumDaysRangeStart AND cumDaysRangeEnd)
		AND (daysDown = '' OR ro.I_DAYS_DOWN BETWEEN dayDownRangeStart AND dayDownRangeEnd)
		AND (repairCount = '' OR ro.I_REPAIR_COUNT BETWEEN repairCountRangeStart AND repairCountRangeEnd)
		AND (odometer = '' OR (CASE WHEN odometer = '-50' THEN (CAST(ro.Q_ODOMETER AS DECIMAL) < 50) WHEN odometer = '+50' THEN (CAST(ro.Q_ODOMETER AS DECIMAL) > 50) END))
		AND (witech = '' OR (CASE WHEN witech = 'true' THEN ro.T_WITECH_SCAN_EARLIEST IS NOT NULL WHEN witech = 'false' THEN ro.T_WITECH_SCAN_EARLIEST IS NULL END))	
		AND (wiadvisor = '' OR (CASE WHEN wiadvisor = 'true' THEN ro.T_WIADVISOR_SCAN IS NOT NULL WHEN wiadvisor = 'false' THEN ro.T_WIADVISOR_SCAN IS NULL END))	
		AND (roNumber = '' OR (CASE WHEN roNumber = 'true' THEN ro.I_RO IS NOT NULL WHEN roNumber = 'false' THEN ro.I_RO IS NULL END))	
		AND (forceClose = '' OR (CASE WHEN forceClose = 'true' THEN ro.L_FORCE_CLOSE IS NOT NULL WHEN forceClose = 'false' THEN ro.L_FORCE_CLOSE IS NULL END))	
		AND (caseEscalatedDateFrom IS NULL OR DATE(c.LASTESCALATEDDATETIME) BETWEEN caseEscalatedDateFrom AND caseEscalatedDateTo)
		AND (partsOrderedDateFrom IS NULL OR DATE(g.T_ORDER_CONFIRM) BETWEEN partsOrderedDateFrom AND partsOrderedDateTo)
		AND (partsShippedDateFrom IS NULL OR DATE(g.T_SHIPPED) BETWEEN partsShippedDateFrom AND partsShippedDateTo)
		AND (partsDeliveredDateFrom IS NULL OR DATE(g.T_DELIVERY) BETWEEN partsDeliveredDateFrom AND partsDeliveredDateTo)
	ORDER BY 
		  CASE WHEN sortBy ='vin' AND sortOrder ='ASC' THEN ro.I_VIN END ASC,
        CASE WHEN sortBy ='vin' AND sortOrder ='DESC' THEN ro.I_VIN END DESC,
        CASE WHEN sortBy ='model' AND sortOrder ='ASC' THEN ro.C_FAM END ASC,
        CASE WHEN sortBy ='model' AND sortOrder ='DESC' THEN ro.C_FAM END DESC,
        CASE WHEN sortBy ='year' AND sortOrder ='ASC' THEN ro.I_MOD_YR END ASC,
        CASE WHEN sortBy ='year' AND sortOrder ='DESC' THEN ro.I_MOD_YR END DESC,
        CASE WHEN sortBy ='engine' AND sortOrder ='ASC' THEN ro.C_ENGINE_SALES_CODE END ASC,
        CASE WHEN sortBy ='engine' AND sortOrder ='DESC' THEN ro.C_ENGINE_SALES_CODE END DESC,
        CASE WHEN sortBy ='fuelType' AND sortOrder ='ASC' THEN ro.C_FUEL_TYPE END ASC,
        CASE WHEN sortBy ='fuelType' AND sortOrder ='DESC' THEN ro.C_FUEL_TYPE END DESC,
        CASE WHEN sortBy ='dealerCode' AND sortOrder ='ASC' THEN ro.C_DLR END ASC,
        CASE WHEN sortBy ='dealerCode' AND sortOrder ='DESC' THEN ro.C_DLR END DESC,
        CASE WHEN sortBy ='roJourneyId' AND sortOrder ='ASC' THEN ro.I_RO_JOURNEY END ASC,
        CASE WHEN sortBy ='roJourneyId' AND sortOrder ='DESC' THEN ro.I_RO_JOURNEY END DESC,
        CASE WHEN sortBy ='roDate' AND sortOrder ='ASC' THEN ro.T_START_JOURNEY END ASC,
        CASE WHEN sortBy ='roDate' AND sortOrder ='DESC' THEN ro.T_START_JOURNEY END DESC,
	     CASE WHEN sortBy ='noOfDaysDown' AND sortOrder ='ASC' THEN ro.I_DAYS_DOWN END ASC,
        CASE WHEN sortBy ='noOfDaysDown' AND sortOrder ='DESC' THEN ro.I_DAYS_DOWN END DESC,
        CASE WHEN sortBy ='repairCount' AND sortOrder ='ASC' THEN ro.I_REPAIR_COUNT END ASC,
        CASE WHEN sortBy ='repairCount' AND sortOrder='DESC' THEN ro.I_REPAIR_COUNT END DESC,
        CASE WHEN sortBy ='odometer' AND sortOrder ='ASC' THEN CAST(ro.Q_ODOMETER AS DECIMAL) END ASC,
        CASE WHEN sortBy ='odometer' AND sortOrder ='DESC' THEN CAST(ro.Q_ODOMETER AS DECIMAL) END DESC,
        CASE WHEN sortBy ='cumDays' AND sortOrder ='ASC' THEN ro.I_CUM_DAYS END ASC,
        CASE WHEN sortBy ='cumDays' AND sortOrder ='DESC' THEN ro.I_CUM_DAYS END DESC,
        CASE WHEN sortBy ='starCaseId' AND sortOrder ='ASC' THEN ro.I_FIRST_CHERWELL_CASEID END ASC,
        CASE WHEN sortBy ='starCaseId' AND sortOrder ='DESC' THEN ro.I_FIRST_CHERWELL_CASEID END DESC,
        CASE WHEN sortBy ='caseOpenDate' AND sortOrder ='ASC' THEN ro.T_FIRST_CREATED_CHERWELL_CASEID END ASC,
        CASE WHEN sortBy ='caseOpenDate' AND sortOrder ='DESC' THEN ro.T_FIRST_CREATED_CHERWELL_CASEID END DESC,
        CASE WHEN sortBy ='status' AND sortOrder ='ASC' THEN ro.L_CURRENT_RO_STATUS END ASC,
        CASE WHEN sortBy ='status' AND sortOrder ='DESC' THEN ro.L_CURRENT_RO_STATUS END DESC
	LIMIT pageOffset,pageSize;
	
END IF;
	
	-- return total number of records
	SELECT COUNT(DISTINCT ro.I_VIN) AS Total
	FROM RO_JOURNEY_OPEN ro
	LEFT JOIN GPOP_DATA g ON ro.I_RO_JOURNEY=g.I_RO_JOURNEY AND ro.I_VIN=g.I_VIN AND g.C_DLR=ro.C_DLR
	LEFT JOIN CHERWELL_CASE_PART3 c ON c.I_RO_JOURNEY=ro.I_RO_JOURNEY AND c.I_VIN=ro.I_VIN AND c.C_DLR=ro.C_DLR
	WHERE ro.C_DLR NOT IN (SELECT C_DLR FROM EXCLUDED_DEALERS) -- Excluded Test Dealers
		AND IFNULL(ro.I_MOD_YR,'')!='' AND IFNULL(ro.C_FAM,'')!='' AND IFNULL(ro.C_FUEL_TYPE,'')!='' -- Excluded Competitive Vehicles
		AND  ro.C_DLR_BUSINESS != 'I' -- Excluded International Dealers
    	AND IFNULL(ro.L_IS_NVP,'N')!='Y'
	 AND (dealerCode = '' OR FIND_IN_SET(ro.C_DLR,dealerCode))
		AND (businessCenter = '' OR FIND_IN_SET(ro.N_BUSINESS_CENTER,businessCenter))
		AND (year = '' OR FIND_IN_SET(ro.I_MOD_YR,year))
		AND (model = '' OR FIND_IN_SET(ro.C_FAM,model))
		AND (`engine` = '' OR FIND_IN_SET(ro.C_ENGINE_SALES_CODE,`engine`))
		AND (`status` = '' OR ro.L_CURRENT_RO_STATUS = `status`) 
	   AND (salesCode = '' OR ro.C_TRANSM = salesCode) 
	   AND (`fuelType` = '' OR IFNULL(ro.C_FUEL_TYPE,'') = `fuelType`)    
	   AND (roOpenDateFrom IS NULL OR DATE(ro.T_START_JOURNEY) BETWEEN roOpenDateFrom AND roOpenDateTo) 
		AND (caseOpenDateFrom IS NULL OR DATE(ro.T_FIRST_CREATED_CHERWELL_CASEID) BETWEEN caseOpenDateFrom AND caseOpenDateTo) 
		AND (caseCloseDateFrom IS NULL OR DATE(ro.T_LAST_CLOSE_CHERWELL_CASEID) BETWEEN caseCloseDateFrom AND caseCloseDateTo)
		AND (cumDays = '' OR ro.I_CUM_DAYS BETWEEN cumDaysRangeStart AND cumDaysRangeEnd)
		AND (daysDown = '' OR ro.I_DAYS_DOWN BETWEEN dayDownRangeStart AND dayDownRangeEnd)
		AND (repairCount = '' OR ro.I_REPAIR_COUNT BETWEEN repairCountRangeStart AND repairCountRangeEnd)
		AND (odometer = '' OR (CASE WHEN odometer = '-50' THEN (CAST(ro.Q_ODOMETER AS DECIMAL) < 50) WHEN odometer = '+50' THEN (CAST(ro.Q_ODOMETER AS DECIMAL) > 50) END))
		AND (witech = '' OR (CASE WHEN witech = 'true' THEN ro.T_WITECH_SCAN_EARLIEST IS NOT NULL WHEN witech = 'false' THEN ro.T_WITECH_SCAN_EARLIEST IS NULL END))	
		AND (wiadvisor = '' OR (CASE WHEN wiadvisor = 'true' THEN ro.T_WIADVISOR_SCAN IS NOT NULL WHEN wiadvisor = 'false' THEN ro.T_WIADVISOR_SCAN IS NULL END))	
		AND (roNumber = '' OR (CASE WHEN roNumber = 'true' THEN ro.I_RO IS NOT NULL WHEN roNumber = 'false' THEN ro.I_RO IS NULL END))	
		AND (forceClose = '' OR (CASE WHEN forceClose = 'true' THEN ro.L_FORCE_CLOSE IS NOT NULL WHEN forceClose = 'false' THEN ro.L_FORCE_CLOSE IS NULL END))	
		AND (caseEscalatedDateFrom IS NULL OR DATE(c.LASTESCALATEDDATETIME) BETWEEN caseEscalatedDateFrom AND caseEscalatedDateTo)
		AND (partsOrderedDateFrom IS NULL OR DATE(g.T_ORDER_CONFIRM) BETWEEN partsOrderedDateFrom AND partsOrderedDateTo)
		AND (partsShippedDateFrom IS NULL OR DATE(g.T_SHIPPED) BETWEEN partsShippedDateFrom AND partsShippedDateTo)
		AND (partsDeliveredDateFrom IS NULL OR DATE(g.T_DELIVERY) BETWEEN partsDeliveredDateFrom AND partsDeliveredDateTo)
	;

END
============================
CREATE DEFINER=`t12247adm`@`%` PROCEDURE `db_12247_d_001_instance_1`.`PROC_GET_VEH_IN_FOR_SERVICE_TEST`(
	IN `businessCenter` VARCHAR(50),
	IN `dealerCode` VARCHAR(50),
	IN `year` VARCHAR(10),
	IN `model` VARCHAR(50),
	IN `engine` VARCHAR(50),
	IN `roOpenDateFrom` DATE,
	IN `roOpenDateTo` DATE,
	IN `caseOpenDateFrom` DATE,
	IN `caseOpenDateTo` DATE,
	IN `caseCloseDateFrom` DATE,
	IN `caseCloseDateTo` DATE,
	IN `status` VARCHAR(50),
	IN `salesCode` VARCHAR(3),
	IN `fuelType` VARCHAR(50),
	IN `cumDays` VARCHAR(10),
	IN `daysDown` VARCHAR(10),
	IN `repairCount` VARCHAR(10),
	IN `odometer` VARCHAR(50),
	IN `witech` VARCHAR(5),
	IN `wiadvisor` VARCHAR(5),
	IN `roNumber` VARCHAR(5),
	IN `forceClose` VARCHAR(5),
	IN `caseEscalatedDateFrom` DATE,
	IN `caseEscalatedDateTo` DATE,
	IN `partsOrderedDateFrom` DATE,
	IN `partsOrderedDateTo` DATE,
	IN `partsShippedDateFrom` DATE,
	IN `partsShippedDateTo` DATE,
	IN `partsDeliveredDateFrom` DATE,
	IN `partsDeliveredDateTo` DATE,
	IN `pageOffset` INT,
	IN `pageSize` INT,
	IN `sortBy` VARCHAR(50),
	IN `sortOrder` VARCHAR(50)
)
    SQL SECURITY INVOKER
BEGIN

DECLARE dayDownRangeStart INT;
DECLARE dayDownRangeEnd INT;
DECLARE cumDaysRangeStart INT;
DECLARE cumDaysRangeEnd INT;
DECLARE repairCountRangeStart INT;
DECLARE repairCountRangeEnd INT;


SET dayDownRangeStart = SUBSTRING_INDEX(daysDown, '-', 1);
SET dayDownRangeEnd = SUBSTRING_INDEX(daysDown,'-',-1);

SET cumDaysRangeStart = SUBSTRING_INDEX(cumDays,'-',1);
SET cumDaysRangeEnd = SUBSTRING_INDEX(cumDays,'-',-1);

SET repairCountRangeStart = SUBSTRING_INDEX(repairCount,'-',1);
SET repairCountRangeEnd = SUBSTRING_INDEX(repairCount,'-',-1);

SET pageSize = IF(pageSize=0, 10,pageSize);

 IF sortBy = '' THEN
	-- return current page records only without sort
	SELECT DISTINCT ro.I_RO_JOURNEY as roJourneyId,
			 ro.I_VIN AS vin,
			 ro.C_FAM AS model,
			 ro.I_MOD_YR AS year,
			 FLOOR(ro.Q_ODOMETER) AS odometer,
			 ro.N_DLR AS dealer,
			 ro.T_START_JOURNEY AS roDate,
			 ro.I_DAYS_DOWN AS noOfDaysDown,
			 ro.I_REPAIR_COUNT AS repairCount,
			 ro.I_CUM_DAYS AS cumDays,
			 ro.L_CURRENT_RO_STATUS AS `status`,
			 ro.I_FIRST_CHERWELL_CASEID AS starCaseId, 
			 ro.T_FIRST_CREATED_CHERWELL_CASEID AS caseOpenDate,
			 ro.I_DLR_PH_NMBR AS dealerContact,
			 ro.C_DLR AS dealerCode,
			 ro.C_FUEL_TYPE AS `fuelType`,
			 ro.C_ENGINE_SALES_CODE AS `engine`
	FROM RO_JOURNEY_OPEN ro
	LEFT JOIN GPOP_DATA g ON ro.I_RO_JOURNEY=g.I_RO_JOURNEY AND ro.I_VIN=g.I_VIN AND g.C_DLR=ro.C_DLR
	LEFT JOIN CHERWELL_CASE_PART3 c ON c.I_RO_JOURNEY=ro.I_RO_JOURNEY AND c.I_VIN=ro.I_VIN AND c.C_DLR=ro.C_DLR
	WHERE ro.C_DLR NOT IN (SELECT C_DLR FROM EXCLUDED_DEALERS) -- Excluded Test Dealers
		AND IFNULL(ro.I_MOD_YR,'')!='' AND IFNULL(ro.C_FAM,'')!='' AND IFNULL(ro.C_FUEL_TYPE,'')!='' -- Excluded Competitive Vehicles
		AND  ro.C_DLR_BUSINESS != 'I' -- Excluded International Dealers
	 AND IFNULL(ro.L_IS_NVP,'N')!='Y'
    AND (`year` = '' OR ro.I_MOD_YR = `year`) 
    AND	(model = '' OR ro.C_FAM = model)
    AND	(`engine` = '' OR ro.C_ENGINE_SALES_CODE = `engine`)
	 AND  (`status` = '' OR ro.L_CURRENT_RO_STATUS = `status`) 
    AND	(salesCode = '' OR ro.C_TRANSM = salesCode) 
    AND	(`fuelType` = '' OR IFNULL(ro.C_FUEL_TYPE,'') = `fuelType`)
    AND (businessCenter = '' OR ro.N_BUSINESS_CENTER = businessCenter) 
    AND (dealerCode = '' OR ro.C_DLR = dealerCode) 
    AND (roOpenDateFrom IS NULL OR DATE(ro.T_START_JOURNEY) BETWEEN roOpenDateFrom AND roOpenDateTo) 
	 AND (caseOpenDateFrom IS NULL OR DATE(ro.T_FIRST_CREATED_CHERWELL_CASEID) BETWEEN caseOpenDateFrom AND caseOpenDateTo) 
	 AND (caseCloseDateFrom IS NULL OR DATE(ro.T_LAST_CLOSE_CHERWELL_CASEID) BETWEEN caseCloseDateFrom AND caseCloseDateTo)
	 AND (cumDays = '' OR ro.I_CUM_DAYS BETWEEN cumDaysRangeStart AND cumDaysRangeEnd)
	 AND (daysDown = '' OR ro.I_DAYS_DOWN BETWEEN dayDownRangeStart AND dayDownRangeEnd)
	 AND (repairCount = '' OR ro.I_REPAIR_COUNT BETWEEN repairCountRangeStart AND repairCountRangeEnd)
	 AND (odometer = '' OR (CASE WHEN odometer = '-50' THEN (CAST(ro.Q_ODOMETER AS DECIMAL) < 50) WHEN odometer = '+50' THEN (CAST(ro.Q_ODOMETER AS DECIMAL) > 50) END))
	 AND (witech = '' OR (CASE WHEN witech = 'true' THEN ro.T_WITECH_SCAN_EARLIEST IS NOT NULL WHEN witech = 'false' THEN ro.T_WITECH_SCAN_EARLIEST IS NULL END))	
	 AND (wiadvisor = '' OR (CASE WHEN wiadvisor = 'true' THEN ro.T_WIADVISOR_SCAN IS NOT NULL WHEN wiadvisor = 'false' THEN ro.T_WIADVISOR_SCAN IS NULL END))	
	 AND (roNumber = '' OR (CASE WHEN roNumber = 'true' THEN ro.I_RO IS NOT NULL WHEN roNumber = 'false' THEN ro.I_RO IS NULL END))	
	 AND (forceClose = '' OR (CASE WHEN forceClose = 'true' THEN ro.L_FORCE_CLOSE IS NOT NULL WHEN forceClose = 'false' THEN ro.L_FORCE_CLOSE IS NULL END))	
		
	AND (caseEscalatedDateFrom IS NULL OR DATE(c.LASTESCALATEDDATETIME) BETWEEN caseEscalatedDateFrom AND caseEscalatedDateTo)
	AND (partsOrderedDateFrom IS NULL OR DATE(g.T_ORDER_CONFIRM) BETWEEN partsOrderedDateFrom AND partsOrderedDateTo)
	AND (partsShippedDateFrom IS NULL OR DATE(g.T_SHIPPED) BETWEEN partsShippedDateFrom AND partsShippedDateTo)
	AND (partsDeliveredDateFrom IS NULL OR DATE(g.T_DELIVERY) BETWEEN partsDeliveredDateFrom AND partsDeliveredDateTo)
	ORDER BY ro.T_START_JOURNEY DESC
	LIMIT pageOffset,pageSize;

ELSE
	-- return current page records only with sort
	SELECT DISTINCT ro.I_RO_JOURNEY as roJourneyId,
			 ro.I_VIN AS vin,
			 ro.C_FAM AS model,
			 ro.I_MOD_YR AS year,
			 FLOOR(ro.Q_ODOMETER) AS odometer,
			 ro.N_DLR AS dealer,
			 ro.T_START_JOURNEY AS roDate,
			 ro.I_DAYS_DOWN AS noOfDaysDown,
			 ro.I_REPAIR_COUNT AS repairCount,
			 ro.I_CUM_DAYS AS cumDays,
			 ro.L_CURRENT_RO_STATUS AS `status`,
			 ro.I_FIRST_CHERWELL_CASEID AS starCaseId, 
			 ro.T_FIRST_CREATED_CHERWELL_CASEID AS caseOpenDate,
			 ro.I_DLR_PH_NMBR AS dealerContact,
			 ro.C_DLR AS dealerCode,
			 ro.C_FUEL_TYPE AS `fuelType`,
			 ro.C_ENGINE_SALES_CODE AS `engine`
	FROM RO_JOURNEY_OPEN ro
	LEFT JOIN GPOP_DATA g ON ro.I_RO_JOURNEY=g.I_RO_JOURNEY AND ro.I_VIN=g.I_VIN AND g.C_DLR=ro.C_DLR
	LEFT JOIN CHERWELL_CASE_PART3 c ON c.I_RO_JOURNEY=ro.I_RO_JOURNEY AND c.I_VIN=ro.I_VIN AND c.C_DLR=ro.C_DLR
	WHERE ro.C_DLR NOT IN (SELECT C_DLR FROM EXCLUDED_DEALERS) -- Excluded Test Dealers
		AND IFNULL(ro.I_MOD_YR,'')!='' AND IFNULL(ro.C_FAM,'')!='' AND IFNULL(ro.C_FUEL_TYPE,'')!='' -- Excluded Competitive Vehicles
		AND  ro.C_DLR_BUSINESS != 'I' -- Excluded International Dealers
    AND IFNULL(ro.L_IS_NVP,'N')!='Y'
	 AND (`year` = '' OR ro.I_MOD_YR = `year`) 
    AND	(model = '' OR ro.C_FAM = model)
    AND	(`engine` = '' OR ro.C_ENGINE_SALES_CODE = `engine`)
	 AND (`status` = '' OR ro.L_CURRENT_RO_STATUS = `status`) 
    AND	(salesCode = '' OR ro.C_TRANSM = salesCode) 
    AND	(`fuelType` = '' OR IFNULL(ro.C_FUEL_TYPE,'') = `fuelType`)
    AND (businessCenter = '' OR ro.N_BUSINESS_CENTER = businessCenter) 
    AND	(dealerCode = '' OR ro.C_DLR = dealerCode) 
    AND (roOpenDateFrom IS NULL OR DATE(ro.T_START_JOURNEY) BETWEEN roOpenDateFrom AND roOpenDateTo) 
	 AND (caseOpenDateFrom IS NULL OR DATE(ro.T_FIRST_CREATED_CHERWELL_CASEID) BETWEEN caseOpenDateFrom AND caseOpenDateTo) 
	 AND (caseCloseDateFrom IS NULL OR DATE(ro.T_LAST_CLOSE_CHERWELL_CASEID) BETWEEN caseCloseDateFrom AND caseCloseDateTo)
	 AND (cumDays = '' OR ro.I_CUM_DAYS BETWEEN cumDaysRangeStart AND cumDaysRangeEnd)
	 AND (daysDown = '' OR ro.I_DAYS_DOWN BETWEEN dayDownRangeStart AND dayDownRangeEnd)
	 AND (repairCount = '' OR ro.I_REPAIR_COUNT BETWEEN repairCountRangeStart AND repairCountRangeEnd)
	 AND (odometer = '' OR (CASE WHEN odometer = '-50' THEN (CAST(ro.Q_ODOMETER AS DECIMAL) < 50) WHEN odometer = '+50' THEN (CAST(ro.Q_ODOMETER AS DECIMAL) > 50) END))
	 AND (witech = '' OR (CASE WHEN witech = 'true' THEN ro.T_WITECH_SCAN_EARLIEST IS NOT NULL WHEN witech = 'false' THEN ro.T_WITECH_SCAN_EARLIEST IS NULL END))	
	 AND (wiadvisor = '' OR (CASE WHEN wiadvisor = 'true' THEN ro.T_WIADVISOR_SCAN IS NOT NULL WHEN wiadvisor = 'false' THEN ro.T_WIADVISOR_SCAN IS NULL END))	
	 AND (roNumber = '' OR (CASE WHEN roNumber = 'true' THEN ro.I_RO IS NOT NULL WHEN roNumber = 'false' THEN ro.I_RO IS NULL END))	
	 AND (forceClose = '' OR (CASE WHEN forceClose = 'true' THEN ro.L_FORCE_CLOSE IS NOT NULL WHEN forceClose = 'false' THEN ro.L_FORCE_CLOSE IS NULL END))	
	
	AND (caseEscalatedDateFrom IS NULL OR DATE(c.LASTESCALATEDDATETIME) BETWEEN caseEscalatedDateFrom AND caseEscalatedDateTo)
	AND (partsOrderedDateFrom IS NULL OR DATE(g.T_ORDER_CONFIRM) BETWEEN partsOrderedDateFrom AND partsOrderedDateTo)
	AND (partsShippedDateFrom IS NULL OR DATE(g.T_SHIPPED) BETWEEN partsShippedDateFrom AND partsShippedDateTo)
	AND (partsDeliveredDateFrom IS NULL OR DATE(g.T_DELIVERY) BETWEEN partsDeliveredDateFrom AND partsDeliveredDateTo)
	ORDER BY 
		  CASE WHEN sortBy ='vin' AND sortOrder ='ASC' THEN ro.I_VIN END ASC,
        CASE WHEN sortBy ='vin' AND sortOrder ='DESC' THEN ro.I_VIN END DESC,
        CASE WHEN sortBy ='model' AND sortOrder ='ASC' THEN ro.C_FAM END ASC,
        CASE WHEN sortBy ='model' AND sortOrder ='DESC' THEN ro.C_FAM END DESC,
        CASE WHEN sortBy ='year' AND sortOrder ='ASC' THEN ro.I_MOD_YR END ASC,
        CASE WHEN sortBy ='year' AND sortOrder ='DESC' THEN ro.I_MOD_YR END DESC,
        CASE WHEN sortBy ='engine' AND sortOrder ='ASC' THEN ro.C_ENGINE_SALES_CODE END ASC,
        CASE WHEN sortBy ='engine' AND sortOrder ='DESC' THEN ro.C_ENGINE_SALES_CODE END DESC,
        CASE WHEN sortBy ='fuelType' AND sortOrder ='ASC' THEN ro.C_FUEL_TYPE END ASC,
        CASE WHEN sortBy ='fuelType' AND sortOrder ='DESC' THEN ro.C_FUEL_TYPE END DESC,
        CASE WHEN sortBy ='dealerCode' AND sortOrder ='ASC' THEN ro.C_DLR END ASC,
        CASE WHEN sortBy ='dealerCode' AND sortOrder ='DESC' THEN ro.C_DLR END DESC,
        CASE WHEN sortBy ='roJourneyId' AND sortOrder ='ASC' THEN ro.I_RO_JOURNEY END ASC,
        CASE WHEN sortBy ='roJourneyId' AND sortOrder ='DESC' THEN ro.I_RO_JOURNEY END DESC,
        CASE WHEN sortBy ='roDate' AND sortOrder ='ASC' THEN ro.T_START_JOURNEY END ASC,
        CASE WHEN sortBy ='roDate' AND sortOrder ='DESC' THEN ro.T_START_JOURNEY END DESC,
	     CASE WHEN sortBy ='noOfDaysDown' AND sortOrder ='ASC' THEN ro.I_DAYS_DOWN END ASC,
        CASE WHEN sortBy ='noOfDaysDown' AND sortOrder ='DESC' THEN ro.I_DAYS_DOWN END DESC,
        CASE WHEN sortBy ='repairCount' AND sortOrder ='ASC' THEN ro.I_REPAIR_COUNT END ASC,
        CASE WHEN sortBy ='repairCount' AND sortOrder='DESC' THEN ro.I_REPAIR_COUNT END DESC,
        CASE WHEN sortBy ='odometer' AND sortOrder ='ASC' THEN CAST(ro.Q_ODOMETER AS DECIMAL) END ASC,
        CASE WHEN sortBy ='odometer' AND sortOrder ='DESC' THEN CAST(ro.Q_ODOMETER AS DECIMAL) END DESC,
        CASE WHEN sortBy ='cumDays' AND sortOrder ='ASC' THEN ro.I_CUM_DAYS END ASC,
        CASE WHEN sortBy ='cumDays' AND sortOrder ='DESC' THEN ro.I_CUM_DAYS END DESC,
        CASE WHEN sortBy ='starCaseId' AND sortOrder ='ASC' THEN ro.I_FIRST_CHERWELL_CASEID END ASC,
        CASE WHEN sortBy ='starCaseId' AND sortOrder ='DESC' THEN ro.I_FIRST_CHERWELL_CASEID END DESC,
        CASE WHEN sortBy ='caseOpenDate' AND sortOrder ='ASC' THEN ro.T_FIRST_CREATED_CHERWELL_CASEID END ASC,
        CASE WHEN sortBy ='caseOpenDate' AND sortOrder ='DESC' THEN ro.T_FIRST_CREATED_CHERWELL_CASEID END DESC,
        CASE WHEN sortBy ='status' AND sortOrder ='ASC' THEN ro.L_CURRENT_RO_STATUS END ASC,
        CASE WHEN sortBy ='status' AND sortOrder ='DESC' THEN ro.L_CURRENT_RO_STATUS END DESC
	LIMIT pageOffset,pageSize;
	
END IF;
	
	-- return total number of records
	SELECT COUNT(DISTINCT ro.I_VIN) AS Total
	FROM RO_JOURNEY_OPEN ro
	LEFT JOIN GPOP_DATA g ON ro.I_RO_JOURNEY=g.I_RO_JOURNEY AND ro.I_VIN=g.I_VIN AND g.C_DLR=ro.C_DLR
	LEFT JOIN CHERWELL_CASE_PART3 c ON c.I_RO_JOURNEY=ro.I_RO_JOURNEY AND c.I_VIN=ro.I_VIN AND c.C_DLR=ro.C_DLR
	WHERE ro.C_DLR NOT IN (SELECT C_DLR FROM EXCLUDED_DEALERS) -- Excluded Test Dealers
		AND IFNULL(ro.I_MOD_YR,'')!='' AND IFNULL(ro.C_FAM,'')!='' AND IFNULL(ro.C_FUEL_TYPE,'')!='' -- Excluded Competitive Vehicles
		AND  ro.C_DLR_BUSINESS != 'I' -- Excluded International Dealers
    AND IFNULL(ro.L_IS_NVP,'N')!='Y'
	 AND (`year` = '' OR ro.I_MOD_YR = `year`) 
    AND	(model = '' OR ro.C_FAM = model)
    AND	(`engine` = '' OR ro.C_ENGINE_SALES_CODE = `engine`)
	 AND (`status` = '' OR ro.L_CURRENT_RO_STATUS = `status`) 
    AND	(salesCode = '' OR ro.C_TRANSM = salesCode) 
    AND	(`fuelType` = '' OR IFNULL(ro.C_FUEL_TYPE,'') = `fuelType`)
    AND (businessCenter = '' OR ro.N_BUSINESS_CENTER = businessCenter) 
    AND	(dealerCode = '' OR ro.C_DLR = dealerCode) 
    AND (roOpenDateFrom IS NULL OR DATE(ro.T_START_JOURNEY) BETWEEN roOpenDateFrom AND roOpenDateTo) 
	 AND (caseOpenDateFrom IS NULL OR DATE(ro.T_FIRST_CREATED_CHERWELL_CASEID) BETWEEN caseOpenDateFrom AND caseOpenDateTo) 
	 AND (caseCloseDateFrom IS NULL OR DATE(ro.T_LAST_CLOSE_CHERWELL_CASEID) BETWEEN caseCloseDateFrom AND caseCloseDateTo)
	 AND (cumDays = '' OR ro.I_CUM_DAYS BETWEEN cumDaysRangeStart AND cumDaysRangeEnd)
	 AND (daysDown = '' OR ro.I_DAYS_DOWN BETWEEN dayDownRangeStart AND dayDownRangeEnd)
	 AND (repairCount = '' OR ro.I_REPAIR_COUNT BETWEEN repairCountRangeStart AND repairCountRangeEnd)
	 AND (odometer = '' OR (CASE WHEN odometer = '-50' THEN (CAST(ro.Q_ODOMETER AS DECIMAL) < 50) WHEN odometer = '+50' THEN (CAST(ro.Q_ODOMETER AS DECIMAL) > 50) END))
	 AND (witech = '' OR (CASE WHEN witech = 'true' THEN ro.T_WITECH_SCAN_EARLIEST IS NOT NULL WHEN witech = 'false' THEN ro.T_WITECH_SCAN_EARLIEST IS NULL END))	
	 AND (wiadvisor = '' OR (CASE WHEN wiadvisor = 'true' THEN ro.T_WIADVISOR_SCAN IS NOT NULL WHEN wiadvisor = 'false' THEN ro.T_WIADVISOR_SCAN IS NULL END))	
	 AND (roNumber = '' OR (CASE WHEN roNumber = 'true' THEN ro.I_RO IS NOT NULL WHEN roNumber = 'false' THEN ro.I_RO IS NULL END))	
	 AND (forceClose = '' OR (CASE WHEN forceClose = 'true' THEN ro.L_FORCE_CLOSE IS NOT NULL WHEN forceClose = 'false' THEN ro.L_FORCE_CLOSE IS NULL END))	
	
	AND (caseEscalatedDateFrom IS NULL OR DATE(c.LASTESCALATEDDATETIME) BETWEEN caseEscalatedDateFrom AND caseEscalatedDateTo)
	AND (partsOrderedDateFrom IS NULL OR DATE(g.T_ORDER_CONFIRM) BETWEEN partsOrderedDateFrom AND partsOrderedDateTo)
	AND (partsShippedDateFrom IS NULL OR DATE(g.T_SHIPPED) BETWEEN partsShippedDateFrom AND partsShippedDateTo)
	AND (partsDeliveredDateFrom IS NULL OR DATE(g.T_DELIVERY) BETWEEN partsDeliveredDateFrom AND partsDeliveredDateTo)
	;


END
=================================
CREATE DEFINER=`t12247adm`@`%` PROCEDURE `db_12247_d_001_instance_1`.`PROC_GET_VEH_RO_HISTORY`(
	IN `VIN` VARCHAR(50)
)
    SQL SECURITY INVOKER
BEGIN
	SELECT I_RO_JOURNEY AS roJourneyId,I_RO AS roNumber,T_START_JOURNEY AS roOpenDate,
		T_END_JOURNEY AS roCloseDate, T_WITECH_SCAN_EARLIEST AS wiTechScanEarliest, 
		(CASE WHEN T_END_JOURNEY IS NULL THEN 'Active' ELSE 'Closed' END) AS `status`,
		ro.I_FIRST_CHERWELL_CASEID AS caseNumber,
		ro.N_SRCE_ADD AS sourceSystem
	FROM RO_JOURNEY ro
	WHERE ro.I_VIN = VIN ORDER BY T_START_JOURNEY desc;
END
==============================
CREATE DEFINER=`t12247adm`@`%` PROCEDURE `db_12247_d_001_instance_1`.`PROC_GET_WIADVISOR_DETAILS`()
    SQL SECURITY INVOKER
BEGIN
	SELECT veh.I_RO_JOURNEY,veh.I_VIN,veh.C_DLR,veh.Q_ODOMETER,veh.T_SESSION,
	veh.C_WAITER_FLAG,service.*,ecu.*,dtc.*,warn_msgs.*,contracts.*
	FROM wiADVISOR_VEH_DATA As veh
	LEFT JOIN wiADVISOR_SELECTED_SERVICE As service ON veh.I_RO_JOURNEY = service.I_RO_JOURNEY AND veh.T_session = service.T_SESSION
	LEFT JOIN wiADVISOR_ECU_DATA  As ecu ON veh.I_RO_JOURNEY = ecu.I_RO_JOURNEY AND veh.T_session = ecu.T_SESSION
	LEFT JOIN wiADVISOR_DTC_DATA  As dtc ON ecu.I_RO_JOURNEY = dtc.I_RO_JOURNEY AND ecu.T_session = dtc.T_SESSION AND ecu.I_ECU = dtc.I_ECU
	LEFT JOIN wiADVISOR_VEH_WARNING_MSGS  As warn_msgs ON veh.I_RO_JOURNEY = warn_msgs.I_RO_JOURNEY AND veh.T_session = warn_msgs.T_SESSION
	LEFT JOIN wiADVISOR_SERVICE_CONTRACTS  As contracts ON veh.I_RO_JOURNEY = contracts.I_RO_JOURNEY AND veh.T_session = contracts.T_SESSION
	limit 10;
END
===============================
CREATE DEFINER=`t12247adm`@`%` PROCEDURE `db_12247_d_001_instance_1`.`PROC_GET_WIADVISOR_SCANS`(
	IN `vin` VARCHAR(50),
	IN `roJourneyId` INT,
	IN `templateId` VARCHAR(50),
	IN `exportToExcel` BIT
)
    SQL SECURITY INVOKER
BEGIN
	IF exportToExcel=1 THEN	
		SELECT veh.I_VIN As vin,veh.C_DLR As dealer,veh.Q_ODOMETER As odometer,veh.T_SESSION As session_time,
		ecu.I_ECU AS ECU,ecu.X_DESC AS ecu_description,dtc.C_DTC AS DTC,dtc.X_DESC AS dtc_description, dtc.X_STATUS AS status,service.X_SERVICE_NAME As service_name,
		service.X_COMPLAIN As complain,service.X_COMMENT As comment,warn_msgs.X_WARNING_MSG As warning_message,
		contracts.C_SERVICE_CONTRACT As service_contract,contracts.X_SERVICE_CONTRACT_DESC As contract_description
		FROM wiADVISOR_VEH_DATA As veh
		LEFT JOIN wiADVISOR_SELECTED_SERVICE As service ON veh.I_RO_JOURNEY = service.I_RO_JOURNEY AND veh.T_session = service.T_SESSION
		LEFT JOIN wiADVISOR_ECU_DATA  As ecu ON veh.I_RO_JOURNEY = ecu.I_RO_JOURNEY AND veh.T_session = ecu.T_SESSION
		LEFT JOIN wiADVISOR_DTC_DATA  As dtc ON ecu.I_RO_JOURNEY = dtc.I_RO_JOURNEY AND ecu.T_session = dtc.T_SESSION AND ecu.I_ECU = dtc.I_ECU
		LEFT JOIN wiADVISOR_VEH_WARNING_MSGS  As warn_msgs ON veh.I_RO_JOURNEY = warn_msgs.I_RO_JOURNEY AND veh.T_session = warn_msgs.T_SESSION
		LEFT JOIN wiADVISOR_SERVICE_CONTRACTS  As contracts ON veh.I_RO_JOURNEY = contracts.I_RO_JOURNEY AND veh.T_session = contracts.T_SESSION
		WHERE veh.I_VIN=vin AND (roJourneyId=0 OR veh.I_RO_JOURNEY = roJourneyId)
		ORDER BY veh.T_session DESC;
	ELSE
		SELECT veh.I_VIN As vin,veh.I_RO_JOURNEY As roJourneyId,veh.C_DLR As dealer,veh.Q_ODOMETER As odometer,veh.T_SESSION As session_time,
		ecu.I_ECU AS ECU,ecu.X_DESC AS ecu_description,dtc.C_DTC AS DTC,dtc.X_DESC AS dtc_description, dtc.X_STATUS AS status,
		CASE WHEN (
				SELECT COUNT(1)
				FROM wiADVISOR_SELECTED_SERVICE s					
				WHERE s.I_RO_JOURNEY=veh.I_RO_JOURNEY AND s.T_SESSION=veh.T_SESSION 
			) > 0 THEN 1 ELSE 0 END AS isSelectedService,
		CASE WHEN (
				SELECT COUNT(1)
				FROM wiADVISOR_VEH_WARNING_MSGS w					
				WHERE w.I_RO_JOURNEY=veh.I_RO_JOURNEY AND w.T_SESSION=veh.T_SESSION 
			) > 0 THEN 1 ELSE 0 END AS isWarningMsg,
		CASE WHEN (
				SELECT COUNT(1)
				FROM wiADVISOR_SERVICE_CONTRACTS c					
				WHERE c.I_RO_JOURNEY=veh.I_RO_JOURNEY AND c.T_SESSION=veh.T_SESSION 
			) > 0 THEN 1 ELSE 0 END AS isServiceContracts
		FROM wiADVISOR_VEH_DATA As veh
		LEFT JOIN wiADVISOR_ECU_DATA  As ecu ON veh.I_RO_JOURNEY = ecu.I_RO_JOURNEY AND veh.T_SESSION = ecu.T_SESSION
		LEFT JOIN wiADVISOR_DTC_DATA  As dtc ON ecu.I_RO_JOURNEY = dtc.I_RO_JOURNEY AND ecu.T_SESSION = dtc.T_SESSION AND ecu.I_ECU = dtc.I_ECU
		WHERE veh.I_VIN=vin  AND (roJourneyId=0 OR veh.I_RO_JOURNEY = roJourneyId) AND veh.C_TEMPLATE_ID=templateId
		ORDER BY veh.T_session DESC;
	END IF;
END
======================================
CREATE DEFINER=`t12247adm`@`%` PROCEDURE `db_12247_d_001_instance_1`.`PROC_GET_WIADVISOR_SELECTED_SERVICE`(
	IN `vin` VARCHAR(50),
	IN `roJourneyId` INT
)
    SQL SECURITY INVOKER
BEGIN
	SELECT w.T_SESSION AS `session`,I_SERVICE As serviceId,X_SERVICE_NAME As service_name,X_COMMENT As comment,X_COMPLAIN As complain
	FROM wiADVISOR_SELECTED_SERVICE w
	INNER JOIN wiADVISOR_VEH_DATA wv ON wv.I_RO_JOURNEY=w.I_RO_JOURNEY AND wv.T_SESSION=w.T_SESSION
	WHERE wv.I_VIN=vin
		AND (roJourneyId = 0 OR w.I_RO_JOURNEY=roJourneyId);
END
===========================================
CREATE DEFINER=`t12247adm`@`%` PROCEDURE `db_12247_d_001_instance_1`.`PROC_GET_WIADVISOR_SERVICE_CONTRACT`(
	IN `vin` VARCHAR(50),
	IN `roJourneyId` INT
)
    SQL SECURITY INVOKER
BEGIN
	SELECT w.T_SESSION AS `session`,C_SERVICE_CONTRACT As contractId,X_SERVICE_CONTRACT_DESC As description,T_EFFECTIVE As effective_date,X_STATUS As status
	FROM wiADVISOR_SERVICE_CONTRACTS w
	INNER JOIN wiADVISOR_VEH_DATA wv ON wv.I_RO_JOURNEY=w.I_RO_JOURNEY AND wv.T_SESSION=w.T_SESSION AND wv.C_DLR=w.C_DLR
	WHERE wv.I_VIN=vin
		AND (roJourneyId = 0 OR w.I_RO_JOURNEY=roJourneyId);
END
===================================
CREATE DEFINER=`t12247adm`@`%` PROCEDURE `db_12247_d_001_instance_1`.`PROC_GET_WIADVISOR_WARNING_MSG`(
	IN `vin` VARCHAR(50),
	IN `roJourneyId` INT
)
    SQL SECURITY INVOKER
BEGIN
	
	SELECT w.T_SESSION AS `session`,I_SEQ As seq,X_WARNING_MSG As message 
	FROM wiADVISOR_VEH_WARNING_MSGS w
	INNER JOIN wiADVISOR_VEH_DATA wv ON wv.I_RO_JOURNEY=w.I_RO_JOURNEY AND wv.T_SESSION=w.T_SESSION
	WHERE wv.I_VIN=vin
		AND (roJourneyId = 0 OR w.I_RO_JOURNEY=roJourneyId);
END
================================
CREATE DEFINER=`t12247adm`@`%` PROCEDURE `db_12247_d_001_instance_1`.`PROC_GET_WITECH_SCANS`(
	IN `vin` VARCHAR(50),
	IN `roJourneyId` INT,
	IN `templateId` VARCHAR(50),
	IN `exportToExcel` INT
)
    SQL SECURITY INVOKER
BEGIN
IF exportToExcel=1 THEN
		SET templateId = IF(templateId IS NULL, '100_2',templateId);
		
		SELECT w.I_VIN AS vin,w.I_RO_JOURNEY AS roJourneyId, w.X_ENG AS engine, w.C_BODY AS body, w.C_DLR AS dealer, w.T_SESSION AS session, w.REGION AS region, w.Q_ODOMETER AS odometer, w.I_MOD_YR AS year,
			m.I_ECU AS ECU, m.X_ECU as ECUName, m.X_ORIG_VIN AS originalVIN, m.X_SW_PART_NO AS partNumber, m.X_SW_VER AS softwareVersion,
			n.C_DTC AS DTC, n.X_DESC AS DTCName, n.X_STATUS AS status, n.C_RAW_HEX_CODE AS HEXCode, n.B_WARNING_INDICATOR_REQUESTED warningIndicatorRequested,
			e.X_FREEZE_TYPE_NAME AS freezeTypeName,e.I_ADDNTL_INFO AS additionalId,f.X_NAME AS name,f.X_VALUE AS value,f.X_UNITS AS units,
			env.X_ENV_SNAP_TYPE AS envSnapType,env.X_NAME AS envName,env.X_VALUE AS envValue,env.X_UNITS AS envUnits 
		FROM wiTECH_VEH_DATA w 
			LEFT JOIN wiTECH_ECU_DATA m ON w.I_RO_JOURNEY=m.I_RO_JOURNEY AND w.T_SESSION=m.T_SESSION
			LEFT JOIN wiTECH_DTC_DATA n ON w.I_RO_JOURNEY=n.I_RO_JOURNEY AND w.T_SESSION=n.T_SESSION AND m.I_ECU=n.I_ECU
			LEFT JOIN wiTECH_DTC_SNAP_ENV_DATA env ON n.I_RO_JOURNEY=env.I_RO_JOURNEY AND n.T_SESSION=env.T_SESSION AND n.I_ECU=env.I_ECU AND n.C_DTC=env.C_DTC
			LEFT JOIN wiTECH_ECU_FF_DATA e ON n.I_RO_JOURNEY=e.I_RO_JOURNEY AND n.T_SESSION=e.T_SESSION AND n.I_ECU=e.I_ECU AND n.C_DTC=e.C_DTC
			LEFT JOIN wiTECH_ECU_FF_ADDNL_DATA f ON f.I_ADDNTL_INFO = e.I_ADDNTL_INFO
		WHERE w.I_VIN=vin AND (roJourneyId=0 OR w.I_RO_JOURNEY = roJourneyId) AND w.C_TEMPLATE_ID=templateId
		ORDER BY w.T_session DESC;
ELSEIF exportToExcel=2 THEN /* return count only*/
		SELECT COUNT(1) AS TotalRows
		FROM wiTECH_VEH_DATA w 
			LEFT JOIN wiTECH_ECU_DATA m ON w.I_RO_JOURNEY=m.I_RO_JOURNEY AND w.T_SESSION=m.T_SESSION
			LEFT JOIN wiTECH_DTC_DATA n ON w.I_RO_JOURNEY=n.I_RO_JOURNEY AND w.T_SESSION=n.T_SESSION AND m.I_ECU=n.I_ECU
			LEFT JOIN wiTECH_DTC_SNAP_ENV_DATA env ON n.I_RO_JOURNEY=env.I_RO_JOURNEY AND n.T_SESSION=env.T_SESSION AND n.I_ECU=env.I_ECU AND n.C_DTC=env.C_DTC
			LEFT JOIN wiTECH_ECU_FF_DATA e ON n.I_RO_JOURNEY=e.I_RO_JOURNEY AND n.T_SESSION=e.T_SESSION AND n.I_ECU=e.I_ECU AND n.C_DTC=e.C_DTC
			LEFT JOIN wiTECH_ECU_FF_ADDNL_DATA f ON f.I_ADDNTL_INFO = e.I_ADDNTL_INFO
		WHERE w.I_VIN=vin AND (roJourneyId=0 OR w.I_RO_JOURNEY = roJourneyId);
	ELSE
		SELECT w.I_VIN AS vin,w.I_RO_JOURNEY AS roJourneyId,w.X_ENG AS engine, w.C_BODY AS body, w.C_DLR AS dealer, w.T_SESSION AS session, w.REGION AS region, w.Q_ODOMETER AS odometer, w.I_MOD_YR AS year,
			m.I_ECU AS ECU, m.X_ECU as ECUName, m.X_ORIG_VIN AS originalVIN, m.X_SW_PART_NO AS partNumber, m.X_SW_VER AS softwareVersion,
			n.C_DTC AS DTC, n.X_DESC AS DTCName, n.X_STATUS AS status, n.C_RAW_HEX_CODE AS HEXCode, n.B_WARNING_INDICATOR_REQUESTED warningIndicatorRequested,
			(
				SELECT COUNT(1)
				FROM wiTECH_ECU_FF_DATA e
					INNER JOIN wiTECH_ECU_FF_ADDNL_DATA f ON f.I_ADDNTL_INFO = e.I_ADDNTL_INFO
				WHERE e.I_RO_JOURNEY=n.I_RO_JOURNEY AND e.T_SESSION=n.T_SESSION AND e.I_ECU=n.I_ECU AND e.C_DTC=n.C_DTC
			) AS FFDataCount,
			(
				SELECT COUNT(1)
				FROM wiTECH_DTC_SNAP_ENV_DATA e
				WHERE e.I_RO_JOURNEY=n.I_RO_JOURNEY AND e.T_SESSION=n.T_SESSION AND e.I_ECU=n.I_ECU AND e.C_DTC=n.C_DTC
			) AS EnvDataCount
		FROM wiTECH_VEH_DATA w 
			LEFT JOIN wiTECH_ECU_DATA m ON w.I_RO_JOURNEY=m.I_RO_JOURNEY AND w.T_SESSION=m.T_SESSION
			LEFT JOIN wiTECH_DTC_DATA n ON w.I_RO_JOURNEY=n.I_RO_JOURNEY AND w.T_SESSION=n.T_SESSION AND m.I_ECU=n.I_ECU
		WHERE w.I_VIN=vin AND (roJourneyId=0 OR w.I_RO_JOURNEY = roJourneyId) AND w.C_TEMPLATE_ID=templateId
		ORDER BY w.T_session DESC;
	END IF;
END
=================================
CREATE DEFINER=`t12247adm`@`%` PROCEDURE `db_12247_d_001_instance_1`.`PROC_HAS_VEHICLE_INFO`(
	IN `vin` VARCHAR(50)
)
    SQL SECURITY INVOKER
BEGIN
	SELECT C_FAM,I_MOD_YR,D_LAST_SERVICE,C_ENGINE_SALES_CODE,C_TRANSMISSION_SALES_CODE,C_RADIO_SALES_CODE,
		CASE WHEN C_FUEL_TYPE LIKE '%(%)%' THEN SUBSTRING_INDEX(SUBSTRING_INDEX(C_FUEL_TYPE, '(', -1),')',1) 
				ELSE C_FUEL_TYPE END AS C_FUEL_TYPE,
		C_FUEL_TYPE AS C_FUEL_TYPE_DESC
	FROM VEHICLE_MASTER 
	WHERE I_VIN=vin;
END
==========================================
CREATE DEFINER=`t12247adm`@`%` PROCEDURE `db_12247_d_001_instance_1`.`PROC_HAS_WITECH_FAILURES`()
    SQL SECURITY INVOKER
BEGIN

DECLARE FAILURE_THRESHOLD_COUNT INT;
DECLARE FAILURE_CHECK_INTERVAL INT;

DECLARE FAILED_MSG_COUNT INT;


	SELECT c.CONFIG_VALUE INTO FAILURE_THRESHOLD_COUNT FROM MONITOR_CONFIG c
	WHERE c.CONFIG_KEY = "wiTECH_FAILURE_THRESHOLD";
	
	SELECT c.CONFIG_VALUE INTO FAILURE_CHECK_INTERVAL FROM MONITOR_CONFIG c
	WHERE c.CONFIG_KEY = "wiTECH_FAILURE_CHECK_DURATION_HRS";
	
	SELECT COUNT(*) INTO FAILED_MSG_COUNT FROM TRANSACTION_LOG L
	WHERE L.N_STATUS = 'FAILED' 
	AND (L.N_SRCE = 'NAFTA-wiTech' OR L.N_SRCE = 'NAFTA-wiAdvisor')
	AND L.T_STMP_ADD >= DATE_SUB(NOW(),INTERVAL FAILURE_CHECK_INTERVAL HOUR); 
	
	SELECT
	IF(FAILED_MSG_COUNT > FAILURE_THRESHOLD_COUNT, true, false) as RESULT;

END
=======================
CREATE DEFINER=`t12247adm`@`%` PROCEDURE `db_12247_d_001_instance_1`.`PROC_INGEST_VEHICLE_INFO`(
	IN `vin` VARCHAR(50),
	IN `vehicleData` JSON
)
    SQL SECURITY INVOKER
BEGIN



BEGIN
SHOW ERRORS;
ROLLBACK;
END;





START TRANSACTION;



IF ((SELECT COUNT(1) FROM VEHICLE_MASTER V WHERE V.I_VIN = vin) = 0) THEN

-- VEHICLE DATA
INSERT INTO VEHICLE_MASTER
(`I_VIN`,
`C_FAM`,
`I_MOD_YR`,
`D_LAST_SERVICE`,
`C_FUEL_TYPE`,
`D_VHCL_INSERVICE`,
`D_VHCL_SOLD`,
`D_VHCL_BUILT`,
`C_ENGINE_SALES_CODE`,
`C_TRANSMISSION_SALES_CODE`,
`C_RADIO_SALES_CODE`,
`N_SRCE_ADD`,
`N_SRCE_UPDATE`,
`T_STMP_ADD`,
`T_STMP_UPDATE`,
`L_DELETE`)
VALUES
(vin,
NULLIF(JSON_UNQUOTE(JSON_EXTRACT(vehicleData, '$.FAMILY')), ''),
NULLIF(JSON_UNQUOTE(JSON_EXTRACT(vehicleData, '$.MODEL_YEAR')), ''),
NULL,
NULLIF(JSON_UNQUOTE(JSON_EXTRACT(vehicleData, '$.FUEL_TYPE')), ''),
NULLIF(JSON_UNQUOTE(JSON_EXTRACT(vehicleData, '$.VEHICAL_INSERVICE')), ''),
NULLIF(JSON_UNQUOTE(JSON_EXTRACT(vehicleData, '$.VEHICAL_SOLD')), ''),
NULLIF(JSON_UNQUOTE(JSON_EXTRACT(vehicleData, '$.BUILD_DATE')), ''),
NULLIF(JSON_UNQUOTE(JSON_EXTRACT(vehicleData, '$.ENGINE_SALES_CODE')), ''),
NULLIF(JSON_UNQUOTE(JSON_EXTRACT(vehicleData, '$.TRANSMISSION_SALES_CODE')), ''),
NULLIF(JSON_UNQUOTE(JSON_EXTRACT(vehicleData, '$.RADIO_SALES_CODE')), ''),
'ACES',
NULL,
CURRENT_TIMESTAMP(),
CURRENT_TIMESTAMP(),
'N');
END IF;


-- Add new Engine SalesCode if not available already
IF (
SELECT COUNT(1) FROM 
SALES_CODE_MASTER S 
WHERE S.SALES_CODE = NULLIF(JSON_UNQUOTE(JSON_EXTRACT(vehicleData, '$.ENGINE_SALES_CODE')), '')
AND S.MODEL_YEAR = NULLIF(JSON_UNQUOTE(JSON_EXTRACT(vehicleData, '$.MODEL_YEAR')), '')
)=0 THEN
INSERT INTO SALES_CODE_MASTER
(`SALES_CODE`,
`MODEL_YEAR`,
`SALES_CODE_TYPE_ID`,
`SALES_CODE_DESC`,
`N_SRCE_ADD`)
VALUES
(NULLIF(JSON_UNQUOTE(JSON_EXTRACT(vehicleData, '$.ENGINE_SALES_CODE')), ''),
NULLIF(JSON_UNQUOTE(JSON_EXTRACT(vehicleData, '$.MODEL_YEAR')), ''),
NULLIF(JSON_UNQUOTE(JSON_EXTRACT(vehicleData, '$.ENGINE_SALES_CODE_TYPE_ID')), ''),
NULLIF(JSON_UNQUOTE(JSON_EXTRACT(vehicleData, '$.ENGINE_SALES_CODE_DESC')), ''),
'ACES');
END IF;

-- Add new Tran SalesCode if not available already
IF(
(
SELECT COUNT(1) FROM SALES_CODE_MASTER S 
WHERE S.SALES_CODE = NULLIF(JSON_UNQUOTE(JSON_EXTRACT(vehicleData, '$.TRANSMISSION_SALES_CODE')), '') 
AND S.MODEL_YEAR = NULLIF(JSON_UNQUOTE(JSON_EXTRACT(vehicleData, '$.MODEL_YEAR')), '')
)=0) 
THEN
INSERT INTO SALES_CODE_MASTER
(`SALES_CODE`,
`MODEL_YEAR`,
`SALES_CODE_TYPE_ID`,
`SALES_CODE_DESC`,
`N_SRCE_ADD`)
VALUES
(NULLIF(JSON_UNQUOTE(JSON_EXTRACT(vehicleData, '$.TRANSMISSION_SALES_CODE')), ''),
NULLIF(JSON_UNQUOTE(JSON_EXTRACT(vehicleData, '$.MODEL_YEAR')), ''),
NULLIF(JSON_UNQUOTE(JSON_EXTRACT(vehicleData, '$.TRANSMISSION_SALES_CODE_TYPE_ID')), ''),
NULLIF(JSON_UNQUOTE(JSON_EXTRACT(vehicleData, '$.TRANSMISSION_SALES_CODE_DESC')), ''),
'ACES');
END IF;

-- Add new RADIO SalesCode if not available already
-- IF((SELECT COUNT(1) FROM SALES_CODE_MASTER S WHERE S.SALES_CODE = NULLIF(JSON_UNQUOTE(JSON_EXTRACT(vehicleData, '$.RADIO_SALES_CODE') AND S.MODEL_YEAR = NULLIF(JSON_UNQUOTE(JSON_EXTRACT(vehicleData, '$.MODEL_YEAR'))=0) THEN
-- INSERT INTO SALES_CODE_MASTER
-- (`SALES_CODE`,
-- `MODEL_YEAR`,
-- `SALES_CODE_TYPE_ID`,
-- `SALES_CODE_DESC`,
-- `N_SRCE_ADD`)
-- VALUES
-- (NULLIF(JSON_UNQUOTE(JSON_EXTRACT(vehicleData, '$.RADIO_SALES_CODE'),
-- NULLIF(JSON_UNQUOTE(JSON_EXTRACT(vehicleData, '$.MODEL_YEAR'),
-- NULLIF(JSON_UNQUOTE(JSON_EXTRACT(vehicleData, '$.RADIO_SALES_CODE_TYPE_ID'),
-- NULLIF(JSON_UNQUOTE(JSON_EXTRACT(vehicleData, '$.RADIO_SALES_CODE_DESC'),
-- 'ACES');
-- END IF;

-- Add new FuelType if not available already
IF(
(
	SELECT COUNT(1) FROM FUELTYPE f 
	WHERE f.C_ENGINE_SALES_CODE = NULLIF(JSON_UNQUOTE(JSON_EXTRACT(vehicleData, '$.ENGINE_SALES_CODE')), '') 
	AND f.C_FUEL_TYPE_DESC = NULLIF(JSON_UNQUOTE(JSON_EXTRACT(vehicleData, '$.FUEL_TYPE')), '')
)=0) 
	THEN
INSERT INTO FUELTYPE
(`C_ENGINE_SALES_CODE`,
`C_FUEL_TYPE_DESC`,
`C_FUEL_TYPE`,
`N_SRCE_ADD`,
`T_STMP_ADD`)
VALUES
(
 NULLIF(JSON_UNQUOTE(JSON_EXTRACT(vehicleData, '$.ENGINE_SALES_CODE')), ''),
 NULLIF(JSON_UNQUOTE(JSON_EXTRACT(vehicleData, '$.FUEL_TYPE')), ''),
CASE 
	WHEN NULLIF(JSON_UNQUOTE(JSON_EXTRACT(vehicleData, '$.FUEL_TYPE')), '') LIKE '%(%)%' 
	THEN
		SUBSTRING_INDEX(
			SUBSTRING_INDEX(
				NULLIF(JSON_UNQUOTE(JSON_EXTRACT(vehicleData, '$.FUEL_TYPE')), ''), '(', -1)
		,')',1)
	ELSE NULLIF(JSON_UNQUOTE(JSON_EXTRACT(vehicleData, '$.FUEL_TYPE')), '') END,
'ACES',
NOW());
END IF;


SELECT C_FAM,I_MOD_YR,D_LAST_SERVICE,C_ENGINE_SALES_CODE,C_TRANSMISSION_SALES_CODE,C_RADIO_SALES_CODE,
		CASE WHEN C_FUEL_TYPE LIKE '%(%)%' 
		THEN SUBSTRING_INDEX(SUBSTRING_INDEX(C_FUEL_TYPE, '(', -1),')',1)
		ELSE C_FUEL_TYPE END AS C_FUEL_TYPE,
		C_FUEL_TYPE AS C_FUEL_TYPE_DESC
FROM VEHICLE_MASTER
WHERE I_VIN=vin;
COMMIT WORK;
END
=========================
CREATE DEFINER=`t12247adm`@`%` PROCEDURE `db_12247_d_001_instance_1`.`PROC_INGEST_WIADVISOR`(
	IN `wiAdvisorData` JSON,
	IN `roJourney` BIGINT
)
    SQL SECURITY INVOKER
BEGIN


DECLARE serviceIdx INT DEFAULT 0;
DECLARE contractIdx INT DEFAULT 0;
DECLARE warningIdx INT DEFAULT 0;
DECLARE ecuIdx INT DEFAULT 0;
DECLARE dtcIdx INT DEFAULT 0;
DECLARE EXIT HANDLER FOR SQLEXCEPTION

BEGIN
SHOW ERRORS;
ROLLBACK;
END;

START TRANSACTION;

-- VEHICLE DATA
INSERT INTO wiADVISOR_VEH_DATA
	(`I_RO_JOURNEY`,
	`I_VIN`,
	`C_DLR`,
	`Q_ODOMETER`,
	`T_SESSION`,
	`C_SESSION_ID`,
	`C_ADVISOR_UID`,
	`C_WAITER_FLAG`,
	`X_POD_OS_VSN`,
	`X_POD_APP_VSN`,
	`C_DLR_STATE`,
	`X_LEFT_FRONT_TIREPRESS`,
	`X_RIGHT_FRONT_TIREPRESS`,
	`X_LEFT_REAR_TIREPRESS`,
	`X_RIGHT_REAR_TIREPRESS`,
	`X_FRONT_MIN_TIREPRESS`,
	`X_REAR_MIN_TIREPRESS`,
	`X_SPARE_TIREPRESS`,
	`X_INSERVICE_ODO`,
	`X_LASTSERVICE_ODO`,
	`T_LASTSERVICE`,
	`T_PROMISED_CONTACT`,
	`I_MOD_YR`,
	`C_BODY`,
	`REGION`,
	`X_ENVIRONMENT`,
	`QDFMETADATA`,
	`TIMESTAMPEPOCH`,
	`C_TEMPLATE_ID`,
	`N_SRCE_ADD`,
	`T_STMP_ADD`)
VALUES
	(roJourney,
	NULLIF(JSON_UNQUOTE(JSON_EXTRACT(wiAdvisorData, '$.vin')), ''),
	NULLIF(JSON_UNQUOTE(JSON_EXTRACT(wiAdvisorData, '$.dealer_code')), ''),
	NULLIF(JSON_UNQUOTE(JSON_EXTRACT(wiAdvisorData, '$.current_odo')), ''),
	NULLIF(JSON_UNQUOTE(JSON_EXTRACT(wiAdvisorData, '$.session_time')), ''),
	NULLIF(JSON_UNQUOTE(JSON_EXTRACT(wiAdvisorData, '$.id')), ''),
	NULLIF(JSON_UNQUOTE(JSON_EXTRACT(wiAdvisorData, '$.uid')), ''),
	NULLIF(JSON_UNQUOTE(JSON_EXTRACT(wiAdvisorData, '$.waiter')), ''),
	NULLIF(JSON_UNQUOTE(JSON_EXTRACT(wiAdvisorData, '$.pod_os_vsn')), ''),
	NULLIF(JSON_UNQUOTE(JSON_EXTRACT(wiAdvisorData, '$.pod_app_vsn')), ''),
	NULLIF(JSON_UNQUOTE(JSON_EXTRACT(wiAdvisorData, '$.dealer_state')), ''),
	NULLIF(JSON_UNQUOTE(JSON_EXTRACT(wiAdvisorData, '$.left_front_tirepress')), ''),
	NULLIF(JSON_UNQUOTE(JSON_EXTRACT(wiAdvisorData, '$.right_front_tirepress')), ''),
	NULLIF(JSON_UNQUOTE(JSON_EXTRACT(wiAdvisorData, '$.left_rear_tirepress')), ''),
	NULLIF(JSON_UNQUOTE(JSON_EXTRACT(wiAdvisorData, '$.right_rear_tirepress')), ''),
	NULLIF(JSON_UNQUOTE(JSON_EXTRACT(wiAdvisorData, '$.front_min_tirepress')), ''),
	NULLIF(JSON_UNQUOTE(JSON_EXTRACT(wiAdvisorData, '$.rear_min_tirepress')), ''),
	NULLIF(JSON_UNQUOTE(JSON_EXTRACT(wiAdvisorData, '$.spare_tirepress')), ''),
	NULLIF(JSON_UNQUOTE(JSON_EXTRACT(wiAdvisorData, '$.inservice_odo')), ''),
	NULLIF(JSON_UNQUOTE(JSON_EXTRACT(wiAdvisorData, '$.lastservice_odo')), ''),
	NULLIF(JSON_UNQUOTE(JSON_EXTRACT(wiAdvisorData, '$.lastservice_date')), ''),
	NULLIF(JSON_UNQUOTE(JSON_EXTRACT(wiAdvisorData, '$.promised_contact_time')), ''),
	NULLIF(JSON_UNQUOTE(JSON_EXTRACT(wiAdvisorData, '$.year')), ''),
	NULLIF(JSON_UNQUOTE(JSON_EXTRACT(wiAdvisorData, '$.body')), ''),
	NULLIF(JSON_UNQUOTE(JSON_EXTRACT(wiAdvisorData, '$.region')), ''),
	NULLIF(JSON_UNQUOTE(JSON_EXTRACT(wiAdvisorData, '$.environment')), ''),
	NULLIF(JSON_UNQUOTE(JSON_EXTRACT(wiAdvisorData, '$.qdfMetadata')), ''),
	NULLIF(JSON_UNQUOTE(JSON_EXTRACT(wiAdvisorData, '$.timestampEpoch')), ''),
	NULLIF(JSON_UNQUOTE(JSON_EXTRACT(wiAdvisorData, '$.templateId')), ''),
	'wiAdvisor',
	CURRENT_TIMESTAMP());
	
-- SELECTED SERVICES
SET @sel_services = JSON_EXTRACT(wiAdvisorData,'$.selected_services');
SET @sel_services_len = JSON_LENGTH(@sel_services);

WHILE serviceIdx < @sel_services_len DO

	INSERT INTO wiADVISOR_SELECTED_SERVICE
		(`I_RO_JOURNEY`,
		`T_SESSION`,
		`I_SERVICE`,
		`X_SERVICE_NAME`,
		`X_SERVICE_DESC`,
		`X_PRICE`,
		`C_LABOR_TYPE`,
		`X_COMMENT`,
		`X_COMPLAIN`,
		`N_SRCE_ADD`,
		`T_STMP_ADD`)
	VALUES
		(roJourney,
		NULLIF(JSON_UNQUOTE(JSON_EXTRACT(wiAdvisorData, '$.session_time')), ''),
		NULLIF(JSON_UNQUOTE(JSON_EXTRACT(wiAdvisorData, CONCAT('$.selected_services[',serviceIdx,'].id'))), ''),
		NULLIF(JSON_UNQUOTE(JSON_EXTRACT(wiAdvisorData, CONCAT('$.selected_services[',serviceIdx,'].name'))), ''),
		NULLIF(JSON_UNQUOTE(JSON_EXTRACT(wiAdvisorData, CONCAT('$.selected_services[',serviceIdx,'].desc'))), ''),
		NULLIF(JSON_UNQUOTE(JSON_EXTRACT(wiAdvisorData, CONCAT('$.selected_services[',serviceIdx,'].price'))), ''),
		NULLIF(JSON_UNQUOTE(JSON_EXTRACT(wiAdvisorData, CONCAT('$.selected_services[',serviceIdx,'].labor_type'))), ''),
		NULLIF(JSON_UNQUOTE(JSON_EXTRACT(wiAdvisorData, CONCAT('$.selected_services[',serviceIdx,'].comment'))), ''),
		NULLIF(JSON_UNQUOTE(JSON_EXTRACT(wiAdvisorData, CONCAT('$.selected_services[',serviceIdx,'].complain'))), ''),
		CURRENT_TIMESTAMP(),
		CURRENT_TIMESTAMP());
			
	SELECT serviceIdx + 1 INTO serviceIdx; 
END WHILE; -- stop sel_services while

-- SERVICE CONTRACTS

SET @service_contracts = JSON_EXTRACT(wiAdvisorData,'$.service_contracts');
SET @service_contracts_len = JSON_LENGTH(@service_contracts);

WHILE contractIdx < @service_contracts_len DO

	INSERT INTO wiADVISOR_SERVICE_CONTRACTS
		(`I_RO_JOURNEY`,
		`T_SESSION`,
		`C_SERVICE_CONTRACT`,
		`X_SERVICE_CONTRACT_DESC`,
		`T_EFFECTIVE`,
		`X_EFFECTIVE_ODO`,
		`C_DLR`,
		`X_STATUS`,
		`N_SRCE_ADD`,
		`T_STMP_ADD`)
	VALUES
		(roJourney,
		NULLIF(JSON_UNQUOTE(JSON_EXTRACT(wiAdvisorData, '$.session_time')), ''),
		NULLIF(JSON_UNQUOTE(JSON_EXTRACT(wiAdvisorData, CONCAT('$.service_contracts[',contractIdx,'].code'))), ''),
		NULLIF(JSON_UNQUOTE(JSON_EXTRACT(wiAdvisorData, CONCAT('$.service_contracts[',contractIdx,'].desc'))), ''),
		NULLIF(JSON_UNQUOTE(JSON_EXTRACT(wiAdvisorData, CONCAT('$.service_contracts[',contractIdx,'].effective_date'))), ''),
		NULLIF(JSON_UNQUOTE(JSON_EXTRACT(wiAdvisorData, CONCAT('$.service_contracts[',contractIdx,'].effective_odo'))), ''),
		NULLIF(JSON_UNQUOTE(JSON_EXTRACT(wiAdvisorData, CONCAT('$.service_contracts[',contractIdx,'].selling_dealer_code'))), ''),
		NULLIF(JSON_UNQUOTE(JSON_EXTRACT(wiAdvisorData, CONCAT('$.service_contracts[',contractIdx,'].status'))), ''),
		'wiAdvisor',
		CURRENT_TIMESTAMP());

			
	SELECT contractIdx + 1 INTO contractIdx; 
END WHILE; -- stop service contracts


-- WARNING MESSAGES

SET @warn_msgs = JSON_EXTRACT(wiAdvisorData,'$.veh_warning_msgs');
SET @warn_msgs_len = JSON_LENGTH(@warn_msgs);

WHILE warningIdx < @warn_msgs_len DO

	INSERT INTO wiADVISOR_VEH_WARNING_MSGS
		(`I_RO_JOURNEY`,
		`T_SESSION`,
		`I_SEQ`,
		`X_WARNING_MSG`,
		`N_SRCE_ADD`,
		`T_STMP_ADD`)
		VALUES
		(roJourney,
		NULLIF(JSON_UNQUOTE(JSON_EXTRACT(wiAdvisorData, '$.session_time')), ''),
		NULLIF(JSON_UNQUOTE(JSON_EXTRACT(wiAdvisorData, CONCAT('$.veh_warning_msgs[',warningIdx,'].seq'))), ''),
		NULLIF(JSON_UNQUOTE(JSON_EXTRACT(wiAdvisorData, CONCAT('$.veh_warning_msgs[',warningIdx,'].warning_msg'))), ''),
		'wiAdvisor',
		CURRENT_TIMESTAMP());

			
	SELECT warningIdx + 1 INTO warningIdx; 
END WHILE; -- stop warning msgs

-- ECU & DTC 

SET @ecu_data=JSON_EXTRACT(wiAdvisorData,'$.ecu_data');
SET @ecuDataLength = JSON_LENGTH(@ecu_data);
WHILE ecuIdx < @ecuDataLength DO


	INSERT INTO wiADVISOR_ECU_DATA
		(`I_RO_JOURNEY`,
		`T_SESSION`,
		`I_ECU`,
		`X_ECU_ACRONYM`,
		`X_DESC`,
		`X_IDENT`,
		`X_SWPART_NUMBER`,
		`N_SRCE_ADD`,
		`T_STMP_ADD`)
	VALUES
		(roJourney,
		NULLIF(JSON_UNQUOTE(JSON_EXTRACT(wiAdvisorData, '$.session_time')), ''),
		NULLIF(JSON_UNQUOTE(JSON_EXTRACT(wiAdvisorData, CONCAT('$.ecu_data[',ecuIdx,'].ecu_id'))), ''),
		NULLIF(JSON_UNQUOTE(JSON_EXTRACT(wiAdvisorData, CONCAT('$.ecu_data[',ecuIdx,'].acronym'))), ''),
		NULLIF(JSON_UNQUOTE(JSON_EXTRACT(wiAdvisorData, CONCAT('$.ecu_data[',ecuIdx,'].desc'))), ''),
		NULLIF(JSON_UNQUOTE(JSON_EXTRACT(wiAdvisorData, CONCAT('$.ecu_data[',ecuIdx,'].ident'))), ''),
		NULLIF(JSON_UNQUOTE(JSON_EXTRACT(wiAdvisorData, CONCAT('$.ecu_data[',ecuIdx,'].swpart_number'))), ''),
		'wiAdvisor',
		CURRENT_TIMESTAMP());

		SET @dtc_data=JSON_EXTRACT(wiAdvisorData,CONCAT('$.ecu_data[',ecuIdx,'].dtc_data'));
		SET @dtcDataLength = JSON_LENGTH(@dtc_data);
		SET dtcIdx= 0;

		WHILE dtcIdx < @dtcDataLength DO
	
			INSERT INTO wiADVISOR_DTC_DATA
				(`I_RO_JOURNEY`,
				`T_SESSION`,
				`I_ECU`,
				`C_HEX`,
				`C_DTC`,
				`X_STATUS`,
				`X_DESC`,
				`N_SRCE_ADD`,
				`T_STMP_ADD`)
			VALUES
				(roJourney,
				NULLIF(JSON_UNQUOTE(JSON_EXTRACT(wiAdvisorData, '$.session_time')), ''),
				NULLIF(JSON_UNQUOTE(JSON_EXTRACT(wiAdvisorData, CONCAT('$.ecu_data[',ecuIdx,'].ecu_id'))), ''),
				NULLIF(JSON_UNQUOTE(JSON_EXTRACT(wiAdvisorData, CONCAT('$.ecu_data[',ecuIdx,'].dtc_data[',dtcIdx,'].hex_code'))), ''),
				NULLIF(JSON_UNQUOTE(JSON_EXTRACT(wiAdvisorData, CONCAT('$.ecu_data[',ecuIdx,'].dtc_data[',dtcIdx,'].sae_code'))), ''),
				NULLIF(JSON_UNQUOTE(JSON_EXTRACT(wiAdvisorData, CONCAT('$.ecu_data[',ecuIdx,'].dtc_data[',dtcIdx,'].status'))), ''),
			   NULLIF(JSON_UNQUOTE(JSON_EXTRACT(wiAdvisorData, CONCAT('$.ecu_data[',ecuIdx,'].dtc_data[',dtcIdx,'].desc'))), ''),
				'wiAdvisor',
				CURRENT_TIMESTAMP());
	
			SELECT dtcIdx + 1 INTO dtcIdx; -- Add step to dtc_data
		
		END WHILE; -- stop dtc_data while

SELECT ecuIdx + 1 INTO ecuIdx; -- Add step to ecudata
END WHILE; -- stop ecudata while

COMMIT WORK;



END
=================================
CREATE DEFINER=`t12247adm`@`%` PROCEDURE `db_12247_d_001_instance_1`.`PROC_INGEST_WITECH_MEGAKNOCK`(
	IN `wiTechData` JSON,
	IN `roJourney` BIGINT
)
    SQL SECURITY INVOKER
BEGIN

DECLARE ecuDataIndex INT DEFAULT 0;
DECLARE customerDataIndex INT;
DECLARE convDataIndex INT;

DECLARE customerDataAddlInfoId BIGINT;

DECLARE EXIT HANDLER FOR SQLEXCEPTION
BEGIN
SHOW ERRORS;
ROLLBACK;
END;
START TRANSACTION;

-- VEHICLE DATA
INSERT INTO wiTECH_VEH_DATA 
	(I_RO_JOURNEY, 
    I_VIN, 
    C_DLR,
    Q_ODOMETER,
    Q_ODOMETER_SI,
    T_SESSION,
    C_DEVICE_SN,
    I_MOD_YR,
    C_BODY,
    C_VEHICLE_MODEL,
    REGION,
    QDFMETADATA,
    TIMESTAMPEPOCH,
    C_SESSION_ID,
    C_TEMPLATE_ID,
	N_SRCE_ADD,
	T_STMP_ADD)
VALUES (
	 roJourney,
    NULLIF(JSON_UNQUOTE(JSON_EXTRACT(wiTechData, '$.vin')), ''),
    NULLIF(JSON_UNQUOTE(JSON_EXTRACT(wiTechData,'$.dealer_code')), ''),
    IFNULL(NULLIF(JSON_UNQUOTE(JSON_EXTRACT(wiTechData,'$.odometer')), ''),0),
	NULLIF(JSON_UNQUOTE(JSON_EXTRACT(wiTechData,'$.odometer_si')), ''),
    NULLIF(JSON_UNQUOTE(JSON_EXTRACT(wiTechData, '$.session_time')), ''),
	NULLIF(JSON_UNQUOTE(JSON_EXTRACT(wiTechData,'$.device_sn')), ''),
    NULLIF(JSON_UNQUOTE(JSON_EXTRACT(wiTechData,'$.year')), ''),
    NULLIF(JSON_UNQUOTE(JSON_EXTRACT(wiTechData,'$.body')), ''),
    NULLIF(JSON_UNQUOTE(JSON_EXTRACT(wiTechData,'$.model')), ''),
	NULLIF(JSON_UNQUOTE(JSON_EXTRACT(wiTechData,'$.region')), ''),
    NULLIF(JSON_UNQUOTE(JSON_EXTRACT(wiTechData,'$.qdfMetadata')), ''),
    NULLIF(JSON_UNQUOTE(JSON_EXTRACT(wiTechData,'$.timestampEpoch')), ''),
    NULLIF(JSON_UNQUOTE(JSON_EXTRACT(wiTechData,'$.sessionId')), ''),
    NULLIF(JSON_UNQUOTE(JSON_EXTRACT(wiTechData,'$.templateId')), ''),
	"wiTech",
    CURRENT_TIMESTAMP());


 -- ECU DATA
SET @ecu_data=JSON_EXTRACT(wiTechData,'$.ecu_data');
SET @ecuDataLength = JSON_LENGTH(@ecu_data);

WHILE ecuDataIndex < @ecuDataLength DO

	INSERT INTO wiTECH_ECU_MEGAKNOCK_DATA 
		(I_RO_JOURNEY, 
		T_SESSION, 
		C_IDENT,
		I_ECU,
		X_PROTOCOL,
		X_PART_NO,
		X_BUS,
		X_SW_PART_NO,
		X_ORIG_VIN,
		X_ECU,
		X_SUPPLIER_ID,
		X_SW_VER,
		X_HW_VER,
		X_CURR_VIN,
		X_BATT_VOLTAGE,
		X_IBS_INIT_STATUS,
		X_INT_BATT_SOC,
        C_BIN,
		X_ECU_SERIAL_NUM,
		N_SRCE_ADD,
		T_STMP_ADD)
	VALUES 
		(roJourney,
		NULLIF(JSON_UNQUOTE(JSON_EXTRACT(wiTechData, '$.session_time')), ''),
		NULLIF(JSON_UNQUOTE(JSON_EXTRACT(wiTechData, CONCAT('$.ecu_data[',ecuDataIndex,'].ident'))), ''),
		NULLIF(JSON_UNQUOTE(JSON_EXTRACT(wiTechData, CONCAT('$.ecu_data[',ecuDataIndex,'].ecu_id'))), ''),
		NULLIF(JSON_UNQUOTE(JSON_EXTRACT(wiTechData, CONCAT('$.ecu_data[',ecuDataIndex,'].protocol'))), ''),
		NULLIF(JSON_UNQUOTE(JSON_EXTRACT(wiTechData, CONCAT('$.ecu_data[',ecuDataIndex,'].part_no'))), ''),
		NULLIF(JSON_UNQUOTE(JSON_EXTRACT(wiTechData, CONCAT('$.ecu_data[',ecuDataIndex,'].bus'))), ''),
		NULLIF(JSON_UNQUOTE(JSON_EXTRACT(wiTechData, CONCAT('$.ecu_data[',ecuDataIndex,'].sw_part_no'))), ''),
		NULLIF(JSON_UNQUOTE(JSON_EXTRACT(wiTechData, CONCAT('$.ecu_data[',ecuDataIndex,'].orig_vin'))), ''),
		NULLIF(JSON_UNQUOTE(JSON_EXTRACT(wiTechData, CONCAT('$.ecu_data[',ecuDataIndex,'].ecu'))), ''),
		NULLIF(JSON_UNQUOTE(JSON_EXTRACT(wiTechData, CONCAT('$.ecu_data[',ecuDataIndex,'].supplier_id'))), ''),
		NULLIF(JSON_UNQUOTE(JSON_EXTRACT(wiTechData, CONCAT('$.ecu_data[',ecuDataIndex,'].sw_ver'))), ''),
		NULLIF(JSON_UNQUOTE(JSON_EXTRACT(wiTechData, CONCAT('$.ecu_data[',ecuDataIndex,'].hw_ver'))), ''),
		NULLIF(JSON_UNQUOTE(JSON_EXTRACT(wiTechData, CONCAT('$.ecu_data[',ecuDataIndex,'].curr_vin'))), ''),
		NULLIF(JSON_UNQUOTE(JSON_EXTRACT(wiTechData, CONCAT('$.ecu_data[',ecuDataIndex,'].batt_voltage'))), ''),
		NULLIF(JSON_UNQUOTE(JSON_EXTRACT(wiTechData, CONCAT('$.ecu_data[',ecuDataIndex,'].ibs_init_status'))), ''),
		NULLIF(JSON_UNQUOTE(JSON_EXTRACT(wiTechData, CONCAT('$.ecu_data[',ecuDataIndex,'].int_batt_soc'))), ''),
        NULLIF(JSON_UNQUOTE(JSON_EXTRACT(wiTechData, CONCAT('$.ecu_data[',ecuDataIndex,'].bin'))), ''),
		NULLIF(JSON_UNQUOTE(JSON_EXTRACT(wiTechData, CONCAT('$.ecu_data[',ecuDataIndex,'].ecu_serial_num'))), ''),
		"wiTech",
		CURRENT_TIMESTAMP());
		
		SET @comser_data=JSON_EXTRACT(wiTechData,CONCAT('$.ecu_data[',ecuDataIndex,'].comser_data'));
		SET @comserDataLength = JSON_LENGTH(@comser_data);
		SET customerDataIndex= 0;
		
			WHILE customerDataIndex < @comserDataLength DO

				INSERT INTO wiTECH_ECU_MEGAKNOCK_COMSER_DATA
					(I_RO_JOURNEY,
					T_SESSION,
                    I_ECU,
                    C_REQ,
                    C_RESP,
					C_NO_RESP,
					C_NEG_RESP_FLAG,
					C_NEG_RESP,
                    N_SRCE_ADD,
					T_STMP_ADD)
				VALUES
					(roJourney,
					NULLIF(JSON_UNQUOTE(JSON_EXTRACT(wiTechData, '$.session_time')), ''),
					NULLIF(JSON_UNQUOTE(JSON_EXTRACT(wiTechData, CONCAT('$.ecu_data[',ecuDataIndex,'].ecu_id'))), ''),
					NULLIF(JSON_UNQUOTE(JSON_EXTRACT(wiTechData, CONCAT('$.ecu_data[',ecuDataIndex,'].comser_data[',customerDataIndex,'].req'))), ''),
					NULLIF(JSON_UNQUOTE(JSON_EXTRACT(wiTechData, CONCAT('$.ecu_data[',ecuDataIndex,'].comser_data[',customerDataIndex,'].resp'))), ''),
					NULLIF(JSON_UNQUOTE(JSON_EXTRACT(wiTechData, CONCAT('$.ecu_data[',ecuDataIndex,'].comser_data[',customerDataIndex,'].no_resp'))), ''),
					NULLIF(JSON_UNQUOTE(JSON_EXTRACT(wiTechData, CONCAT('$.ecu_data[',ecuDataIndex,'].comser_data[',customerDataIndex,'].neg_resp'))), ''),
					NULLIF(JSON_UNQUOTE(JSON_EXTRACT(wiTechData, CONCAT('$.ecu_data[',ecuDataIndex,'].comser_data[',customerDataIndex,'].neg_resp_code'))), ''),
					"wiTech",
					CURRENT_TIMESTAMP());
                    
				SELECT LAST_INSERT_ID() INTO customerDataAddlInfoId;

		-- start CONV DATA --
	
				 SET @conv_data=JSON_EXTRACT(wiTechData,CONCAT('$.ecu_data[',ecuDataIndex,'].comser_data[',customerDataIndex,'].conv_data'));
				 SET @convDataLength = JSON_LENGTH(@conv_data);
				 SET convDataIndex=0;
				 WHILE convDataIndex < @convDataLength DO
	 
				  -- Insert data into wiTECH_ECU_MEGAKNOCK_COMSER_CONV_ADDNL_DATA of conv_data
					INSERT INTO wiTECH_ECU_MEGAKNOCK_COMSER_CONV_ADDNL_DATA 
						(I_ADDNTL_INFO,
						X_NAME,
						X_VALUE,
						X_UNITS,
						X_VALUE_SI,
						X_UNITS_SI,
						N_SRCE_ADD,
						T_STMP_ADD)
					VALUES
						(customerDataAddlInfoId,
						NULLIF(JSON_UNQUOTE(JSON_EXTRACT(wiTechData,CONCAT('$.ecu_data[',ecuDataIndex,'].comser_data[',customerDataIndex,'].conv_data[',convDataIndex,'].name'))), ''),
						NULLIF(JSON_UNQUOTE(JSON_EXTRACT(wiTechData,CONCAT('$.ecu_data[',ecuDataIndex,'].comser_data[',customerDataIndex,'].conv_data[',convDataIndex,'].value'))), ''),
						NULLIF(JSON_UNQUOTE(JSON_EXTRACT(wiTechData,CONCAT('$.ecu_data[',ecuDataIndex,'].comser_data[',customerDataIndex,'].conv_data[',convDataIndex,'].units'))), ''),
						NULLIF(JSON_UNQUOTE(JSON_EXTRACT(wiTechData,CONCAT('$.ecu_data[',ecuDataIndex,'].comser_data[',customerDataIndex,'].conv_data[',convDataIndex,'].value_si'))), ''),
						NULLIF(JSON_UNQUOTE(JSON_EXTRACT(wiTechData,CONCAT('$.ecu_data[',ecuDataIndex,'].comser_data[',customerDataIndex,'].conv_data[',convDataIndex,'].units_si'))), ''),
						"wiTech",
						CURRENT_TIMESTAMP());
            

	 SELECT convDataIndex + 1 INTO convDataIndex; -- Add step to CONV_DATA 
	 END WHILE; -- stop CONV_DATA while

   SELECT customerDataIndex + 1 INTO customerDataIndex;
	END WHILE;
-- END CUSTOMER DATA

SELECT ecuDataIndex + 1 INTO ecuDataIndex; -- Add step to ecudata
END WHILE; -- stop ecudata while



COMMIT WORK;

 -- Repeat Repair	update

END
======================
CREATE DEFINER=`t12247adm`@`%` PROCEDURE `db_12247_d_001_instance_1`.`PROC_INGEST_WITECH_QDF`(
	IN `wiTechData` JSON,
	IN `roJourney` BIGINT
)
    SQL SECURITY INVOKER
BEGIN


DECLARE i INT DEFAULT 0;
DECLARE dtcDataIndex INT;
DECLARE envDataIndex INT;
DECLARE snapDataIndex INT;
DECLARE rawDtcDataIndex INT;
DECLARE eventDataIndex INT;
DECLARE eventDataObjectIndex INT;
DECLARE ffDataIndex INT;
DECLARE ffDataObjectIndex INT;

DECLARE eventDataAddlInfoId BIGINT;
DECLARE ffDataAddlInfoId BIGINT;

DECLARE EXIT HANDLER FOR SQLEXCEPTION
BEGIN
SHOW ERRORS;
ROLLBACK;
END;

START TRANSACTION;

INSERT INTO wiTECH_VEH_DATA
	(I_RO_JOURNEY, 
    I_VIN, 
    C_DLR,
    Q_ODOMETER,
    Q_ODOMETER_SI,
    T_SESSION,
    C_DEVICE_SN,
    I_MOD_YR,
    C_BODY,
    X_ENG,
    C_VEHICLE_MODEL,
    REGION,
    QDFMETADATA,
    TIMESTAMPEPOCH,
    C_SESSION_ID,
    C_TEMPLATE_ID,
	N_SRCE_ADD,
	T_STMP_ADD)
VALUES (
	roJourney,
    NULLIF(JSON_UNQUOTE(JSON_EXTRACT(wiTechData, '$.vin')), ''),
    NULLIF(JSON_UNQUOTE(JSON_EXTRACT(wiTechData,'$.dealer_code')), ''),
    IFNULL(NULLIF(JSON_UNQUOTE(JSON_EXTRACT(wiTechData,'$.odometer')), ''),0),
	 NULLIF(JSON_UNQUOTE(JSON_EXTRACT(wiTechData,'$.odometer_si')), ''),
    NULLIF(JSON_UNQUOTE(JSON_EXTRACT(wiTechData, '$.session_time')), ''),
	 NULLIF(JSON_UNQUOTE(JSON_EXTRACT(wiTechData,'$.device_sn')), ''),
    NULLIF(JSON_UNQUOTE(JSON_EXTRACT(wiTechData,'$.year')), ''),
    NULLIF(JSON_UNQUOTE(JSON_EXTRACT(wiTechData,'$.body')), ''),
    "",
    NULLIF(JSON_UNQUOTE(JSON_EXTRACT(wiTechData,'$.model')), ''),
	 NULLIF(JSON_UNQUOTE(JSON_EXTRACT(wiTechData,'$.region')), ''),
    NULLIF(JSON_UNQUOTE(JSON_EXTRACT(wiTechData,'$.qdfMetadata')), ''),
    NULLIF(JSON_UNQUOTE(JSON_EXTRACT(wiTechData,'$.timestampEpoch')), ''),
    NULLIF(JSON_UNQUOTE(JSON_EXTRACT(wiTechData,'$.sessionId')), ''),
    NULLIF(JSON_UNQUOTE(JSON_EXTRACT(wiTechData,'$.templateId')), ''),
    "wiTech",
    CURRENT_TIMESTAMP()
);

SET @ecu_data=JSON_EXTRACT(wiTechData,'$.ecu_data');

-- Get ecu_data length for the loop
SET @ecuDataLength = JSON_LENGTH(@ecu_data);
WHILE i < @ecuDataLength DO

-- need to check X_ECU value
	INSERT INTO wiTECH_ECU_DATA 
		(I_RO_JOURNEY,
		T_SESSION,
		C_IDENT,
		I_ECU,
		X_PROTOCOL,
		X_PART_NO,
		X_BUS,
		X_ACTUAL_IDENT,
		X_SW_PART_NO,
		X_ORIG_VIN,
		X_ECU,
		X_SUPPLIER_ID,
		X_SW_VER,
		X_HW_VER,
		B_IS_EXACT_IDENT,
		X_CURR_VIN,
		X_BATT_VOLTAGE,
		X_IBS_INIT_STATUS,
		X_INT_BATT_SOC,
      C_BIN,
		X_ECU_SERIAL_NUM,
		N_SRCE_ADD,
      T_STMP_ADD) 
	VALUES 
		(roJourney,
		NULLIF(JSON_UNQUOTE(JSON_EXTRACT(wiTechData, '$.session_time')), ''),
		NULLIF(JSON_UNQUOTE(JSON_EXTRACT(wiTechData, CONCAT('$.ecu_data[',i,'].Ident'))), ''),
		NULLIF(JSON_UNQUOTE(JSON_EXTRACT(wiTechData, CONCAT('$.ecu_data[',i,'].ecu_id'))), ''),
		NULLIF(JSON_UNQUOTE(JSON_EXTRACT(wiTechData, CONCAT('$.ecu_data[',i,'].protocol'))), ''),
		NULLIF(JSON_UNQUOTE(JSON_EXTRACT(wiTechData, CONCAT('$.ecu_data[',i,'].part_no'))), ''),
		NULLIF(JSON_UNQUOTE(JSON_EXTRACT(wiTechData, CONCAT('$.ecu_data[',i,'].bus'))), ''),
		NULLIF(JSON_UNQUOTE(JSON_EXTRACT(wiTechData, CONCAT('$.ecu_data[',i,'].actual_ident'))), ''),
		NULLIF(JSON_UNQUOTE(JSON_EXTRACT(wiTechData, CONCAT('$.ecu_data[',i,'].sw_part_no'))), ''),
		NULLIF(JSON_UNQUOTE(JSON_EXTRACT(wiTechData, CONCAT('$.ecu_data[',i,'].orig_vin'))), ''),
		NULLIF(JSON_UNQUOTE(JSON_EXTRACT(wiTechData, CONCAT('$.ecu_data[',i,'].ecu'))), ''),
		NULLIF(JSON_UNQUOTE(JSON_EXTRACT(wiTechData, CONCAT('$.ecu_data[',i,'].supplier_id'))), ''),
		NULLIF(JSON_UNQUOTE(JSON_EXTRACT(wiTechData, CONCAT('$.ecu_data[',i,'].sw_ver'))), ''),
		NULLIF(JSON_UNQUOTE(JSON_EXTRACT(wiTechData, CONCAT('$.ecu_data[',i,'].hw_ver'))), ''),
		NULLIF(JSON_UNQUOTE(JSON_EXTRACT(wiTechData, CONCAT('$.ecu_data[',i,'].is_exact_ident'))), ''),
		NULLIF(JSON_UNQUOTE(JSON_EXTRACT(wiTechData, CONCAT('$.ecu_data[',i,'].curr_vin'))), ''),
		NULLIF(JSON_UNQUOTE(JSON_EXTRACT(wiTechData, CONCAT('$.ecu_data[',i,'].batt_voltage'))), ''),
		NULLIF(JSON_UNQUOTE(JSON_EXTRACT(wiTechData, CONCAT('$.ecu_data[',i,'].ibs_init_status'))), ''),
		NULLIF(JSON_UNQUOTE(JSON_EXTRACT(wiTechData, CONCAT('$.ecu_data[',i,'].int_batt_soc'))), ''),
      NULLIF(JSON_UNQUOTE(JSON_EXTRACT(wiTechData, CONCAT('$.ecu_data[',i,'].bin'))), ''),
		NULLIF(JSON_UNQUOTE(JSON_EXTRACT(wiTechData, CONCAT('$.ecu_data[',i,'].ecu_serial_num'))), ''),
		"wiTech",
      CURRENT_TIMESTAMP());

SET @dtc_data=JSON_EXTRACT(wiTechData,CONCAT('$.ecu_data[',i,'].dtc_data'));
SET @dtcDataLength = JSON_LENGTH(@dtc_data);
SET dtcDataIndex= 0;

	WHILE dtcDataIndex < @dtcDataLength DO

		INSERT INTO wiTECH_DTC_DATA
			(I_RO_JOURNEY,
			T_SESSION,
			I_ECU,
			C_DTC,
			C_HEX,
			X_DESC,
         C_RAW_HEX_CODE,
         X_STATUS,
			N_SRCE_ADD,
         T_STMP_ADD) 
		VALUES 
			(roJourney,
			NULLIF(JSON_UNQUOTE(JSON_EXTRACT(wiTechData, '$.session_time')), ''),
			NULLIF(JSON_UNQUOTE(JSON_EXTRACT(wiTechData, CONCAT('$.ecu_data[',i,'].ecu_id'))), ''),
			NULLIF(JSON_UNQUOTE(JSON_EXTRACT(wiTechData, CONCAT('$.ecu_data[',i,'].dtc_data[',dtcDataIndex,'].code'))), ''),
			NULLIF(JSON_UNQUOTE(JSON_EXTRACT(wiTechData, CONCAT('$.ecu_data[',i,'].dtc_data[',dtcDataIndex,'].hex_code'))), ''),
			NULLIF(JSON_UNQUOTE(JSON_EXTRACT(wiTechData, CONCAT('$.ecu_data[',i,'].dtc_data[',dtcDataIndex,'].desc'))), ''),
         NULLIF(JSON_UNQUOTE(JSON_EXTRACT(wiTechData, CONCAT('$.ecu_data[',i,'].dtc_data[',dtcDataIndex,'].raw_hex_code'))), ''),
         NULLIF(JSON_UNQUOTE(JSON_EXTRACT(wiTechData, CONCAT('$.ecu_data[',i,'].dtc_data[',dtcDataIndex,'].status'))), ''),
         "wiTech",
         CURRENT_TIMESTAMP()
			);
			
	-- start ENV DATA --
	
	 SET @env_data=JSON_EXTRACT(wiTechData,CONCAT('$.ecu_data[',i,'].dtc_data[',dtcDataIndex,'].env_data'));
	 SET @envDataLength = JSON_LENGTH(@env_data);
	 SET envDataIndex=0;
	 
	 WHILE envDataIndex < @envDataLength DO
	 -- Insert data into wiTECH_DTC_SNAP_ENV_DATA of env_data
		  INSERT INTO wiTECH_DTC_SNAP_ENV_DATA 
		 	(I_RO_JOURNEY,
			 T_SESSION,
			 I_ECU,
			 C_DTC,
			 X_ENV_SNAP_TYPE,
			 X_NAME,
			 X_VALUE,
             X_UNITS,
             X_VALUE_SI,
             X_UNITS_SI,
			 N_SRCE_ADD,
			 T_STMP_ADD)
		 VALUES 
		 	(roJourney,
			 NULLIF(JSON_UNQUOTE(JSON_EXTRACT(wiTechData, '$.session_time')), ''),
			 NULLIF(JSON_UNQUOTE(JSON_EXTRACT(wiTechData, CONCAT('$.ecu_data[',i,'].ecu_id'))), ''),
			 NULLIF(JSON_UNQUOTE(JSON_EXTRACT(wiTechData, CONCAT('$.ecu_data[',i,'].dtc_data[',dtcDataIndex,'].code'))), ''),
			 "SNAP",
			 NULLIF(JSON_UNQUOTE(JSON_EXTRACT(wiTechData, CONCAT('$.ecu_data[',i,'].dtc_data[',dtcDataIndex,'].env_data[',envDataIndex,'].name'))), ''),
			 NULLIF(JSON_UNQUOTE(JSON_EXTRACT(wiTechData, CONCAT('$.ecu_data[',i,'].dtc_data[',dtcDataIndex,'].env_data[',envDataIndex,'].value'))), ''),
			 NULLIF(JSON_UNQUOTE(JSON_EXTRACT(wiTechData, CONCAT('$.ecu_data[',i,'].dtc_data[',dtcDataIndex,'].env_data[',envDataIndex,'].units'))), ''),
             NULLIF(JSON_UNQUOTE(JSON_EXTRACT(wiTechData, CONCAT('$.ecu_data[',i,'].dtc_data[',dtcDataIndex,'].env_data[',envDataIndex,'].value_si'))), ''),
			 NULLIF(JSON_UNQUOTE(JSON_EXTRACT(wiTechData, CONCAT('$.ecu_data[',i,'].dtc_data[',dtcDataIndex,'].env_data[',envDataIndex,'].units_si'))), ''),
			 "wiTech",
             CURRENT_TIMESTAMP());	 
		
	   SELECT envDataIndex + 1 INTO envDataIndex; -- Add step to env_D	 
	   END WHILE; -- stop env_data while
	 
	 -- start Snap_data
	 SET @snap_data=JSON_EXTRACT(wiTechData,CONCAT('$.ecu_data[',i,'].dtc_data[',dtcDataIndex,'].snap_data'));
	 SET @snapDataLength = JSON_LENGTH(@snap_data);
	 SET snapDataIndex=0;
	 
		 WHILE snapDataIndex < @snapDataLength DO
		 -- Insert data into wiTECH_DTC_SNAP_ENV_DATA of env_data
			 INSERT INTO wiTECH_DTC_SNAP_ENV_DATA 
			 	(I_RO_JOURNEY,
				 T_SESSION,
				 I_ECU,
				 C_DTC,
				 X_ENV_SNAP_TYPE,
				 X_NAME,
				 X_VALUE,
				 X_UNITS,
				 X_VALUE_SI,
				 X_UNITS_SI,
				 N_SRCE_ADD,
				 T_STMP_ADD)
			 VALUES 
			 	(roJourney,
				 NULLIF(JSON_UNQUOTE(JSON_EXTRACT(wiTechData, '$.session_time')), ''),
	    		 NULLIF(JSON_UNQUOTE(JSON_EXTRACT(wiTechData, CONCAT('$.ecu_data[',i,'].ecu_id'))), ''),
		 		 NULLIF(JSON_UNQUOTE(JSON_EXTRACT(wiTechData, CONCAT('$.ecu_data[',i,'].dtc_data[',dtcDataIndex,'].code'))), ''),
				 "ENV",
				 NULLIF(JSON_UNQUOTE(JSON_EXTRACT(wiTechData, CONCAT('$.ecu_data[',i,'].dtc_data[',dtcDataIndex,'].snap_data[',snapDataIndex,'].name'))), ''),
				 NULLIF(JSON_UNQUOTE(JSON_EXTRACT(wiTechData, CONCAT('$.ecu_data[',i,'].dtc_data[',dtcDataIndex,'].snap_data[',snapDataIndex,'].value'))), ''),
				 NULLIF(JSON_UNQUOTE(JSON_EXTRACT(wiTechData, CONCAT('$.ecu_data[',i,'].dtc_data[',dtcDataIndex,'].snap_data[',snapDataIndex,'].units'))), ''),
                 NULLIF(JSON_UNQUOTE(JSON_EXTRACT(wiTechData, CONCAT('$.ecu_data[',i,'].dtc_data[',dtcDataIndex,'].snap_data[',snapDataIndex,'].value_si'))), ''),
                 NULLIF(JSON_UNQUOTE(JSON_EXTRACT(wiTechData, CONCAT('$.ecu_data[',i,'].dtc_data[',dtcDataIndex,'].snap_data[',snapDataIndex,'].units_si'))), ''),
				 "wiTech",
                 CURRENT_TIMESTAMP());	 
			
				 
		 SELECT
		  snapDataIndex + 1 INTO snapDataIndex; -- Add step to snap_D	 
		 END WHILE; -- stop snap_data while

	SELECT dtcDataIndex + 1 INTO dtcDataIndex; -- Add step to dtc_data
	END WHILE; -- stop dtc_data while
	
    
    
-- start raw dtc data from ECU DATA
	SET @raw_dtc_data=JSON_EXTRACT(wiTechData,CONCAT('$.ecu_data[',i,'].raw_dtc_data'));
	SET @rawDtcDataLength = JSON_LENGTH(@raw_dtc_data);
	SET rawDtcDataIndex= 0;
    
	WHILE rawDtcDataIndex < @rawDtcDataLength DO
    
		INSERT INTO wiTECH_ECU_RAW_DTC_DATA
			(I_RO_JOURNEY,
			 T_SESSION,
			 I_ECU,
			 C_REQUEST_TX,
             C_RESPONSE_RX,
			 N_SRCE_ADD,
             T_STMP_ADD) 
		 VALUES (
			 roJourney,
			 NULLIF(JSON_UNQUOTE(JSON_EXTRACT(wiTechData, '$.session_time')), ''),
			 NULLIF(JSON_UNQUOTE(JSON_EXTRACT(wiTechData, CONCAT('$.ecu_data[',i,'].ecu_id'))), ''),
			 NULLIF(JSON_UNQUOTE(JSON_EXTRACT(wiTechData,CONCAT('$.ecu_data[',i,'].raw_dtc_data[',rawDtcDataIndex,'].tx'))), ''),
			 NULLIF(JSON_UNQUOTE(JSON_EXTRACT(wiTechData,CONCAT('$.ecu_data[',i,'].raw_dtc_data[',rawDtcDataIndex,'].rx'))), ''),
             "wiTech",
             CURRENT_TIMESTAMP());
			
		SELECT rawDtcDataIndex + 1 INTO rawDtcDataIndex;
	END WHILE;
	-- Stop raw dtc data
	
	-- start event DATA from ECU DATA
	SET @event_data=JSON_EXTRACT(wiTechData,CONCAT('$.ecu_data[',i,'].event_data'));
	SET @eventDataLength = JSON_LENGTH(@event_data);
	SET eventDataIndex= 0;
    
	WHILE eventDataIndex < @eventDataLength DO
    
		INSERT INTO wiTECH_ECU_EVENT_DATA
			(I_RO_JOURNEY,
			 T_SESSION,
			 I_ECU,
			 X_EVENT_TYPE_NAME,
			 X_VALID,
             N_SRCE_ADD,
             T_STMP_ADD) 
		 VALUES (
			 roJourney,
			 NULLIF(JSON_UNQUOTE(JSON_EXTRACT(wiTechData, '$.session_time')), ''),
			 NULLIF(JSON_UNQUOTE(JSON_EXTRACT(wiTechData, CONCAT('$.ecu_data[',i,'].ecu_id'))), ''),
			 NULLIF(JSON_UNQUOTE(JSON_EXTRACT(wiTechData,CONCAT('$.ecu_data[',i,'].event_data[',eventDataIndex,'].type_name'))), ''),
			 NULLIF(JSON_UNQUOTE(JSON_EXTRACT(wiTechData,CONCAT('$.ecu_data[',i,'].event_data[',eventDataIndex,'].valid'))), ''),
             "wiTech",
             CURRENT_TIMESTAMP());
			
             
        SELECT LAST_INSERT_ID() INTO eventDataAddlInfoId;

		SET @eventDataObject=JSON_EXTRACT(wiTechData,CONCAT('$.ecu_data[',i,'].event_data[',eventDataIndex,'].data'));
		SET eventDataObjectIndex=0;
		SET @eventDataObjectLength = JSON_LENGTH(@eventDataObject);
		
        WHILE eventDataObjectIndex < @eventDataObjectLength DO
        
			INSERT INTO wiTECH_ECU_EVENT_ADDNL_DATA
				(I_ADDNTL_INFO,
				X_NAME,
				X_VALUE,
				X_UNITS,
				X_VALUE_SI,
				X_UNITS_SI,
				N_SRCE_ADD,
				T_STMP_ADD)
			VALUES
				(eventDataAddlInfoId,
				NULLIF(JSON_UNQUOTE(JSON_EXTRACT(wiTechData,CONCAT('$.ecu_data[',i,'].event_data[',eventDataIndex,'].data[',eventDataObjectIndex,'].name'))), ''),
				NULLIF(JSON_UNQUOTE(JSON_EXTRACT(wiTechData,CONCAT('$.ecu_data[',i,'].event_data[',eventDataIndex,'].data[',eventDataObjectIndex,'].value'))), ''),
				NULLIF(JSON_UNQUOTE(JSON_EXTRACT(wiTechData,CONCAT('$.ecu_data[',i,'].event_data[',eventDataIndex,'].data[',eventDataObjectIndex,'].units'))), ''),
                NULLIF(JSON_UNQUOTE(JSON_EXTRACT(wiTechData,CONCAT('$.ecu_data[',i,'].event_data[',eventDataIndex,'].data[',eventDataObjectIndex,'].value_si'))), ''),
				NULLIF(JSON_UNQUOTE(JSON_EXTRACT(wiTechData,CONCAT('$.ecu_data[',i,'].event_data[',eventDataIndex,'].data[',eventDataObjectIndex,'].units_si'))), ''),
				"wiTech",
                CURRENT_TIMESTAMP());
	
		SELECT eventDataObjectIndex + 1 INTO eventDataObjectIndex;
		END WHILE;	
	SELECT eventDataIndex + 1 INTO eventDataIndex;
	END WHILE;
	-- Stop event DATA
	
	
	-- start FF data from ECU DATA

	SET @ff_data=JSON_EXTRACT(wiTechData,CONCAT('$.ecu_data[',i,'].ff_data'));
	SET @ffDataLength = JSON_LENGTH(@ff_data);
    
	SET ffDataIndex= 0;
	
    WHILE ffDataIndex < @ffDataLength DO -- start ff while
	
		INSERT INTO wiTECH_ECU_FF_DATA
			(I_RO_JOURNEY,
			 T_SESSION,
			 I_ECU,
             C_DTC,
			 X_FREEZE_TYPE_NAME,
             C_HEX,
			 X_VALID,
             I_TYPE,
             N_SRCE_ADD,
             T_STMP_ADD) 
		 VALUES (
			roJourney,
			NULLIF(JSON_UNQUOTE(JSON_EXTRACT(wiTechData, '$.session_time')), ''),
			NULLIF(JSON_UNQUOTE(JSON_EXTRACT(wiTechData, CONCAT('$.ecu_data[',i,'].ecu_id'))), ''),
			NULLIF(JSON_UNQUOTE(JSON_EXTRACT(wiTechData, CONCAT('$.ecu_data[',i,'].ff_data[',ffDataIndex,'].code'))), ''),
			NULLIF(JSON_UNQUOTE(JSON_EXTRACT(wiTechData, CONCAT('$.ecu_data[',i,'].ff_data[',ffDataIndex,'].type_name'))), ''),
			NULLIF(JSON_UNQUOTE(JSON_EXTRACT(wiTechData, CONCAT('$.ecu_data[',i,'].ff_data[',ffDataIndex,'].hex_code'))), ''),
 			NULLIF(JSON_UNQUOTE(JSON_EXTRACT(wiTechData, CONCAT('$.ecu_data[',i,'].ff_data[',ffDataIndex,'].valid'))), ''),
			NULLIF(JSON_UNQUOTE(JSON_EXTRACT(wiTechData, CONCAT('$.ecu_data[',i,'].ff_data[',ffDataIndex,'].type'))), ''),
             "wiTech",
             CURRENT_TIMESTAMP());
             
        SELECT LAST_INSERT_ID() INTO ffDataAddlInfoId;
        
		SET @ffDataObject=JSON_EXTRACT(wiTechData,CONCAT('$.ecu_data[',i,'].ff_data[',ffDataIndex,'].data'));
		SET ffDataObjectIndex=0;
		SET @ffDataObjectLength = JSON_LENGTH(@ffDataObject);
	
			WHILE ffDataObjectIndex < @ffDataObjectLength DO -- start ff data while
		
			INSERT INTO wiTECH_ECU_FF_ADDNL_DATA
				(I_ADDNTL_INFO,
				X_NAME,
				X_VALUE,
				X_UNITS,
				X_VALUE_SI,
				X_UNITS_SI,
				N_SRCE_ADD,
				T_STMP_ADD)
			VALUES
				(ffDataAddlInfoId,
				NULLIF(JSON_UNQUOTE(JSON_EXTRACT(wiTechData,CONCAT('$.ecu_data[',i,'].ff_data[',ffDataIndex,'].data[',ffDataObjectIndex,'].name'))), ''),
				NULLIF(JSON_UNQUOTE(JSON_EXTRACT(wiTechData,CONCAT('$.ecu_data[',i,'].ff_data[',ffDataIndex,'].data[',ffDataObjectIndex,'].value'))), ''),
				NULLIF(JSON_UNQUOTE(JSON_EXTRACT(wiTechData,CONCAT('$.ecu_data[',i,'].ff_data[',ffDataIndex,'].data[',ffDataObjectIndex,'].units'))), ''),
                NULLIF(JSON_UNQUOTE(JSON_EXTRACT(wiTechData,CONCAT('$.ecu_data[',i,'].ff_data[',ffDataIndex,'].data[',ffDataObjectIndex,'].value_si'))), ''),
				NULLIF(JSON_UNQUOTE(JSON_EXTRACT(wiTechData,CONCAT('$.ecu_data[',i,'].ff_data[',ffDataIndex,'].data[',ffDataObjectIndex,'].units_si'))), ''),
				"wiTech",
                CURRENT_TIMESTAMP());
                
				SELECT ffDataObjectIndex + 1 INTO ffDataObjectIndex;
			END WHILE; -- end ff data while

	SELECT ffDataIndex + 1 INTO ffDataIndex;
	
    END WHILE;	-- stop ff while
	
	-- stop FF DATA
	
SELECT i + 1 INTO i; -- Add step to ecudata
END WHILE; -- stop ecudata while
COMMIT WORK;


 -- Repeat Repair	update
 CALL PROC_RO_JOURNEY_REPEAT_REPAIR_COMPUTED(
 			roJourney,
			NULLIF(JSON_UNQUOTE(JSON_EXTRACT(wiTechData, '$.vin')), ''),
			NULLIF(JSON_UNQUOTE(JSON_EXTRACT(wiTechData, '$.session_time')), ''),
			90);

END
=============================
CREATE DEFINER=`t12247adm`@`%` PROCEDURE `db_12247_d_001_instance_1`.`PROC_INGEST_WITECH_ROUTINE`(
	IN `wiTechData` JSON,
	IN `roJourney` BIGINT
)
    SQL SECURITY INVOKER
BEGIN
   
	INSERT INTO wiTECH_VEH_TESTS_DATA 
		(
		I_VIN,
		C_DEALER,
		Q_ODOMETER_M,
		T_ROUTINE,
		Q_ODOMETER_K,
		T_SESSION,
		I_MOD_YR,
		C_FAM,
		C_CONTENT,
		C_SESSION_ID,
		C_TEMPLATE_ID,
		C_DOC_TYP,
		C_REGION,
		TIMESTAMPEPOCH,
		N_SRCE_ADD,
		T_STMP_ADD,
		T_ROUTINE_EST
	)
		
	VALUES(

	NULLIF(JSON_UNQUOTE(JSON_EXTRACT(wiTechData, '$.vin')), ''),
    NULLIF(JSON_UNQUOTE(JSON_EXTRACT(wiTechData,'$.dealer_code')), ''),
    NULLIF(JSON_UNQUOTE(JSON_EXTRACT(wiTechData,'$.odometer')), ''),
    
  	NULLIF(FROM_UNIXTIME(LEFT(JSON_UNQUOTE(JSON_EXTRACT(wiTechData,'$.routine_data.session.date')),10),'%Y-%m-%d %H:%i:%s'), ''),
	
    NULLIF(JSON_UNQUOTE(JSON_EXTRACT(wiTechData,'$.odometer_si')), ''),
    NULLIF(JSON_UNQUOTE(JSON_EXTRACT(wiTechData, '$.session_time')), ''),
    NULLIF(JSON_UNQUOTE(JSON_EXTRACT(wiTechData,'$.year')), ''),
    NULLIF(JSON_UNQUOTE(JSON_EXTRACT(wiTechData,'$.body')), ''),
    NULLIF(JSON_UNQUOTE(JSON_EXTRACT(wiTechData,'$.routine_data.content')), ''),
    NULLIF(JSON_UNQUOTE(JSON_EXTRACT(wiTechData,'$.sessionId')), ''),
	NULLIF(JSON_UNQUOTE(JSON_EXTRACT(wiTechData,'$.templateId')), ''),
    NULLIF(JSON_UNQUOTE(JSON_EXTRACT(wiTechData,'$.routine_data.documentType')), ''),
    NULLIF(JSON_UNQUOTE(JSON_EXTRACT(wiTechData,'$.region')), ''),
    NULLIF(JSON_UNQUOTE(JSON_EXTRACT(wiTechData,'$.timestampEpoch')), ''),
    "wiTech",
    CURRENT_TIMESTAMP(),
    
    NULLIF(SUBTIME(FROM_UNIXTIME(LEFT(JSON_UNQUOTE(JSON_EXTRACT(wiTechData,'$.routine_data.session.date')),10),'%Y-%m-%d %H:%i:%s'), "5:0:0"), '')
    
--     NULLIF(CONVERT_TZ(FROM_UNIXTIME(LEFT(JSON_UNQUOTE(JSON_EXTRACT(wiTechData,'$.routine_data.session.date')),10),'%Y-%m-%d %H:%i:%s'),'+00:00','-05:00'), '')
--     NULLIF(FROM_UNIXTIME(LEFT(JSON_UNQUOTE(JSON_EXTRACT(wiTechData,'$.routine_data.session.date')),10),'%Y-%m-%d %H:%i:%s'), '')
    		
    );
    
  
END
============================
CREATE DEFINER=`t12247adm`@`%` PROCEDURE `db_12247_d_001_instance_1`.`PROC_INGEST_WITECH_SUPPLEMENTAL`(
	IN `wiTechData` JSON,
	IN `roJourney` BIGINT
)
    SQL SECURITY INVOKER
BEGIN



DECLARE ecuIdx INT DEFAULT 0;
DECLARE legIdx INT DEFAULT 0;
DECLARE comserIdx INT DEFAULT 0;
DECLARE convIdx INT DEFAULT 0;

DECLARE comserDataAddlInfoId BIGINT;


DECLARE EXIT HANDLER FOR SQLEXCEPTION

BEGIN
SHOW ERRORS;
ROLLBACK;
END;

START TRANSACTION;

-- VEHICLE DATA
INSERT INTO wiTECH_VEH_DATA 
	(I_RO_JOURNEY, 
    I_VIN, 
    C_DLR,
    Q_ODOMETER,
    Q_ODOMETER_SI,
    T_SESSION,
    C_DEVICE_SN,
    I_MOD_YR,
    C_BODY,
    C_VEHICLE_MODEL,
    REGION,
    QDFMETADATA,
    TIMESTAMPEPOCH,
    C_SESSION_ID,
    C_TEMPLATE_ID,
	N_SRCE_ADD,
	T_STMP_ADD)
VALUES (
	 roJourney,
    NULLIF(JSON_UNQUOTE(JSON_EXTRACT(wiTechData,'$.vin')), ''),
    NULLIF(JSON_UNQUOTE(JSON_EXTRACT(wiTechData,'$.dealer_code')), ''),
    IFNULL(NULLIF(JSON_UNQUOTE(JSON_EXTRACT(wiTechData,'$.odometer')), ''),0),
	NULLIF(JSON_UNQUOTE(JSON_EXTRACT(wiTechData,'$.odometer_si')), ''),
	NULLIF(JSON_UNQUOTE(JSON_EXTRACT(wiTechData,'$.session_time')), ''),
	NULLIF(JSON_UNQUOTE(JSON_EXTRACT(wiTechData,'$.device_sn')), ''),
    NULLIF(JSON_UNQUOTE(JSON_EXTRACT(wiTechData,'$.year')), ''),
    NULLIF(JSON_UNQUOTE(JSON_EXTRACT(wiTechData,'$.body')), ''),
    NULLIF(JSON_UNQUOTE(JSON_EXTRACT(wiTechData,'$.model')), ''),
	NULLIF(JSON_UNQUOTE(JSON_EXTRACT(wiTechData,'$.region')), ''),
    NULLIF(JSON_UNQUOTE(JSON_EXTRACT(wiTechData,'$.qdfMetadata')), ''),
    NULLIF(JSON_UNQUOTE(JSON_EXTRACT(wiTechData,'$.timestampEpoch')), ''),
    NULLIF(JSON_UNQUOTE(JSON_EXTRACT(wiTechData,'$.sessionId')), ''),
    NULLIF(JSON_UNQUOTE(JSON_EXTRACT(wiTechData,'$.templateId')), ''),
	"wiTech",
    CURRENT_TIMESTAMP());


-- ECU 

SET @ecu_data=JSON_EXTRACT(wiTechData,'$.ecu_data');
SET @ecuDataLength = JSON_LENGTH(@ecu_data);

WHILE ecuIdx < @ecuDataLength DO

	INSERT INTO wiTECH_ECU_SUPPLEMENTAL_DATA
		(`I_RO_JOURNEY`,
		`T_SESSION`,
		`C_IDENT`,
		`I_ECU`,
        `X_ECU`,
		`ACTUAL_IDENT`,
		`IS_EXACT_IDENT`,
        `C_BIN`,
        `X_INT_BATT_SOC`,
        `X_IBS_INIT_STATUS`,
        `X_BATT_VOLTAGE`,
		`ECU_SERIAL_NUM`,
		`N_SRCE_ADD`,
		`T_STMP_ADD`)
	VALUES
		(roJourney,
		NULLIF(JSON_UNQUOTE(JSON_EXTRACT(wiTechData, '$.session_time')), ''),
		NULLIF(JSON_UNQUOTE(JSON_EXTRACT(wiTechData, CONCAT('$.ecu_data[',ecuIdx,'].ident'))), ''),
		NULLIF(JSON_UNQUOTE(JSON_EXTRACT(wiTechData, CONCAT('$.ecu_data[',ecuIdx,'].ecu_id'))), ''),
        NULLIF(JSON_UNQUOTE(JSON_EXTRACT(wiTechData, CONCAT('$.ecu_data[',ecuIdx,'].ecu'))), ''),
		NULLIF(JSON_UNQUOTE(JSON_EXTRACT(wiTechData, CONCAT('$.ecu_data[',ecuIdx,'].actual_ident'))), ''),
		NULLIF(JSON_UNQUOTE(JSON_EXTRACT(wiTechData, CONCAT('$.ecu_data[',ecuIdx,'].is_exact_ident'))), ''),
        NULLIF(JSON_UNQUOTE(JSON_EXTRACT(wiTechData, CONCAT('$.ecu_data[',ecuIdx,'].bin'))), ''),
        NULLIF(JSON_UNQUOTE(JSON_EXTRACT(wiTechData, CONCAT('$.ecu_data[',ecuIdx,'].int_batt_soc'))), ''),
        NULLIF(JSON_UNQUOTE(JSON_EXTRACT(wiTechData, CONCAT('$.ecu_data[',ecuIdx,'].ibs_init_status'))), ''),
        NULLIF(JSON_UNQUOTE(JSON_EXTRACT(wiTechData, CONCAT('$.ecu_data[',ecuIdx,'].batt_voltage'))), ''),
	    NULLIF(JSON_UNQUOTE(JSON_EXTRACT(wiTechData, CONCAT('$.ecu_data[',ecuIdx,'].ecu_serial_num'))), ''),
		'wiTech',
		CURRENT_TIMESTAMP());

		-- legislative 
		SET @legislative_data=JSON_EXTRACT(wiTechData,CONCAT('$.ecu_data[',ecuIdx,'].legislative_data'));
		SET @legDataLength = JSON_LENGTH(@legislative_data);
		SET legIdx= 0;

		WHILE legIdx < @legDataLength DO
	
			INSERT INTO wiTECH_ECU_SUPPLEMENTAL_LEGISLATIVE_DATA
				(`I_RO_JOURNEY`,
				`T_SESSION`,
				`C_REQ`,
				`C_RAW_RESP`,
				`I_ECU`,
				`I_RESP`,
                `N_SRCE_ADD`,
				`T_STMP_ADD`)
			VALUES
				(roJourney,
				NULLIF(JSON_UNQUOTE(JSON_EXTRACT(wiTechData, '$.session_time')), ''),
				NULLIF(JSON_UNQUOTE(JSON_EXTRACT(wiTechData, CONCAT('$.ecu_data[',ecuIdx,'].legislative_data[',legIdx,'].req'))), ''),
				NULLIF(JSON_UNQUOTE(JSON_EXTRACT(wiTechData, CONCAT('$.ecu_data[',ecuIdx,'].legislative_data[',legIdx,'].raw_resp'))), ''),
				NULLIF(JSON_UNQUOTE(JSON_EXTRACT(wiTechData, CONCAT('$.ecu_data[',ecuIdx,'].legislative_data[',legIdx,'].ecu_id'))), ''),
				NULLIF(JSON_UNQUOTE(JSON_EXTRACT(wiTechData, CONCAT('$.ecu_data[',ecuIdx,'].legislative_data[',legIdx,'].resp_id'))), ''),
				'wiTech',
				CURRENT_TIMESTAMP());
	
			SELECT legIdx + 1 INTO legIdx; -- Add step to legislative_data
		
		END WHILE; -- stop legislative_data while
		
		
		-- comser_data 
		SET @comser_data=JSON_EXTRACT(wiTechData,CONCAT('$.ecu_data[',ecuIdx,'].comser_data'));
		SET @comserDataLength = JSON_LENGTH(@comser_data);
		SET comserIdx= 0;

		WHILE comserIdx < @comserDataLength DO
	
			INSERT INTO wiTECH_ECU_SUPPLEMENTAL_COMSER_DATA
				(`I_RO_JOURNEY`,
				`T_SESSION`,
				`I_ECU`,
				`C_REQ`,
				`C_RESP`,
				`C_NO_RESP`,
				`C_NEG_RESP`,
				`C_DB_ENTRY`,
				`N_SRCE_ADD`,
				`T_STMP_ADD`)
			VALUES
				(roJourney,
				NULLIF(JSON_UNQUOTE(JSON_EXTRACT(wiTechData, '$.session_time')), ''),
				NULLIF(JSON_UNQUOTE(JSON_EXTRACT(wiTechData, CONCAT('$.ecu_data[',ecuIdx,'].ecu_id'))), ''),
				NULLIF(JSON_UNQUOTE(JSON_EXTRACT(wiTechData, CONCAT('$.ecu_data[',ecuIdx,'].comser_data[',comserIdx,'].req'))), ''),
				NULLIF(JSON_UNQUOTE(JSON_EXTRACT(wiTechData, CONCAT('$.ecu_data[',ecuIdx,'].comser_data[',comserIdx,'].resp'))), ''),
				NULLIF(JSON_UNQUOTE(JSON_EXTRACT(wiTechData, CONCAT('$.ecu_data[',ecuIdx,'].comser_data[',comserIdx,'].no_resp'))), ''),
				NULLIF(JSON_UNQUOTE(JSON_EXTRACT(wiTechData, CONCAT('$.ecu_data[',ecuIdx,'].comser_data[',comserIdx,'].neg_resp'))), ''),
				NULLIF(JSON_UNQUOTE(JSON_EXTRACT(wiTechData, CONCAT('$.ecu_data[',ecuIdx,'].comser_data[',comserIdx,'].db_entry'))), ''),
				'wiTech',
				CURRENT_TIMESTAMP());

			SELECT LAST_INSERT_ID() INTO comserDataAddlInfoId;
            
			-- conv data
			SET @conv_data=JSON_EXTRACT(wiTechData,CONCAT('$.ecu_data[',ecuIdx,'].comser_data[',comserIdx,'].conv_data'));
			SET @convDataLength = JSON_LENGTH(@conv_data);
			SET convIdx= 0;

			WHILE convIdx < @convDataLength DO
		
					INSERT INTO wiTECH_ECU_SUPPLEMENTAL_COMSER_CONV_ADDNL_DATA 
						(I_ADDNTL_INFO,
						X_NAME,
						X_VALUE,
						X_UNITS,
						X_VALUE_SI,
						X_UNITS_SI,
						N_SRCE_ADD,
						T_STMP_ADD)
					VALUES
						(comserDataAddlInfoId,
						NULLIF(JSON_UNQUOTE(JSON_EXTRACT(wiTechData,CONCAT('$.ecu_data[',ecuIdx,'].comser_data[',comserIdx,'].conv_data[',convIdx,'].name'))), ''),
						NULLIF(JSON_UNQUOTE(JSON_EXTRACT(wiTechData,CONCAT('$.ecu_data[',ecuIdx,'].comser_data[',comserIdx,'].conv_data[',convIdx,'].value'))), ''),
						NULLIF(JSON_UNQUOTE(JSON_EXTRACT(wiTechData,CONCAT('$.ecu_data[',ecuIdx,'].comser_data[',comserIdx,'].conv_data[',convIdx,'].units'))), ''),
						NULLIF(JSON_UNQUOTE(JSON_EXTRACT(wiTechData,CONCAT('$.ecu_data[',ecuIdx,'].comser_data[',comserIdx,'].conv_data[',convIdx,'].value_si'))), ''),
						NULLIF(JSON_UNQUOTE(JSON_EXTRACT(wiTechData,CONCAT('$.ecu_data[',ecuIdx,'].comser_data[',comserIdx,'].conv_data[',convIdx,'].units_si'))), ''),
						"wiTech",
						CURRENT_TIMESTAMP());
		
				SELECT convIdx + 1 INTO convIdx; -- Add step to conv_data
			
			END WHILE; -- stop conv_data while
	
		SELECT comserIdx + 1 INTO comserIdx; -- Add step to comser_data
		
	END WHILE; -- stop comser_data while
		

SELECT ecuIdx + 1 INTO ecuIdx; -- Add step to ecudata
END WHILE; -- stop ecudata while

COMMIT WORK;


END
======================
CREATE DEFINER=`t12247adm`@`%` PROCEDURE `db_12247_d_001_instance_1`.`PROC_LOOKUP_BUSINESS_CENTER`()
    SQL SECURITY INVOKER
BEGIN

	SELECT DISTINCT d.X_COUNTRY AS CODE, rjo.N_BUSINESS_CENTER AS NAME   
	FROM DEALER_MASTER d
	INNER JOIN BUSINESS_CENTER_DESC b ON d.C_DLR_BUSINESS=b.C_BUSINESS_CENTER AND d.X_COUNTRY=b.X_COUNTRY
	INNER JOIN RO_JOURNEY_OPEN rjo ON d.C_DLR=rjo.C_DLR
	WHERE rjo.N_BUSINESS_CENTER != ' '
	ORDER BY d.X_COUNTRY,rjo.N_BUSINESS_CENTER;
	
END
===========================
CREATE DEFINER=`t12247adm`@`%` PROCEDURE `db_12247_d_001_instance_1`.`PROC_MIGRATE_CHERWELL`(
IN JOURNEY_DATE DATE
)
    SQL SECURITY INVOKER
BEGIN
	DECLARE done 								INT DEFAULT 0	;
	DECLARE CHK_VEHICLE 						INT 			;
	DECLARE CNT_I_RO 							INT 			;
	
    DECLARE VAR_CASEID 							VARCHAR(20)		;
	DECLARE VAR_I_VIN							VARCHAR(20)	    ;
	DECLARE VAR_C_DLR							VARCHAR(20)		;
    
	
    DECLARE VAR_CHERWELL_CASE_OPEN_DATE			TIMESTAMP       ;
	DECLARE VAR_CHERWELL_CASE_CLOSE_DATE		TIMESTAMP       ;
	DECLARE VAR_I_RO							INT             ;
	DECLARE VAR_Q_ODOMETER						FLOAT           ;
	DECLARE VAR_VEHICLEOFFROAD					VARCHAR(15)     ;
	
	DECLARE VAR_I_RO_JOURNEY 					BIGINT			;
	
    DECLARE cur CURSOR FOR
		SELECT A.CASEID
			  ,A.I_VIN
			  ,A.C_DLR
			  ,A.CREATEDDATETIME 
			  ,A.CLOSEDDATETIME
			  ,B.I_RO
		      ,B.Q_ODOMETER
			  ,B.VEHICLEOFFROAD
		  FROM          
			(SELECT   CASEID
					 ,I_VIN
					 ,C_DLR
					 ,CREATEDDATETIME 
					 ,CLOSEDDATETIME
				FROM TEMP_CHERWELL_CASE_PART1
				WHERE
				 (DATE(CREATEDDATETIME) =  JOURNEY_DATE OR DATE(CLOSEDDATETIME) =  JOURNEY_DATE)
			 ) A,
			  TEMP_CHERWELL_CASE_PART2 B
			WHERE A.CASEID = B.CASEID
			#AND B.I_RO IS NOT NULL
			#LIMIT 100	
		;
      
    DECLARE CONTINUE HANDLER FOR NOT FOUND SET done = 1;
      
    OPEN cur;
    label: LOOP
    FETCH cur INTO  
					 VAR_CASEID
					,VAR_I_VIN
					,VAR_C_DLR
					,VAR_CHERWELL_CASE_OPEN_DATE
					,VAR_CHERWELL_CASE_CLOSE_DATE
                    ,VAR_I_RO
					,VAR_Q_ODOMETER
					,VAR_VEHICLEOFFROAD
     ;
      
    IF done = 1 THEN LEAVE label;
	END IF;
    
    SET VAR_I_RO_JOURNEY = NULL;
     
	CALL PROC_RO_JOURNEY_CHERWELL(
								VAR_I_VIN							,
								VAR_C_DLR							,					
								VAR_Q_ODOMETER						,
								VAR_CASEID							,
								VAR_I_RO							,
								VAR_VEHICLEOFFROAD					,
								VAR_CHERWELL_CASE_OPEN_DATE			,
								VAR_CHERWELL_CASE_CLOSE_DATE		,
								'N'									,
								'CHERWELL'							,
								VAR_I_RO_JOURNEY 					
							 )
         ; 
	
   SET SQL_SAFE_UPDATES = 0; 
   
    UPDATE TEMP_CHERWELL_CASE_PART1
		SET I_RO_JOURNEY = VAR_I_RO_JOURNEY
		WHERE CASEID = VAR_CASEID
		;
    
    #SELECT VAR_I_RO_JOURNEY;
    COMMIT WORK; 
    
    END LOOP label;
    CLOSE cur;
END
=============================
CREATE DEFINER=`t12247adm`@`%` PROCEDURE `db_12247_d_001_instance_1`.`PROC_MIGRATE_CHERWELL_CLOSE`(
IN JOURNEY_DATE DATE
)
    SQL SECURITY INVOKER
BEGIN
	DECLARE done 								INT DEFAULT 0	;
	DECLARE CHK_VEHICLE 						INT 			;
	DECLARE CNT_I_RO 							INT 			;
	
    DECLARE VAR_CASEID 							VARCHAR(20)		;
	DECLARE VAR_I_VIN							VARCHAR(20)	    ;
	DECLARE VAR_C_DLR							VARCHAR(20)		;
    
	
    DECLARE VAR_CHERWELL_CASE_OPEN_DATE			TIMESTAMP       ;
	DECLARE VAR_CHERWELL_CASE_CLOSE_DATE		TIMESTAMP       ;
	DECLARE VAR_I_RO							INT             ;
	DECLARE VAR_Q_ODOMETER						FLOAT           ;
	DECLARE VAR_VEHICLEOFFROAD					VARCHAR(15)     ;
	
	DECLARE VAR_I_RO_JOURNEY 					BIGINT			;
	
    DECLARE cur CURSOR FOR
		SELECT A.CASEID
			  ,A.I_VIN
			  ,A.C_DLR
			  ,A.CREATEDDATETIME 
			  ,A.CLOSEDDATETIME
			  ,B.I_RO
		      ,B.Q_ODOMETER
			  ,B.VEHICLEOFFROAD
		  FROM          
			(SELECT   CASEID
					 ,I_VIN
					 ,C_DLR
					 ,CREATEDDATETIME 
					 ,CLOSEDDATETIME
				FROM TEMP_CHERWELL_CASE_PART1
				WHERE
				 #(DATE(CREATEDDATETIME) =  JOURNEY_DATE OR DATE(CLOSEDDATETIME) =  JOURNEY_DATE)
                 (DATE(CLOSEDDATETIME) =  JOURNEY_DATE)
			 ) A,
			  TEMP_CHERWELL_CASE_PART2 B
			WHERE A.CASEID = B.CASEID
			#AND B.I_RO IS NOT NULL
			#LIMIT 1	
		;
      
    DECLARE CONTINUE HANDLER FOR NOT FOUND SET done = 1;
      
    OPEN cur;
    label: LOOP
    FETCH cur INTO  
					 VAR_CASEID
					,VAR_I_VIN
					,VAR_C_DLR
					,VAR_CHERWELL_CASE_OPEN_DATE
					,VAR_CHERWELL_CASE_CLOSE_DATE
                    ,VAR_I_RO
					,VAR_Q_ODOMETER
					,VAR_VEHICLEOFFROAD
     ;
      
    IF done = 1 THEN LEAVE label;
	END IF;
    
    SET VAR_I_RO_JOURNEY = NULL;
     
	CALL PROC_RO_JOURNEY_CHERWELL(
								VAR_I_VIN							,
								VAR_C_DLR							,					
								VAR_Q_ODOMETER						,
								VAR_CASEID							,
								VAR_I_RO							,
								VAR_VEHICLEOFFROAD					,
								VAR_CHERWELL_CASE_OPEN_DATE			,
								VAR_CHERWELL_CASE_CLOSE_DATE		,
								'O'									,
								'CHERWELL'							,
								VAR_I_RO_JOURNEY 					
							 )
         ; 
	
   SET SQL_SAFE_UPDATES = 0; 
   
    UPDATE TEMP_CHERWELL_CASE_PART1
		SET I_RO_JOURNEY = VAR_I_RO_JOURNEY
		WHERE CASEID = VAR_CASEID
		;
    
    #SELECT VAR_I_RO_JOURNEY;
    COMMIT WORK; 
    
    END LOOP label;
    CLOSE cur;
END
=======================================
CREATE DEFINER=`t12247adm`@`%` PROCEDURE `db_12247_d_001_instance_1`.`PROC_MIGRATE_CHERWELL_OPEN`(
IN JOURNEY_DATE DATE
)
    SQL SECURITY INVOKER
BEGIN
	DECLARE done 								INT DEFAULT 0	;
	DECLARE CHK_VEHICLE 						INT 			;
	DECLARE CNT_I_RO 							INT 			;
	
    DECLARE VAR_CASEID 							VARCHAR(20)		;
	DECLARE VAR_I_VIN							VARCHAR(20)	    ;
	DECLARE VAR_C_DLR							VARCHAR(20)		;
    
	
    DECLARE VAR_CHERWELL_CASE_OPEN_DATE			TIMESTAMP       ;
	DECLARE VAR_CHERWELL_CASE_CLOSE_DATE		TIMESTAMP       ;
	DECLARE VAR_I_RO							INT             ;
	DECLARE VAR_Q_ODOMETER						FLOAT           ;
	DECLARE VAR_VEHICLEOFFROAD					VARCHAR(15)     ;
	
	DECLARE VAR_I_RO_JOURNEY 					BIGINT			;
	
    DECLARE cur CURSOR FOR
		SELECT A.CASEID
			  ,A.I_VIN
			  ,A.C_DLR
			  ,A.CREATEDDATETIME 
			  ,A.CLOSEDDATETIME
			  ,B.I_RO
		      ,B.Q_ODOMETER
			  ,B.VEHICLEOFFROAD
		  FROM          
			(SELECT   CASEID
					 ,I_VIN
					 ,C_DLR
					 ,CREATEDDATETIME 
					 ,NULL AS CLOSEDDATETIME
				FROM TEMP_CHERWELL_CASE_PART1
				WHERE
				 #(DATE(CREATEDDATETIME) =  JOURNEY_DATE OR DATE(CLOSEDDATETIME) =  JOURNEY_DATE)
                 (DATE(CREATEDDATETIME) =  JOURNEY_DATE)
			 ) A,
			  TEMP_CHERWELL_CASE_PART2 B
			WHERE A.CASEID = B.CASEID
			#AND B.I_RO IS NOT NULL
			#LIMIT 1	
		;
      
    DECLARE CONTINUE HANDLER FOR NOT FOUND SET done = 1;
      
    OPEN cur;
    label: LOOP
    FETCH cur INTO  
					 VAR_CASEID
					,VAR_I_VIN
					,VAR_C_DLR
					,VAR_CHERWELL_CASE_OPEN_DATE
					,VAR_CHERWELL_CASE_CLOSE_DATE
                    ,VAR_I_RO
					,VAR_Q_ODOMETER
					,VAR_VEHICLEOFFROAD
     ;
      
    IF done = 1 THEN LEAVE label;
	END IF;
    
    SET VAR_I_RO_JOURNEY = NULL;
     
	CALL PROC_RO_JOURNEY_CHERWELL(
								VAR_I_VIN							,
								VAR_C_DLR							,					
								VAR_Q_ODOMETER						,
								VAR_CASEID							,
								VAR_I_RO							,
								VAR_VEHICLEOFFROAD					,
								VAR_CHERWELL_CASE_OPEN_DATE			,
								VAR_CHERWELL_CASE_CLOSE_DATE		,
								'N'									,
								'CHERWELL'							,
								VAR_I_RO_JOURNEY 					
							 )
         ; 
	
   SET SQL_SAFE_UPDATES = 0; 
   
    UPDATE TEMP_CHERWELL_CASE_PART1
		SET I_RO_JOURNEY = VAR_I_RO_JOURNEY
		WHERE CASEID = VAR_CASEID
		;
    
    #SELECT VAR_I_RO_JOURNEY;
    COMMIT WORK; 
    
    END LOOP label;
    CLOSE cur;
END
=============================
CREATE DEFINER=`t12247adm`@`%` PROCEDURE `db_12247_d_001_instance_1`.`PROC_MIGRATE_DAYWISE`(
IN JOURNEY_DATE DATE
)
    SQL SECURITY INVOKER
BEGIN
		DECLARE done INT DEFAULT 0;
        DECLARE DATE_START DATE;
        DECLARE CNT_LOOP INT;
        
        SET DATE_START = JOURNEY_DATE;
                
        #SELECT DATE_START+1;
        
        #ALTER TABLE MIGRATION_STATUS MODIFY M_STATUS VARCHAR(20);
        
        SET CNT_LOOP = 0;
		          
         label: LOOP
         	 	
			  INSERT INTO MIGRATION_STATUS(M_DATE,M_STATUS,JOB_START_TIME) 
              VALUES(DATE_START, 'N_MIGRATION_10OCT22_ONWARDS_REPEAT_REPAIR',NOW());		
		      
              #SELECT DATE_START;
			  
              SET SQL_SAFE_UPDATES = 0;
/*
			  UPDATE MIGRATION_STATUS 
              SET JOB_START_wiADVISOR = NOW()
              WHERE M_DATE = DATE_START;
              
              CALL PROC_MIGRATE_wiADVISOR(DATE_START);
			
              SET SQL_SAFE_UPDATES = 0;

              UPDATE MIGRATION_STATUS 
              SET JOB_END_wiADVISOR = NOW()
              WHERE M_DATE = DATE_START;
	*/
  
/*
			  SET SQL_SAFE_UPDATES = 0;

              UPDATE MIGRATION_STATUS 
              SET JOB_START_wiTECH = NOW()
              WHERE M_DATE = DATE_START
              AND M_STATUS = 'N_MIGRATION_10OCT22_ONWARDS';
                           
              CALL PROC_MIGRATE_wiTECH(DATE_START);
			  
              SET SQL_SAFE_UPDATES = 0;

			  UPDATE MIGRATION_STATUS 
              SET JOB_END_wiTECH = NOW()
              WHERE M_DATE = DATE_START
			  AND M_STATUS = 'N_MIGRATION_10OCT22_ONWARDS'
              ;
              
              SET SQL_SAFE_UPDATES = 0;

              UPDATE MIGRATION_STATUS 
              SET JOB_START_QNA = NOW()
              WHERE M_DATE = DATE_START
              AND M_STATUS = 'N_MIGRATION_10OCT22_ONWARDS'
              ;
                            
              CALL PROC_MIGRATE_QNA_OPEN(DATE_START);
        	  CALL PROC_MIGRATE_QNA_CLOSE(DATE_START);
              
              SET SQL_SAFE_UPDATES = 0;

			  UPDATE MIGRATION_STATUS 
              SET JOB_END_QNA = NOW()
              WHERE M_DATE = DATE_START
              AND M_STATUS = 'N_MIGRATION_10OCT22_ONWARDS'
              ;
			  
              SET SQL_SAFE_UPDATES = 0;

              UPDATE MIGRATION_STATUS 
              SET JOB_START_SM = NOW()
              WHERE M_DATE = DATE_START
              AND M_STATUS = 'N_MIGRATION_10OCT22_ONWARDS'
             ;
              
              CALL PROC_MIGRATE_SM_CLOSE(DATE_START);
              
              SET SQL_SAFE_UPDATES = 0;

			  UPDATE MIGRATION_STATUS 
              SET JOB_END_SM = NOW()
              WHERE M_DATE = DATE_START
              AND M_STATUS = 'N_MIGRATION_10OCT22_ONWARDS'
              ;
	*/		 
             /*
			  SET SQL_SAFE_UPDATES = 0;

              UPDATE MIGRATION_STATUS 
              SET JOB_START_CHERWELL = NOW()
              WHERE M_DATE = DATE_START
              AND M_STATUS = 'N_MIGRATION_10OCT22_ONWARDS_CHERWELL'
              ;
              
			  
              CALL PROC_MIGRATE_CHERWELL_OPEN(DATE_START);
			  CALL PROC_MIGRATE_CHERWELL_CLOSE(DATE_START);
			  SET SQL_SAFE_UPDATES = 0;

              UPDATE MIGRATION_STATUS 
              SET JOB_END_CHERWELL = NOW()
              WHERE M_DATE = DATE_START
              AND M_STATUS = 'N_MIGRATION_10OCT22_ONWARDS_CHERWELL'
              ;
           
           */
           
			CALL PROC_MIGRATE_UPDATE_REPEAT_REPAIR(DATE_START);
			  
           
              SET SQL_SAFE_UPDATES = 0;
              UPDATE MIGRATION_STATUS 
              SET M_STATUS = 'S_MIGRATION_10OCT22_ONWARDS_REPEAT_REPAIR'
             	 ,JOB_END_TIME = NOW()
              WHERE M_DATE = DATE_START
              AND M_STATUS = 'N_MIGRATION_10OCT22_ONWARDS_REPEAT_REPAIR'
              ;
              
              SET DATE_START = DATE_ADD(DATE_START, INTERVAL 1 DAY);
			  SET CNT_LOOP = CNT_LOOP + 1 ;
	    	
          IF CNT_LOOP < 10 THEN
			 ITERATE label;
          END IF;
		  LEAVE label;
		 END LOOP label;
	 		
END
================================
CREATE DEFINER=`t12247adm`@`%` PROCEDURE `db_12247_d_001_instance_1`.`PROC_MIGRATE_QNA_CLOSE`(
IN JOURNEY_DATE DATE
)
    SQL SECURITY INVOKER
BEGIN
		DECLARE done INT DEFAULT 0;
        DECLARE CHK_VEHICLE INT ;
        
        DECLARE VAR_I_RO_JOURNEY BIGINT;
		DECLARE VAR_I_VIN VARCHAR(20);
        DECLARE VAR_I_SYS_KEY BIGINT;
        DECLARE VAR_C_DLR VARCHAR(20);
		DECLARE VAR_Q_ODOMETER FLOAT;
		DECLARE VAR_D_RO_OPEN DATE;
		DECLARE VAR_D_RO_CLOSE DATE; 
		#DECLARE VAR_I_RO INT;

		DECLARE VAR_I_RO VARCHAR(30);
		DECLARE VAR_I_MOD_YR INT;
		DECLARE VAR_C_FAM VARCHAR(30);
		DECLARE VAR_C_ENG VARCHAR(10);
        DECLARE VAR_C_FUEL_TYPE VARCHAR(50);
		DECLARE VAR_C_TRANSM VARCHAR(50);
		DECLARE VAR_D_LAST_SERVICE_PREV_RO TIMESTAMP;
        DECLARE VAR_L_COMPTV_VHCL CHAR(1);
		
        DECLARE I_RO_JOURNEY BIGINT;
		
        
      DECLARE cur CURSOR FOR 
      SELECT  
         I_VIN
        ,I_SYS_KEY
		,C_DLR
		,Q_ODOMETER
		,D_OPEN_RO
		,D_CLOSE_RO
		,I_RO
      FROM 
      #TEMP_QNA_DATA
      QNA_DATA
	  WHERE D_CLOSE_RO = JOURNEY_DATE  	
      #AND I_VIN = '1C4RJHBG4N8599913'
	  #AND I_RO IN ('111451A')
      #WHERE I_VIN = '1C4JJXP60NW275053'
     # LIMIT 100
      ;
      
      DECLARE CONTINUE HANDLER FOR NOT FOUND SET done = 1;
     
      OPEN cur;
      label: LOOP
      FETCH cur INTO  
		 VAR_I_VIN
		,VAR_I_SYS_KEY
        ,VAR_C_DLR
		,VAR_Q_ODOMETER
		,VAR_D_RO_OPEN
		,VAR_D_RO_CLOSE
		,VAR_I_RO
        ;
    IF done = 1 THEN LEAVE label;
	END IF;
        
     SELECT COUNT(1) INTO CHK_VEHICLE
			FROM VEHICLE_MASTER
		 WHERE I_VIN = VAR_I_VIN	
		 ;  
		 
		 IF CHK_VEHICLE > 0 THEN 
			SELECT   
                 I_MOD_YR
				,C_FAM
				,C_ENGINE_SALES_CODE
                ,C_FUEL_TYPE
				,C_TRANSMISSION_SALES_CODE
				,D_LAST_SERVICE
			INTO 
				 VAR_I_MOD_YR
				,VAR_C_FAM
				,VAR_C_ENG
				,VAR_C_FUEL_TYPE
                ,VAR_C_TRANSM
				,VAR_D_LAST_SERVICE_PREV_RO	 
			FROM VEHICLE_MASTER
		 WHERE I_VIN = VAR_I_VIN	
		 ;
		ELSE 
				SET VAR_I_MOD_YR				= NULL;
				SET VAR_C_FAM                   = NULL;
				SET VAR_C_ENG                   = NULL;
				SET VAR_C_FUEL_TYPE				= NULL;
				SET VAR_C_TRANSM                = NULL;
				SET VAR_D_LAST_SERVICE_PREV_RO  = NULL;
		END IF;
			CALL PROC_RO_JOURNEY_QNA_SM(
			 VAR_I_VIN
			,VAR_C_DLR
			,VAR_Q_ODOMETER
			,VAR_D_RO_OPEN
			,VAR_D_RO_CLOSE
			,VAR_I_RO
			,'QNA'
			,VAR_I_MOD_YR
			,VAR_C_FAM
			,VAR_C_ENG
            ,VAR_C_FUEL_TYPE
			,NULL
            ,VAR_C_TRANSM
			,VAR_D_LAST_SERVICE_PREV_RO
			,VAR_I_RO_JOURNEY
            ) 
     ; 
	
	   UPDATE 
       #TEMP_QNA_DATA
       QNA_DATA
		SET I_RO_JOURNEY = VAR_I_RO_JOURNEY
		WHERE  I_SYS_KEY = VAR_I_SYS_KEY
		   AND I_VIN = VAR_I_VIN
		 ;
    COMMIT;
    #SELECT VAR_I_RO_JOURNEY;
   END LOOP label;
  CLOSE cur;
END
========================================
CREATE DEFINER=`t12247adm`@`%` PROCEDURE `db_12247_d_001_instance_1`.`PROC_MIGRATE_QNA_OPEN`(
IN JOURNEY_DATE DATE
)
    SQL SECURITY INVOKER
BEGIN
		DECLARE done INT DEFAULT 0;
        DECLARE CHK_VEHICLE INT ;
        
        DECLARE VAR_I_RO_JOURNEY BIGINT;
		DECLARE VAR_I_VIN VARCHAR(20);
        DECLARE VAR_I_SYS_KEY BIGINT;
        DECLARE VAR_C_DLR VARCHAR(20);
		DECLARE VAR_Q_ODOMETER FLOAT;
		DECLARE VAR_D_RO_OPEN DATE;
		DECLARE VAR_D_RO_CLOSE DATE; 
		
        
        #DECLARE VAR_I_RO INT;
        
        DECLARE VAR_I_RO VARCHAR(30);

		DECLARE VAR_I_MOD_YR INT;
		DECLARE VAR_C_FAM VARCHAR(30);
		DECLARE VAR_C_ENG VARCHAR(10);
        DECLARE VAR_C_FUEL_TYPE VARCHAR(50);
		DECLARE VAR_C_TRANSM VARCHAR(50);
		DECLARE VAR_D_LAST_SERVICE_PREV_RO TIMESTAMP;
        DECLARE VAR_L_COMPTV_VHCL CHAR(1);
		
        DECLARE I_RO_JOURNEY BIGINT;
		
        
      DECLARE cur CURSOR FOR 
      SELECT  
         I_VIN
        ,I_SYS_KEY
		,C_DLR
		,Q_ODOMETER
		,D_OPEN_RO
		#,D_CLOSE_RO
		,NULL
        ,I_RO
      FROM 
      #TEMP_QNA_DATA
      QNA_DATA
	  WHERE D_OPEN_RO = JOURNEY_DATE  	
    #  AND I_VIN = '1C4RJHBG4N8599913'
     # LIMIT 100
      ;
      
      #SELECT * FROM TEMP_QNA_DATA LIMIT 1;
      DECLARE CONTINUE HANDLER FOR NOT FOUND SET done = 1;
     
      OPEN cur;
      label: LOOP
      FETCH cur INTO  
		 VAR_I_VIN
		,VAR_I_SYS_KEY
        ,VAR_C_DLR
		,VAR_Q_ODOMETER
		,VAR_D_RO_OPEN
		,VAR_D_RO_CLOSE
		,VAR_I_RO
        ;
    IF done = 1 THEN LEAVE label;
	END IF;
        
     SELECT COUNT(1) INTO CHK_VEHICLE
			FROM VEHICLE_MASTER
		 WHERE I_VIN = VAR_I_VIN	
		 ;  
		 
		 IF CHK_VEHICLE > 0 THEN 
			SELECT   
                 I_MOD_YR
				,C_FAM
				,C_ENGINE_SALES_CODE
                ,C_FUEL_TYPE
				,C_TRANSMISSION_SALES_CODE
				,D_LAST_SERVICE
			INTO 
				 VAR_I_MOD_YR
				,VAR_C_FAM
				,VAR_C_ENG
				,VAR_C_FUEL_TYPE
                ,VAR_C_TRANSM
				,VAR_D_LAST_SERVICE_PREV_RO	 
			FROM VEHICLE_MASTER
		 WHERE I_VIN = VAR_I_VIN	
		 ;
		ELSE 
				SET VAR_I_MOD_YR				= NULL;
				SET VAR_C_FAM                   = NULL;
				SET VAR_C_ENG                   = NULL;
				SET VAR_C_FUEL_TYPE				= NULL;
				SET VAR_C_TRANSM                = NULL;
				SET VAR_D_LAST_SERVICE_PREV_RO  = NULL;
		END IF;
			CALL PROC_RO_JOURNEY_QNA_SM(
			 VAR_I_VIN
			,VAR_C_DLR
			,VAR_Q_ODOMETER
			,VAR_D_RO_OPEN
			,VAR_D_RO_CLOSE
			,VAR_I_RO
			,'QNA'
			,VAR_I_MOD_YR
			,VAR_C_FAM
			,VAR_C_ENG
            ,VAR_C_FUEL_TYPE
		    ,NULL
            ,VAR_C_TRANSM
			,VAR_D_LAST_SERVICE_PREV_RO
			,VAR_I_RO_JOURNEY
            ) 
     ; 
	
	   UPDATE 
       #TEMP_QNA_DATA
       QNA_DATA
		SET I_RO_JOURNEY = VAR_I_RO_JOURNEY
		WHERE  I_SYS_KEY = VAR_I_SYS_KEY
		   AND I_VIN = VAR_I_VIN
		 ;
    COMMIT;
    #SELECT VAR_I_RO_JOURNEY;
   END LOOP label;
  CLOSE cur;
END
==================================
CREATE DEFINER=`t12247adm`@`%` PROCEDURE `db_12247_d_001_instance_1`.`PROC_MIGRATE_SM_CLOSE`(
IN JOURNEY_DATE DATE
)
    SQL SECURITY INVOKER
BEGIN
		DECLARE done INT DEFAULT 0;
        DECLARE CHK_VEHICLE INT ;
        
        DECLARE VAR_I_RO_JOURNEY BIGINT;
		DECLARE VAR_I_VIN VARCHAR(20);
        DECLARE VAR_I_SEQ INT;
        DECLARE VAR_C_DLR VARCHAR(20);
		DECLARE VAR_Q_ODOMETER FLOAT;
		DECLARE VAR_D_RO_OPEN DATE;
		DECLARE VAR_D_RO_CLOSE DATE; 
		#DECLARE VAR_I_RO INT;
        
        DECLARE VAR_I_RO VARCHAR(30);

		DECLARE VAR_I_MOD_YR INT;
		DECLARE VAR_C_FAM VARCHAR(30);
		DECLARE VAR_C_ENG VARCHAR(10);
        DECLARE VAR_C_FUEL_TYPE VARCHAR(50);
		DECLARE VAR_C_TRANSM VARCHAR(50);
		DECLARE VAR_D_LAST_SERVICE_PREV_RO TIMESTAMP;
        DECLARE VAR_L_COMPTV_VHCL CHAR(1);
		
        DECLARE I_RO_JOURNEY BIGINT;
		
        
      DECLARE cur CURSOR FOR 
      SELECT  I_VIN
        ,I_SEQ
		,C_DLR
		,Q_ODOMETER
		,D_RO_OPEN
		,D_RO_CLOSE
		,I_RO
        ,L_COMPTV_VHCL 
	  FROM 
      #TEMP_SERVICE_MARKETING
      SERVICE_MARKETING
	  WHERE D_RO_CLOSE = JOURNEY_DATE  	
      AND I_RO_JOURNEY IS NULL
      #WHERE I_VIN = '1C4JJXP60NW275053'
      #LIMIT 100
      ;
      
      DECLARE CONTINUE HANDLER FOR NOT FOUND SET done = 1;
     
      OPEN cur;
      label: LOOP
      FETCH cur INTO  
		 VAR_I_VIN
		,VAR_I_SEQ
        ,VAR_C_DLR
		,VAR_Q_ODOMETER
		,VAR_D_RO_OPEN
		,VAR_D_RO_CLOSE
		,VAR_I_RO
        ,VAR_L_COMPTV_VHCL
        ;
    IF done = 1 THEN LEAVE label;
	END IF;
    	
	SELECT COUNT(1) INTO CHK_VEHICLE
			FROM VEHICLE_MASTER
		 WHERE I_VIN = VAR_I_VIN	
		 ;  
			 
		 IF CHK_VEHICLE > 0 THEN 
			SELECT   
                 I_MOD_YR
				,C_FAM
				,C_ENGINE_SALES_CODE
                ,C_FUEL_TYPE
				,C_TRANSMISSION_SALES_CODE
				,D_LAST_SERVICE
			INTO 
				 VAR_I_MOD_YR
				,VAR_C_FAM
				,VAR_C_ENG
				,VAR_C_FUEL_TYPE
                ,VAR_C_TRANSM
				,VAR_D_LAST_SERVICE_PREV_RO	 
			FROM VEHICLE_MASTER
		 WHERE I_VIN = VAR_I_VIN	
		 ;
		ELSE 
				SET VAR_I_MOD_YR				= NULL;
				SET VAR_C_FAM                   = NULL;
				SET VAR_C_ENG                   = NULL;
				SET VAR_C_FUEL_TYPE				= NULL;
				SET VAR_C_TRANSM                = NULL;
				SET VAR_D_LAST_SERVICE_PREV_RO  = NULL;
		END IF;
		
    
  
  #PASS VEHICLE RELATED INFO AS NULL
     	
        CALL PROC_RO_JOURNEY_QNA_SM(
			 VAR_I_VIN
			,VAR_C_DLR
			,VAR_Q_ODOMETER
			,VAR_D_RO_OPEN
			,VAR_D_RO_CLOSE
			,VAR_I_RO
			,'SM'
			,VAR_I_MOD_YR
			,VAR_C_FAM
			,VAR_C_ENG
			,VAR_C_TRANSM
			,VAR_C_FUEL_TYPE
			,NULL
			,VAR_D_LAST_SERVICE_PREV_RO
			,VAR_I_RO_JOURNEY
            ) 
     ;
     
    UPDATE 
    #TEMP_SERVICE_MARKETING
     SERVICE_MARKETING
    SET I_RO_JOURNEY = VAR_I_RO_JOURNEY
    WHERE I_VIN = VAR_I_VIN
	  AND I_SEQ = VAR_I_SEQ
     ;
  
    COMMIT;
    #SELECT VAR_I_RO_JOURNEY;
   END LOOP label;
  CLOSE cur;
END
=========================================
CREATE DEFINER=`t12247adm`@`%` PROCEDURE `db_12247_d_001_instance_1`.`PROC_MIGRATE_SM_OPEN`(
IN JOURNEY_DATE DATE
)
    SQL SECURITY INVOKER
BEGIN
		DECLARE done INT DEFAULT 0;
        DECLARE CHK_VEHICLE INT ;
        
        DECLARE VAR_I_RO_JOURNEY BIGINT;
		DECLARE VAR_I_VIN VARCHAR(20);
        DECLARE VAR_I_SEQ INT;
        DECLARE VAR_C_DLR VARCHAR(20);
		DECLARE VAR_Q_ODOMETER FLOAT;
		DECLARE VAR_D_RO_OPEN DATE;
		DECLARE VAR_D_RO_CLOSE DATE; 
		DECLARE VAR_I_RO INT;

		DECLARE VAR_I_MOD_YR INT;
		DECLARE VAR_C_FAM VARCHAR(30);
		DECLARE VAR_C_ENG VARCHAR(10);
        DECLARE VAR_C_FUEL_TYPE VARCHAR(50);
		DECLARE VAR_C_TRANSM VARCHAR(50);
		DECLARE VAR_D_LAST_SERVICE_PREV_RO TIMESTAMP;
        DECLARE VAR_L_COMPTV_VHCL CHAR(1);
		
        DECLARE I_RO_JOURNEY BIGINT;
		
        
      DECLARE cur CURSOR FOR 
      SELECT  I_VIN
        ,I_SEQ
		,C_DLR
		,Q_ODOMETER
		,D_RO_OPEN
		#,D_RO_CLOSE
		,NULL
        ,I_RO
        ,L_COMPTV_VHCL 
	  FROM 
      TEMP_SERVICE_MARKETING 
	  WHERE D_RO_OPEN = JOURNEY_DATE  	
      #WHERE I_VIN = '1C4JJXP60NW275053'
      LIMIT 1
      ;
      
      DECLARE CONTINUE HANDLER FOR NOT FOUND SET done = 1;
     
      OPEN cur;
      label: LOOP
      FETCH cur INTO  
		 VAR_I_VIN
		,VAR_I_SEQ
        ,VAR_C_DLR
		,VAR_Q_ODOMETER
		,VAR_D_RO_OPEN
		,VAR_D_RO_CLOSE
		,VAR_I_RO
        ,VAR_L_COMPTV_VHCL
        ;
    IF done = 1 THEN LEAVE label;
	END IF;
        
    IF VAR_L_COMPTV_VHCL =	'N' THEN
    	
		 SELECT COUNT(1) INTO CHK_VEHICLE
			FROM VEHICLE_MASTER
		 WHERE I_VIN = VAR_I_VIN	
		 ;  
		 
		 IF CHK_VEHICLE > 0 THEN 
			SELECT   
                 I_MOD_YR
				,C_FAM
				,C_ENGINE_SALES_CODE
                ,C_FUEL_TYPE
				,C_TRANSMISSION_SALES_CODE
				,D_LAST_SERVICE
			INTO 
				 VAR_I_MOD_YR
				,VAR_C_FAM
				,VAR_C_ENG
				,VAR_C_FUEL_TYPE
                ,VAR_C_TRANSM
				,VAR_D_LAST_SERVICE_PREV_RO	 
			FROM VEHICLE_MASTER
		 WHERE I_VIN = VAR_I_VIN	
		 ;
		ELSE 
				SET VAR_I_MOD_YR				= NULL;
				SET VAR_C_FAM                   = NULL;
				SET VAR_C_ENG                   = NULL;
				SET VAR_C_FUEL_TYPE				= NULL;
				SET VAR_C_TRANSM                = NULL;
				SET VAR_D_LAST_SERVICE_PREV_RO  = NULL;
		END IF;
			CALL PROC_RO_JOURNEY_QNA_SM(
			 VAR_I_VIN
			,VAR_C_DLR
			,VAR_Q_ODOMETER
			,VAR_D_RO_OPEN
			,VAR_D_RO_CLOSE
			,VAR_I_RO
			,'SM'
			,VAR_I_MOD_YR
			,VAR_C_FAM
			,VAR_C_ENG
            ,VAR_C_FUEL_TYPE
			,VAR_C_TRANSM
			,VAR_D_LAST_SERVICE_PREV_RO
			,VAR_I_RO_JOURNEY
            ) 
     ; 
	
   UPDATE TEMP_SERVICE_MARKETING
    SET I_RO_JOURNEY = VAR_I_RO_JOURNEY
    WHERE I_VIN = VAR_I_VIN
	  AND I_SEQ = VAR_I_SEQ
     ;
   
    
    ELSE
  
  #PASS VEHICLE RELATED INFO AS NULL
     		SET VAR_I_MOD_YR				= NULL;
			SET VAR_C_FAM                   = NULL;
			SET VAR_C_ENG                   = NULL;
            SET VAR_C_FUEL_TYPE				= NULL;
			SET VAR_C_TRANSM                = NULL;
			SET VAR_D_LAST_SERVICE_PREV_RO  = NULL;
	    CALL PROC_RO_JOURNEY_QNA_SM(
			 VAR_I_VIN
			,VAR_C_DLR
			,VAR_Q_ODOMETER
			,VAR_D_RO_OPEN
			,VAR_D_RO_CLOSE
			,VAR_I_RO
			,'SM'
			,VAR_I_MOD_YR
			,VAR_C_FAM
			,VAR_C_ENG
			,VAR_C_TRANSM
			,VAR_C_FUEL_TYPE
            ,VAR_D_LAST_SERVICE_PREV_RO
			,VAR_I_RO_JOURNEY
            ) 
     ;
     
    UPDATE TEMP_SERVICE_MARKETING
    SET I_RO_JOURNEY = VAR_I_RO_JOURNEY
    WHERE I_VIN = VAR_I_VIN
	  AND I_SEQ = VAR_I_SEQ
     ;
 
     
    END IF;
    COMMIT;
    #SELECT VAR_I_RO_JOURNEY;
   END LOOP label;
  CLOSE cur;
END
==========================================
CREATE DEFINER=`t12247adm`@`%` PROCEDURE `db_12247_d_001_instance_1`.`PROC_MIGRATE_UPDATE_REPEAT_REPAIR`(
IN JOURNEY_DATE DATE
)
    SQL SECURITY INVOKER
BEGIN
		DECLARE done INT DEFAULT 0;
        DECLARE CHK_VEHICLE INT ;
        
        DECLARE VAR_I_RO_JOURNEY BIGINT;
		DECLARE VAR_I_VIN VARCHAR(20);
        DECLARE VAR_T_SESSION TIMESTAMP;
        
		        
      DECLARE cur CURSOR FOR 
      SELECT  
		 I_RO_JOURNEY
        ,I_VIN
        ,T_SESSION
      FROM 
      wiTECH_VEH_DATA 
	  WHERE DATE(T_SESSION) = JOURNEY_DATE
      AND DATE(T_SESSION) < '2022-11-19'
      #AND I_VIN = '1C3EL56R16N163093'
      #WHERE I_VIN = '1C4JJXP60NW275053'
      #LIMIT 1
      ;
      
      DECLARE CONTINUE HANDLER FOR NOT FOUND SET done = 1;
     
      OPEN cur;
      label: LOOP
      FETCH cur INTO  
		 VAR_I_RO_JOURNEY
		,VAR_I_VIN
		,VAR_T_SESSION
	;
    
    IF done = 1 THEN LEAVE label;
	END IF;
        
			CALL PROC_RO_JOURNEY_REPEAT_REPAIR_COMPUTED_MIGRATION(
			 VAR_I_RO_JOURNEY
            ,VAR_I_VIN
			,VAR_T_SESSION
            ,180
            ) 
     ; 
  
    COMMIT;
    #SELECT VAR_I_RO_JOURNEY;
   END LOOP label;
  CLOSE cur;
END
=========================
CREATE DEFINER=`t12247adm`@`%` PROCEDURE `db_12247_d_001_instance_1`.`PROC_MIGRATE_wiADVISOR`(
IN JOURNEY_DATE DATE
)
    SQL SECURITY INVOKER
BEGIN
		DECLARE done INT DEFAULT 0;
        DECLARE CHK_VEHICLE INT ;
        
        DECLARE VAR_I_RO_JOURNEY BIGINT;
		DECLARE VAR_I_VIN VARCHAR(20);
        DECLARE VAR_I_SEQ INT;
        DECLARE VAR_C_DLR VARCHAR(20);
		DECLARE VAR_Q_ODOMETER FLOAT;
	    DECLARE VAR_T_SESSION TIMESTAMP;
        DECLARE VAR_C_TEMPLATE_ID VARCHAR(30);
		DECLARE VAR_C_SESSION_ID VARCHAR(36);
        
		DECLARE VAR_I_MOD_YR INT;
		DECLARE VAR_C_FAM VARCHAR(30);
		DECLARE VAR_C_ENG VARCHAR(10);
        DECLARE VAR_C_FUEL_TYPE VARCHAR(50);
		DECLARE VAR_C_TRANSM VARCHAR(50);
		DECLARE VAR_D_LAST_SERVICE_PREV_RO TIMESTAMP;
                
      DECLARE cur CURSOR FOR 
      SELECT  
		 I_VIN
        ,C_DLR
		,Q_ODOMETER
		,T_SESSION
        ,C_SESSION_ID
      FROM 
      TEMP_wiADVISOR 
	  WHERE DATE(T_SESSION) = JOURNEY_DATE  	
      #AND I_VIN = '1C3EL56R16N163093'
      #WHERE I_VIN = '1C4JJXP60NW275053'
      #LIMIT 1000
      ;
      
      DECLARE CONTINUE HANDLER FOR NOT FOUND SET done = 1;
     
      OPEN cur;
      label: LOOP
      FETCH cur INTO  
		 VAR_I_VIN
		,VAR_C_DLR
		,VAR_Q_ODOMETER
		,VAR_T_SESSION
		,VAR_C_SESSION_ID
	;
    
    IF done = 1 THEN LEAVE label;
	END IF;
        
		 SELECT COUNT(1) INTO CHK_VEHICLE
			FROM VEHICLE_MASTER
		 WHERE I_VIN = VAR_I_VIN	
		 ;  
		 
		 IF CHK_VEHICLE > 0 THEN 
			SELECT   
                 I_MOD_YR
				,C_FAM
				,C_ENGINE_SALES_CODE
                ,C_FUEL_TYPE
				,C_TRANSMISSION_SALES_CODE
				,D_LAST_SERVICE
			INTO 
				 VAR_I_MOD_YR
				,VAR_C_FAM
				,VAR_C_ENG
				,VAR_C_FUEL_TYPE
                ,VAR_C_TRANSM
				,VAR_D_LAST_SERVICE_PREV_RO	 
			FROM VEHICLE_MASTER
		 WHERE I_VIN = VAR_I_VIN	
		 ;
		ELSE 
				SET VAR_I_MOD_YR				= NULL;
				SET VAR_C_FAM                   = NULL;
				SET VAR_C_ENG                   = NULL;
				SET VAR_C_FUEL_TYPE				= NULL;
				SET VAR_C_TRANSM                = NULL;
				SET VAR_D_LAST_SERVICE_PREV_RO  = NULL;
		END IF;
			CALL PROC_RO_JOURNEY_wiADVISOR_TEST(
			 VAR_I_VIN
			,VAR_C_DLR
			,VAR_Q_ODOMETER
			,VAR_T_SESSION
            ,VAR_C_SESSION_ID
			,'wiADVISOR'
			,VAR_I_MOD_YR
			,VAR_C_FAM
			,VAR_C_ENG
            ,VAR_C_FUEL_TYPE
			,VAR_C_TRANSM
			,VAR_D_LAST_SERVICE_PREV_RO
			,VAR_I_RO_JOURNEY
            ) 
     ; 
	
   UPDATE TEMP_wiADVISOR_TEST
    SET I_RO_JOURNEY = VAR_I_RO_JOURNEY
    WHERE I_VIN = VAR_I_VIN
	  AND C_DLR = VAR_C_DLR
      AND Q_ODOMETER = VAR_Q_ODOMETER
      AND T_SESSION = VAR_T_SESSION
    #  AND C_TEMPLATE_ID = VAR_C_TEMPLATE_ID
     ;
   
    COMMIT;
    #SELECT VAR_I_RO_JOURNEY;
   END LOOP label;
  CLOSE cur;
END
======================
CREATE DEFINER=`t12247adm`@`%` PROCEDURE `db_12247_d_001_instance_1`.`PROC_MIGRATE_wiTECH`(
IN JOURNEY_DATE DATE
#,OUT FLAG_COMPLETE VARCHAR(1)
)
    SQL SECURITY INVOKER
BEGIN
		DECLARE done INT DEFAULT 0;
        DECLARE CHK_VEHICLE INT ;
        
        DECLARE VAR_I_RO_JOURNEY BIGINT;
		DECLARE VAR_I_VIN VARCHAR(20);
        DECLARE VAR_I_SEQ INT;
        DECLARE VAR_C_DLR VARCHAR(20);
		DECLARE VAR_Q_ODOMETER VARCHAR(50);
	    DECLARE VAR_T_SESSION TIMESTAMP;
        DECLARE VAR_C_TEMPLATE_ID VARCHAR(30);
    
		DECLARE VAR_I_MOD_YR INT;
		DECLARE VAR_C_FAM VARCHAR(30);
		DECLARE VAR_C_ENG VARCHAR(10);
        DECLARE VAR_C_FUEL_TYPE VARCHAR(50);
        DECLARE VAR_C_FUEL_TYPE_DESC VARCHAR(50);
		DECLARE VAR_C_TRANSM VARCHAR(50);
		DECLARE VAR_D_LAST_SERVICE_PREV_RO TIMESTAMP;
        DECLARE VAR_N_SRCE_ADD VARCHAR(50);
		
        
/*
      DECLARE cur CURSOR FOR 
      SELECT  
		 I_VIN
        ,C_DLR
		,Q_ODOMETER
		,T_SESSION
        ,C_TEMPLATE_ID
      FROM 
      TEMP_wiTECH 
	  WHERE DATE(T_SESSION) = JOURNEY_DATE 
      #AND I_VIN = '2C3CDXHG9NH183546'
      #WHERE I_VIN = '1C4JJXP60NW275053'
      #LIMIT 1000
      ;
*/
      
	DECLARE cur CURSOR FOR 
	SELECT * FROM
	(
	  SELECT  
			 I_VIN
			,C_DLR
			,Q_ODOMETER
			,T_SESSION
			,C_TEMPLATE_ID
			,'wiTECH' N_SRCE_ADD
		  FROM 
		  wiTECH_VEH_DATA_MAPPING_20221119 
		  WHERE DATE(T_SESSION) = JOURNEY_DATE  
		  
		UNION ALL
		
		
	  SELECT  
			 I_VIN
			,C_DLR
			,Q_ODOMETER
			,T_SESSION
			,C_TEMPLATE_ID
			,'wiADVISOR' N_SRCE_ADD
		  FROM 
		  wiADVISOR_VEH_DATA_MAPPING_20221119 
		  WHERE DATE(T_SESSION) = JOURNEY_DATE 
		) A
		ORDER BY I_VIN,T_SESSION
	    # LIMIT 100
     ;
      
      DECLARE CONTINUE HANDLER FOR NOT FOUND SET done = 1;
     
      OPEN cur;
      label: LOOP
      FETCH cur INTO  
		 VAR_I_VIN
		,VAR_C_DLR
		,VAR_Q_ODOMETER
		,VAR_T_SESSION
		,VAR_C_TEMPLATE_ID
        ,VAR_N_SRCE_ADD
        ;
    IF done = 1 THEN LEAVE label;
	END IF;
        
		 SELECT COUNT(1) INTO CHK_VEHICLE
			FROM VEHICLE_MASTER
		 WHERE I_VIN = VAR_I_VIN	
		 ;  
		 
		 IF CHK_VEHICLE > 0 THEN 
			SELECT   
                 I_MOD_YR
				,C_FAM
				,C_ENGINE_SALES_CODE
                ,C_FUEL_TYPE
                ,NULL
				,C_TRANSMISSION_SALES_CODE
				,D_LAST_SERVICE
			INTO 
				 VAR_I_MOD_YR
				,VAR_C_FAM
				,VAR_C_ENG
				,VAR_C_FUEL_TYPE
                ,VAR_C_FUEL_TYPE_DESC
                ,VAR_C_TRANSM
				,VAR_D_LAST_SERVICE_PREV_RO	 
			FROM VEHICLE_MASTER
		 WHERE I_VIN = VAR_I_VIN	
		 ;
		ELSE 
				SET VAR_I_MOD_YR				= NULL;
				SET VAR_C_FAM                   = NULL;
				SET VAR_C_ENG                   = NULL;
				SET VAR_C_FUEL_TYPE				= NULL;
				SET VAR_C_FUEL_TYPE_DESC		= NULL;
				SET VAR_C_TRANSM                = NULL;
				SET VAR_D_LAST_SERVICE_PREV_RO  = NULL;
		END IF;
			CALL PROC_RO_JOURNEY(
			 VAR_I_VIN
			,VAR_C_DLR
			,VAR_Q_ODOMETER
			,VAR_T_SESSION
			,VAR_N_SRCE_ADD
			,VAR_I_MOD_YR
			,VAR_C_FAM
			,VAR_C_ENG
            ,VAR_C_FUEL_TYPE
            ,VAR_C_FUEL_TYPE_DESC
			,VAR_C_TRANSM
			,VAR_D_LAST_SERVICE_PREV_RO
			,VAR_I_RO_JOURNEY
            ) 
     ; 
	
   IF VAR_N_SRCE_ADD = 'wiTECH' THEN
   
   UPDATE wiTECH_VEH_DATA_MAPPING_20221119
    SET I_RO_JOURNEY_NEW = VAR_I_RO_JOURNEY
    WHERE I_VIN = VAR_I_VIN
	  AND C_DLR = VAR_C_DLR
      AND Q_ODOMETER = VAR_Q_ODOMETER
	  AND T_SESSION = VAR_T_SESSION
      AND C_TEMPLATE_ID = VAR_C_TEMPLATE_ID
     ;
    
   ELSE 
   
    UPDATE wiADVISOR_VEH_DATA_MAPPING_20221119
    SET I_RO_JOURNEY_NEW = VAR_I_RO_JOURNEY
    WHERE I_VIN = VAR_I_VIN
	  AND C_DLR = VAR_C_DLR
      AND Q_ODOMETER = VAR_Q_ODOMETER
      AND T_SESSION = VAR_T_SESSION
    #  AND C_TEMPLATE_ID = VAR_C_TEMPLATE_ID
     ;
    
    END IF;
   
    COMMIT;
    #SELECT VAR_I_RO_JOURNEY;
   END LOOP label;
  CLOSE cur;
 #SET FLAG_COMPLETE = 'Y';
END



CREATE DEFINER=`t12247adm`@`%` PROCEDURE `db_12247_d_001_instance_1`.`PROC_RO_ADD_COMMENT`(
	IN `commentPayload` JSON
)
    SQL SECURITY INVOKER
BEGIN
	DECLARE roJourneyId BIGINT;
	DECLARE comment TEXT;
	DECLARE type TEXT;
	DECLARE userId VARCHAR(100);
	DECLARE userName VARCHAR(100);
	DECLARE replyCommentId BIGINT;

	SET roJourneyId = commentPayload ->> '$.roJourneyId';
	SET comment = commentPayload ->> '$.comment';
	SET type = commentPayload ->> '$.type';
	SET userId = commentPayload ->> '$.userId';
	SET userName = commentPayload ->> '$.userName';
	SET replyCommentId = commentPayload ->> '$.replyCommentId';

	
	INSERT INTO RO_JOURNEY_COMMENT 
	(I_RO_JOURNEY, 
	X_COMMENT, 
	X_COMMENT_TYPE,
	I_ADDED_BY_ID, 
	X_ADDED_BY_NAME, 
	T_STMP_ADD, 
	I_REPLY_TO_COMMENT_ID) 
	VALUES
	(roJourneyId, 
	comment, 
	type,
	userId, 
	userName, 
	CURRENT_TIMESTAMP(), 
	NULL);
	
	IF  replyCommentId != "undefined"  THEN
	UPDATE RO_JOURNEY_COMMENT 
		SET I_REPLY_TO_COMMENT_ID= last_insert_id()
		WHERE I_COMMENT_ID = replyCommentId;	
	END IF;
	

END
CREATE DEFINER=`t12247adm`@`%` PROCEDURE `db_12247_d_001_instance_1`.`PROC_RO_COUNT_COMPUTE`(
	IN `period` VARCHAR(50)
)
    SQL SECURITY INVOKER
BEGIN

	DECLARE RO_CLOSED_COUNT INT;
	
	DECLARE TOTAL_VEHICLE_IN_FOR_SERVICE INT;
	DECLARE PHEV_VEHICLES INT;
	DECLARE NEW_VEH_PREP INT ;
	DECLARE PROSENSE INT ;
	DECLARE NEARING_BUYBACK_SITUATION INT;
	DECLARE REPEAT_REPAIRS INT;
	DECLARE STAR_CASE_OPEN INT;

	
	
	
	IF period = 'LAST_MONTH' THEN

		SELECT 
		      COUNT(CASE WHEN 
				  		(
					  		YEAR(ro.T_END_JOURNEY)=YEAR(CURDATE() - INTERVAL 1 MONTH) AND
		   				MONTH(ro.T_END_JOURNEY)= MONTH(CURDATE() - INTERVAL 1 MONTH)
						) THEN ro.I_VIN ELSE NULL END) INTO RO_CLOSED_COUNT
	   FROM RO_JOURNEY ro
		WHERE ro.C_DLR NOT IN (SELECT C_DLR FROM EXCLUDED_DEALERS) -- Excluded Test Dealers
		AND IFNULL(ro.I_MOD_YR,'')!='' AND IFNULL(ro.C_FAM,'')!='' AND IFNULL(ro.C_FUEL_TYPE,'')!='' -- Excluded Competitive Vehicles
		AND  ro.C_DLR_BUSINESS != 'I' -- Excluded International Dealers
		;
	  
		DELETE 
		FROM 	STATS_COUNT 
		WHERE N_ATTRIBUTE = 'RO_CLOSE' AND X_ATTRIBUTE_PERIOD = 'LAST_MONTH';
		
		
		INSERT INTO STATS_COUNT
			(N_ATTRIBUTE,
			 X_ATTRIBUTE_PERIOD,
			 X_ATTRIBUTE_VALUE,
			 N_SRCE_ADD,
		    T_STMP_ADD,
			 L_ACTIVE)
		 VALUES(
		      'RO_CLOSE',
		      'LAST_MONTH',
 		       RO_CLOSED_COUNT,
				'Scheduler',
				NOW(),
				'Y');
	ELSE 
		
		-- RO CLOSE 
		SET @FIRST_DAY = DATE(NOW());
		
		SELECT DATE_SUB(LAST_DAY(NOW()), INTERVAL DAY(LAST_DAY(NOW()))-1 DAY) INTO @FIRST_DAY;
	   
	   SELECT 
		    COUNT(CASE WHEN ro.T_END_JOURNEY >= @FIRST_DAY THEN ro.I_VIN ELSE NULL END) INTO RO_CLOSED_COUNT
	   FROM RO_JOURNEY ro;
	   
		DELETE 
		FROM 	STATS_COUNT 
		WHERE N_ATTRIBUTE = 'RO_CLOSE' AND X_ATTRIBUTE_PERIOD = 'CURRENT_TO_DATE';
			
		INSERT INTO STATS_COUNT
			(N_ATTRIBUTE,
			 X_ATTRIBUTE_PERIOD,
			 X_ATTRIBUTE_VALUE,
			 N_SRCE_ADD,
		    T_STMP_ADD,
			 L_ACTIVE)
		VALUES( 
		      'RO_CLOSE',
		      'CURRENT_TO_DATE',
		      RO_CLOSED_COUNT,
				'Scheduler',
				NOW(),
				'Y');
      -- SUMMARY
		
		SELECT 	COUNT(DISTINCT ro.I_VIN) - COUNT(CASE WHEN ro.L_IS_NVP = 'Y' THEN ro.I_VIN ELSE NULL END),
			  	COUNT(CASE WHEN ro.C_FUEL_TYPE IN ('ELECTRIC','FHEV','PHEV','MHEV') THEN ro.I_VIN ELSE NULL END) - COUNT(CASE WHEN ro.L_IS_NVP = 'Y' AND ro.C_FUEL_TYPE IN ('ELECTRIC','FHEV','PHEV','MHEV') THEN ro.I_VIN ELSE NULL END),
			  	COUNT(CASE WHEN ro.L_REPEAT_REPAIR IS NOT NULL THEN ro.I_VIN ELSE NULL END),
			  	#COUNT(CASE WHEN ((ro.I_RO IS NULL OR ro.I_RO = '') AND DATE(ro.T_START_JOURNEY) < DATE(NOW())) THEN ro.I_VIN ELSE NULL END),
			  	COUNT(CASE WHEN ro.I_FIRST_CHERWELL_CASEID IS NOT NULL THEN ro.I_VIN ELSE NULL END),
			  	#COUNT(CASE WHEN ro.Q_ODOMETER < 50 AND ro.L_FORCE_CLOSE IS NULL AND DATEDIFF(NOW(),ro.T_WITECH_SCAN_LATEST) < 7  AND (v.D_VHCL_SOLD IS NULL OR v.D_VHCL_SOLD = '0001-01-01') AND ro.T_WIADVISOR_SCAN IS NULL AND ro.I_FIRST_CHERWELL_CASEID IS NULL AND ro.D_LAST_SERVICE_PREV_RO IS NULL THEN ro.I_VIN ELSE NULL END)
	  			COUNT(CASE WHEN ro.L_IS_NVP = 'Y' THEN ro.I_VIN ELSE NULL END)
		INTO  TOTAL_VEHICLE_IN_FOR_SERVICE,
			   PHEV_VEHICLES,
			   REPEAT_REPAIRS,
			   #RO_INFO_MISSING,
			   STAR_CASE_OPEN,
			   NEW_VEH_PREP
	   FROM RO_JOURNEY_OPEN ro
	   LEFT JOIN VEHICLE_MASTER v ON v.I_VIN=ro.I_VIN
		WHERE ro.C_DLR NOT IN (SELECT C_DLR FROM EXCLUDED_DEALERS) -- Excluded Test Dealers
		AND IFNULL(ro.I_MOD_YR,'')!='' AND IFNULL(ro.C_FAM,'')!='' AND IFNULL(ro.C_FUEL_TYPE,'')!='' -- Excluded Competitive Vehicles
		AND  ro.C_DLR_BUSINESS != 'I' -- Excluded International Dealers
		;

	
	-- Nearing Buyback Situation (buyback/prosensing)
  	SELECT COUNT(1) INTO NEARING_BUYBACK_SITUATION 
	FROM BUYBACK_DATA b
		JOIN VEHICLE_MASTER v ON b.I_VIN=v.I_VIN
	WHERE DATE(b.D_PACKAGE_CREATION) >= DATE(NOW()) - INTERVAL 13 MONTH;

  
  	-- PROSENSE
  	SELECT COUNT(DISTINCT ro.I_VIN) INTO PROSENSE
  	FROM RO_JOURNEY_OPEN ro
  	JOIN PROSENSE_DATA p ON p.I_VIN=ro.I_VIN
	WHERE ro.C_DLR NOT IN (SELECT C_DLR FROM EXCLUDED_DEALERS) -- Excluded Test Dealers
		AND IFNULL(ro.I_MOD_YR,'')!='' AND IFNULL(ro.C_FAM,'')!='' AND IFNULL(ro.C_FUEL_TYPE,'')!='' -- Excluded Competitive Vehicles
		AND  ro.C_DLR_BUSINESS != 'I' -- Excluded International Dealers
	;
	
	UPDATE STATS_COUNT
	SET X_ATTRIBUTE_VALUE = TOTAL_VEHICLE_IN_FOR_SERVICE
	WHERE X_ATTRIBUTE_PERIOD = 'TOTAL_VEHICLE_IN_FOR_SERVICE';
	
	UPDATE STATS_COUNT
	SET X_ATTRIBUTE_VALUE = PHEV_VEHICLES
	WHERE X_ATTRIBUTE_PERIOD = 'PHEV_VEHICLES';
	
	UPDATE STATS_COUNT
	SET X_ATTRIBUTE_VALUE = NEW_VEH_PREP
	WHERE X_ATTRIBUTE_PERIOD = 'NEW_VEH_PREP';
	
	UPDATE STATS_COUNT
	SET X_ATTRIBUTE_VALUE = PROSENSE
	WHERE X_ATTRIBUTE_PERIOD = 'PROSENSE';
	
	UPDATE STATS_COUNT
	SET X_ATTRIBUTE_VALUE = NEARING_BUYBACK_SITUATION
	WHERE X_ATTRIBUTE_PERIOD = 'NEARING_BUYBACK_SITUATION';
	
	UPDATE STATS_COUNT
	SET X_ATTRIBUTE_VALUE = REPEAT_REPAIRS
	WHERE X_ATTRIBUTE_PERIOD = 'REPEAT_REPAIRS';
	
	UPDATE STATS_COUNT
	SET X_ATTRIBUTE_VALUE = STAR_CASE_OPEN
	WHERE X_ATTRIBUTE_PERIOD = 'STAR_CASE_OPEN';
		
	END IF;
END
===========
CREATE DEFINER=`t12247adm`@`%` PROCEDURE `db_12247_d_001_instance_1`.`PROC_RO_FORCE_CLOSE_DT_UPDATE`()
    SQL SECURITY INVOKER
BEGIN

DECLARE EXIT HANDLER FOR SQLEXCEPTION
BEGIN
SHOW ERRORS;
ROLLBACK;
END;

START TRANSACTION;

/*
RULE 1: 
If Open R.O. source is wiTECH and odometer is <= 50 miles 
and No wiADVISOR scan received after 7 days 
and no second wiTECH scan received after 7 days
and no QNA Open R.O. record received after 7 days
Then Force Close R.O.
*/

UPDATE RO_JOURNEY_OPEN
SET  L_FORCE_CLOSE= 'Y'
	,T_END_JOURNEY = NOW()
    ,FORCE_CLOSE_RULE = 'RULE1' 
WHERE UPPER(N_SRCE_ADD) = 'WITECH' 
AND GREATEST(Q_ODOMETER,Q_ODOMETER_LAST) <= 50
AND DATEDIFF(NOW(),IFNULL(T_WITECH_SCAN_LATEST ,T_WIADVISOR_SCAN)) > 7
AND I_RO IS NULL
AND T_END_JOURNEY IS NULL
;

/*
RULE 2:
If Open R.O. source is wiTECH and odometer is > 50 miles
and No wiADVISOR scan received after 30 days
and no second wiTECH scan received after 30 days
and no QNA Open R.O. record received after 30 days
NO Cherwell Case after 30 days
Then Force Close R.O.
*/


UPDATE RO_JOURNEY_OPEN 
SET  L_FORCE_CLOSE= 'Y'
	,T_END_JOURNEY = NOW()
	,FORCE_CLOSE_RULE = 'RULE2'  
WHERE UPPER(N_SRCE_ADD) = 'WITECH' 
AND GREATEST(Q_ODOMETER,Q_ODOMETER_LAST) > 50
AND DATEDIFF(NOW(),IFNULL(T_WITECH_SCAN_LATEST ,T_WIADVISOR_SCAN)) > 30
AND (I_FIRST_CHERWELL_CASEID IS NULL 
	OR (I_FIRST_CHERWELL_CASEID IS NOT NULL 
		AND DATEDIFF(NOW(),IFNULL(T_LAST_CLOSE_CHERWELL_CASEID,T_FIRST_CREATED_CHERWELL_CASEID)) > 30)
	) 
AND I_RO IS NULL
AND T_END_JOURNEY IS NULL
;

/*
RULE 3:
If Open R.O. source is wiADVISOR scan 
and No wiADVISOR scan received after 30 days
and No wiTECH scan for 30 days 
and No QNA Open R.O. record received after 30 days
and No Cherwell Case after 30 days
Then Force Close R.O.
*/


UPDATE RO_JOURNEY_OPEN 
SET  L_FORCE_CLOSE= 'Y'
	,T_END_JOURNEY = NOW()
	,FORCE_CLOSE_RULE = 'RULE3'  
WHERE UPPER(N_SRCE_ADD) = 'WIADVISOR' 
AND DATEDIFF(NOW(),IFNULL(T_WITECH_SCAN_LATEST ,T_WIADVISOR_SCAN)) > 30
AND (I_FIRST_CHERWELL_CASEID IS NULL 
	OR (I_FIRST_CHERWELL_CASEID IS NOT NULL 
		AND DATEDIFF(NOW(),IFNULL(T_LAST_CLOSE_CHERWELL_CASEID,T_FIRST_CREATED_CHERWELL_CASEID)) > 30)
	) 
AND I_RO IS NULL
AND T_END_JOURNEY IS NULL
;


/*
RULE 4:
If Test Dealer - 99970 
and No wiADVISOR scan received after 7 days 
and no second wiTECH scan received after 7 days
and no QNA Open R.O. record received after 7 days
Then Force Close R.O.
*/

UPDATE RO_JOURNEY_OPEN 
SET  L_FORCE_CLOSE= 'Y'
	,T_END_JOURNEY = NOW()
	,FORCE_CLOSE_RULE = 'RULE4'  
WHERE C_DLR IN ('99970', '99917') 
AND DATEDIFF(NOW(),COALESCE(T_WITECH_SCAN_LATEST ,T_WIADVISOR_SCAN,T_START_JOURNEY)) > 7
AND I_RO IS NULL
AND T_END_JOURNEY IS NULL
;

#UPDATING THE RO_JOURNEY TABLE 

SET SQL_SAFE_UPDATES = 0;
#updating RO_JOURNET
UPDATE RO_JOURNEY T
	 , RO_JOURNEY_OPEN S 
SET T.L_FORCE_CLOSE = S.L_FORCE_CLOSE 
  , T.T_END_JOURNEY = S.T_END_JOURNEY 
  , T.FORCE_CLOSE_RULE = S.FORCE_CLOSE_RULE 
WHERE T.I_RO_JOURNEY = S.I_RO_JOURNEY
;

/*
RULE 5
Force close logic update -> If there is a STAR case is closed date for vehicle in for serive 
then Close RO Journey 16 days after the Case closed date 
and Check for any restricted parts on backorder as another AND criteria also.
*/

/*
SELECT 
 COUNT(1) 
 FROM RO_JOURNEY_OPEN A
	  LEFT JOIN
	  GPOP_DATA B
 ON A.I_RO_JOURNEY = B.I_RO_JOURNEY     
WHERE 
	A.T_LAST_CLOSE_CHERWELL_CASEID IS NOT NULL
AND IFNULL(A.T_WITECH_SCAN_LATEST ,A.T_WIADVISOR_SCAN) < A.T_LAST_CLOSE_CHERWELL_CASEID
AND DATEDIFF(NOW(),A.T_LAST_CLOSE_CHERWELL_CASEID) > 15
AND A.I_RO IS NULL
AND (CASE WHEN B.I_RO_JOURNEY IS NULL THEN 1 ELSE DATEDIFF(NOW(),B.T_DELIVERY) > 0 END)
#AND DATEDIFF(NOW(),B.T_DELIVERY) > 0
#AND coalesce(B.T_DELIVERY, '0000-00-00 00:00:00', NULL) IS NOT NULL 
;

#1942
#1752
*/

UPDATE RO_JOURNEY_OPEN A
	   INNER JOIN 
       GPOP_DATA B
 ON A.I_RO_JOURNEY = B.I_RO_JOURNEY   
SET  L_FORCE_CLOSE= 'Y'
	,T_END_JOURNEY = NOW()
	,FORCE_CLOSE_RULE = 'RULE5'  
WHERE 
	A.T_LAST_CLOSE_CHERWELL_CASEID IS NOT NULL
AND IFNULL(A.T_WITECH_SCAN_LATEST ,A.T_WIADVISOR_SCAN) < A.T_LAST_CLOSE_CHERWELL_CASEID
AND DATEDIFF(NOW(),A.T_LAST_CLOSE_CHERWELL_CASEID) > 15
AND A.I_RO IS NULL
AND (CASE WHEN B.I_RO_JOURNEY IS NULL THEN 1 ELSE DATEDIFF(NOW(),B.T_DELIVERY) > 0 END)
;


#Removing force closed records from RO_JOURNEY_OPEN
DELETE  FROM RO_JOURNEY_OPEN 
WHERE T_END_JOURNEY IS NOT NULL;


COMMIT WORK;
END
=================
CREATE DEFINER=`t12247adm`@`%` PROCEDURE `db_12247_d_001_instance_1`.`PROC_RO_JOURNEY`(
	IN `I_VIN` VARCHAR(20),
	IN `C_DLR` VARCHAR(20),
	IN `Q_ODOMETER` FLOAT,
	IN `T_SESSION_SCAN` TIMESTAMP,
	IN `N_SRCE_SYSTEM` VARCHAR(30),
	IN `I_MOD_YR` INT,
	IN `C_FAM` varchar(50),
	IN `C_ENG` varchar(30),
    IN `C_FUEL_TYPE` VARCHAR(30),
    IN `C_FUEL_TYPE_DESC` VARCHAR(30),
	IN `C_TRANSM` varchar(50),
	IN `D_LAST_SERVICE_PREV_RO` date
#    , OUT `VAR_I_RO_JOURNEY` BIGINT
)
    SQL SECURITY INVOKER
BEGIN

DECLARE RETURN_I_RO_JOURNEY BIGINT;

DECLARE OPEN_PREVIOUS_RO_C_DLR VARCHAR(30);

DECLARE MAX_I_RO_JOURNEY BIGINT;
DECLARE OPEN_PREVIOUS_I_RO_JOURNEY BIGINT;
DECLARE OPEN_PREVIOUS_RO_wiTECH_SCAN_LATEST TIMESTAMP;
DECLARE OPEN_PREVIOUS_RO_WIADVISOR_SCAN TIMESTAMP;
DECLARE OPEN_PREVIOUS_I_RO VARCHAR(30);

DECLARE OPEN_PREVIOUS_I_NUM_CHERWELL_CASEID_CREATED INT;
DECLARE OPEN_PREVIOUS_T_LAST_CLOSE_CHERWELL_CASEID TIMESTAMP;
DECLARE OPEN_PREVIOUS_T_FIRST_CREATED_CHERWELL_CASEID TIMESTAMP;

DECLARE CLOSE_PREVIOUS_I_RO_JOURNEY BIGINT;
DECLARE CLOSE_PREVIOUS_RO_wiTECH_SCAN_LATEST TIMESTAMP;
DECLARE CLOSE_PREVIOUS_RO_WIADVISOR_SCAN TIMESTAMP;
DECLARE CLOSE_PREVIOUS_I_RO VARCHAR(30);


DECLARE VAR_I_DLR_PH_NMBR		  INT;
DECLARE VAR_N_DLR                 VARCHAR(100);
DECLARE VAR_C_DLR_BUSINESS        VARCHAR(20);
DECLARE VAR_X_COUNTRY             VARCHAR(100);
DECLARE VAR_N_BUSINESS_CENTER     VARCHAR(30);
    
DECLARE VAR_INSERT_HISTORY     	  INT;
DECLARE VAR_JOURNEY_SL_NO     	  INT;
    

DECLARE EXIT HANDLER FOR SQLEXCEPTION
BEGIN
SHOW ERRORS;
ROLLBACK;
END;

START TRANSACTION;

/*
CHECK IF THERE IS OPEN PREVIOUS RO PRESENT(T_END_JOURNEY IS NULL ) FOR SAME VIN AND DELEAER CODE
*/

SET VAR_INSERT_HISTORY = 0; 

  SELECT A.I_RO_JOURNEY
	     ,A.T_wiTECH_SCAN_LATEST  
        ,A.T_WIADVISOR_SCAN
        ,A.I_RO
	  INTO CLOSE_PREVIOUS_I_RO_JOURNEY
		 , CLOSE_PREVIOUS_RO_wiTECH_SCAN_LATEST	
         , CLOSE_PREVIOUS_RO_WIADVISOR_SCAN
         , CLOSE_PREVIOUS_I_RO
	FROM RO_JOURNEY AS A
	WHERE A.I_VIN = I_VIN
	AND A.C_DLR = C_DLR
	AND A.T_END_JOURNEY IS NOT NULL
    AND DATE(T_SESSION_SCAN) BETWEEN DATE(A.T_START_JOURNEY) AND DATE(A.T_END_JOURNEY)
    #AND A.T_FORCE_CLOSE_RO IS NULL) 
	ORDER BY A.T_START_JOURNEY DESC
	LIMIT 1
	;


IF CLOSE_PREVIOUS_I_RO_JOURNEY IS NOT NULL THEN

SET RETURN_I_RO_JOURNEY = CLOSE_PREVIOUS_I_RO_JOURNEY;

SET VAR_INSERT_HISTORY = 1; 

UPDATE RO_JOURNEY A 
				SET A.Q_ODOMETER_LAST = Q_ODOMETER
					,A.T_wiTECH_SCAN_EARLIEST = LEAST(IFNULL(A.T_wiTECH_SCAN_EARLIEST,'9999-01-01 00:00:01')
														,(CASE WHEN UPPER(N_SRCE_SYSTEM) = 'WITECH' THEN T_SESSION_SCAN ELSE A.T_wiTECH_SCAN_EARLIEST END))
					,A.T_wiTECH_SCAN_LATEST   = GREATEST(IFNULL(A.T_wiTECH_SCAN_LATEST, '0001-01-01 00:00:01')
														,(CASE WHEN UPPER(N_SRCE_SYSTEM) = 'WITECH' THEN T_SESSION_SCAN ELSE A.T_wiTECH_SCAN_LATEST END))
					,A.T_WIADVISOR_SCAN_EARLIEST = LEAST(IFNULL(A.T_WIADVISOR_SCAN_EARLIEST,'9999-01-01 00:00:01')
														,(CASE WHEN UPPER(N_SRCE_SYSTEM) = 'WIADVISOR' 
															THEN T_SESSION_SCAN ELSE A.T_WIADVISOR_SCAN_EARLIEST END))
				    ,A.T_WIADVISOR_SCAN   = GREATEST(IFNULL(A.T_WIADVISOR_SCAN, '0001-01-01 00:00:01')
														,(CASE WHEN UPPER(N_SRCE_SYSTEM) = 'WIADVISOR' 
															THEN T_SESSION_SCAN ELSE A.T_WIADVISOR_SCAN END))
					 ,A.N_SRCE_UPDATE  = N_SRCE_SYSTEM
					,A.T_STMP_UPDATE= CURRENT_TIMESTAMP()
			 WHERE A.I_RO_JOURNEY = CLOSE_PREVIOUS_I_RO_JOURNEY
            ;
            
            UPDATE RO_JOURNEY_OPEN A 
				SET A.Q_ODOMETER_LAST = Q_ODOMETER
					,A.T_wiTECH_SCAN_EARLIEST = LEAST(IFNULL(A.T_wiTECH_SCAN_EARLIEST,'9999-01-01 00:00:01')
														,(CASE WHEN UPPER(N_SRCE_SYSTEM) = 'WITECH' THEN T_SESSION_SCAN ELSE A.T_wiTECH_SCAN_EARLIEST END))
					,A.T_wiTECH_SCAN_LATEST   = GREATEST(IFNULL(A.T_wiTECH_SCAN_LATEST, '0001-01-01 00:00:01')
														,(CASE WHEN UPPER(N_SRCE_SYSTEM) = 'WITECH' THEN T_SESSION_SCAN ELSE A.T_wiTECH_SCAN_LATEST END))
					,A.T_WIADVISOR_SCAN_EARLIEST = LEAST(IFNULL(A.T_WIADVISOR_SCAN_EARLIEST,'9999-01-01 00:00:01')
														,(CASE WHEN UPPER(N_SRCE_SYSTEM) = 'WIADVISOR' 
															THEN T_SESSION_SCAN ELSE A.T_WIADVISOR_SCAN_EARLIEST END))
				    ,A.T_WIADVISOR_SCAN   = GREATEST(IFNULL(A.T_WIADVISOR_SCAN, '0001-01-01 00:00:01')
														,(CASE WHEN UPPER(N_SRCE_SYSTEM) = 'WIADVISOR' 
															THEN T_SESSION_SCAN ELSE A.T_WIADVISOR_SCAN END))
					 ,A.N_SRCE_UPDATE  = N_SRCE_SYSTEM
					,A.T_STMP_UPDATE= CURRENT_TIMESTAMP()
			 WHERE A.I_RO_JOURNEY = CLOSE_PREVIOUS_I_RO_JOURNEY
            ;
ELSE

  SELECT A.I_RO_JOURNEY
	#	,A.Q_ODOMETER
    #    ,A.Q_ODOMETER_LAST
		,A.C_DLR
        ,A.T_wiTECH_SCAN_LATEST  
        ,A.T_WIADVISOR_SCAN
        ,A.I_RO
        ,A.I_NUM_CHERWELL_CASEID_CREATED
        ,A.T_LAST_CLOSE_CHERWELL_CASEID
        ,A.T_FIRST_CREATED_CHERWELL_CASEID
	  INTO OPEN_PREVIOUS_I_RO_JOURNEY
	#	 , OPEN_PREVIOUS_RO_ODOMETER
    #     , OPEN_PREVIOUS_RO_ODOMETER_LAST
		 , OPEN_PREVIOUS_RO_C_DLR	
         , OPEN_PREVIOUS_RO_wiTECH_SCAN_LATEST	
         , OPEN_PREVIOUS_RO_WIADVISOR_SCAN
         , OPEN_PREVIOUS_I_RO
         , OPEN_PREVIOUS_I_NUM_CHERWELL_CASEID_CREATED
         , OPEN_PREVIOUS_T_LAST_CLOSE_CHERWELL_CASEID
         , OPEN_PREVIOUS_T_FIRST_CREATED_CHERWELL_CASEID
	 
	FROM RO_JOURNEY AS A
	WHERE A.I_VIN = I_VIN
	#AND A.C_DLR = C_DLR
	AND A.T_END_JOURNEY IS NULL 
    #AND A.T_FORCE_CLOSE_RO IS NULL) 
	ORDER BY A.T_START_JOURNEY DESC
	LIMIT 1
	;

IF OPEN_PREVIOUS_I_RO_JOURNEY IS NULL THEN

	# INSERT THE RECORD AS NEW RO;
	
	SET VAR_INSERT_HISTORY = 1;

    INSERT INTO RO_JOURNEY
				(
#				I_RO_JOURNEY ,
				I_VIN ,
				C_DLR ,
				Q_ODOMETER ,
				Q_ODOMETER_LAST ,
				T_START_JOURNEY,
				T_wiTECH_SCAN_EARLIEST, 
				T_wiTECH_SCAN_LATEST,
                T_WIADVISOR_SCAN_EARLIEST, 
				T_WIADVISOR_SCAN,
				I_MOD_YR,
				C_FAM, 						
				C_ENGINE_SALES_CODE,
                C_FUEL_TYPE,
                C_FUEL_TYPE_DESC,
				C_TRANSM, 				
				D_LAST_SERVICE_PREV_RO,
                N_SRCE_ADD, 
				T_STMP_ADD
				)
				VALUES
				(
#				MAX_I_RO_JOURNEY ,
				I_VIN ,
				C_DLR ,
				Q_ODOMETER ,
				Q_ODOMETER ,
                T_SESSION_SCAN,
				(CASE WHEN UPPER(N_SRCE_SYSTEM) = 'WITECH' THEN T_SESSION_SCAN ELSE NULL END),
                (CASE WHEN UPPER(N_SRCE_SYSTEM) = 'WITECH' THEN T_SESSION_SCAN ELSE NULL END),
                (CASE WHEN UPPER(N_SRCE_SYSTEM) = 'WIADVISOR' THEN T_SESSION_SCAN ELSE NULL END),
				(CASE WHEN UPPER(N_SRCE_SYSTEM) = 'WIADVISOR' THEN T_SESSION_SCAN ELSE NULL END),
				I_MOD_YR,
                C_FAM, 						
				C_ENG, 		
				C_FUEL_TYPE,
                C_FUEL_TYPE_DESC,
				C_TRANSM, 				
				D_LAST_SERVICE_PREV_RO,
            	N_SRCE_SYSTEM,
				CURRENT_TIMESTAMP()
				);
 
 
	SELECT LAST_INSERT_ID() INTO RETURN_I_RO_JOURNEY;
	   
    INSERT INTO RO_JOURNEY_OPEN
				(
				I_RO_JOURNEY ,
				I_VIN ,
				C_DLR ,
				Q_ODOMETER ,
				Q_ODOMETER_LAST ,
				T_START_JOURNEY,
				T_wiTECH_SCAN_EARLIEST, 
				T_wiTECH_SCAN_LATEST, 
                T_WIADVISOR_SCAN_EARLIEST, 
				T_WIADVISOR_SCAN,
				I_MOD_YR,
				C_FAM, 						
				C_ENGINE_SALES_CODE,
                C_FUEL_TYPE,
                C_FUEL_TYPE_DESC,
				C_TRANSM, 				
				D_LAST_SERVICE_PREV_RO,
                N_SRCE_ADD, 
				T_STMP_ADD
				)
				VALUES
				(
				RETURN_I_RO_JOURNEY ,
				I_VIN ,
				C_DLR ,
				Q_ODOMETER ,
				Q_ODOMETER ,
                T_SESSION_SCAN,
				(CASE WHEN UPPER(N_SRCE_SYSTEM) = 'WITECH' THEN T_SESSION_SCAN ELSE NULL END),
                (CASE WHEN UPPER(N_SRCE_SYSTEM) = 'WITECH' THEN T_SESSION_SCAN ELSE NULL END),
                (CASE WHEN UPPER(N_SRCE_SYSTEM) = 'WIADVISOR' THEN T_SESSION_SCAN ELSE NULL END),
				(CASE WHEN UPPER(N_SRCE_SYSTEM) = 'WIADVISOR' THEN T_SESSION_SCAN ELSE NULL END),
				I_MOD_YR,
                C_FAM, 						
				C_ENG, 		
				C_FUEL_TYPE,
                C_FUEL_TYPE_DESC,
				C_TRANSM, 				
				D_LAST_SERVICE_PREV_RO,
            	N_SRCE_SYSTEM,
				CURRENT_TIMESTAMP()
				);
                
    COMMIT;
                  
 
/*
    UPDATE  RO_JOURNEY_OPEN A,
		   DEALER_MASTER B
	   SET A.C_DLR_BUSINESS = B.C_DLR_BUSINESS
	   ,A.I_DLR_PH_NMBR = B.I_DLR_PH_NMBR
	   ,A.N_DLR = B.N_DLR
	  WHERE A.I_RO_JOURNEY = RETURN_I_RO_JOURNEY
		AND	A.C_DLR = B.C_DLR
	  ;
  
	SET SQL_SAFE_UPDATES = 0; 
	UPDATE  RO_JOURNEY_OPEN A,
		   BUSINESS_CENTER_DESC B
	   SET A.N_BUSINESS_CENTER = B.N_BUSINESS_CENTER
	  WHERE A.I_RO_JOURNEY = RETURN_I_RO_JOURNEY
		AND A.C_DLR_BUSINESS = B.C_BUSINESS_CENTER
	  ;
  
 */
 
 
 SELECT  A.I_DLR_PH_NMBR
		  , A.N_DLR
          , A.C_DLR_BUSINESS
          , A.X_COUNTRY
    INTO 	VAR_I_DLR_PH_NMBR			
		  , VAR_N_DLR
          , VAR_C_DLR_BUSINESS
          , VAR_X_COUNTRY
       FROM DEALER_MASTER A 
	WHERE  A.C_DLR = C_DLR;
    
      IF VAR_X_COUNTRY NOT IN ('USA','CAN','MEX')  THEN
		  SET VAR_X_COUNTRY = 'ROW';
          SET VAR_C_DLR_BUSINESS = 'I';
      END IF;
 
 	
		SELECT A.N_BUSINESS_CENTER 
			INTO VAR_N_BUSINESS_CENTER 
		FROM BUSINESS_CENTER_DESC A 
		WHERE A.X_COUNTRY = VAR_X_COUNTRY 
		AND A.C_BUSINESS_CENTER = VAR_C_DLR_BUSINESS
		;
            
	SET SQL_SAFE_UPDATES = 0; 

	UPDATE  RO_JOURNEY A
	SET A.C_DLR_BUSINESS 	= VAR_C_DLR_BUSINESS
	   ,A.I_DLR_PH_NMBR 	= VAR_I_DLR_PH_NMBR
	   ,A.N_DLR 			= VAR_N_DLR
	   ,A.N_BUSINESS_CENTER = VAR_N_BUSINESS_CENTER
	   WHERE A.I_RO_JOURNEY = RETURN_I_RO_JOURNEY
	  ;

    
	UPDATE  RO_JOURNEY_OPEN A
	SET A.C_DLR_BUSINESS 	= VAR_C_DLR_BUSINESS
	   ,A.I_DLR_PH_NMBR 	= VAR_I_DLR_PH_NMBR
	   ,A.N_DLR 			= VAR_N_DLR
	   ,A.N_BUSINESS_CENTER = VAR_N_BUSINESS_CENTER
	   WHERE A.I_RO_JOURNEY = RETURN_I_RO_JOURNEY
	  ;

 
  
ELSE

	SET RETURN_I_RO_JOURNEY = OPEN_PREVIOUS_I_RO_JOURNEY;
	
   # IF (Q_ODOMETER - OPEN_PREVIOUS_RO_ODOMETER > 100)
	#	AND (Q_ODOMETER - OPEN_PREVIOUS_RO_ODOMETER_LAST > 10) THEN
	IF(
		OPEN_PREVIOUS_RO_C_DLR != C_DLR
        OR
		(
			 (OPEN_PREVIOUS_RO_C_DLR = C_DLR) 
		 AND DATEDIFF(T_SESSION_SCAN, IFNULL(OPEN_PREVIOUS_RO_wiTECH_SCAN_LATEST,OPEN_PREVIOUS_RO_WIADVISOR_SCAN)) > 30
		 AND OPEN_PREVIOUS_I_RO IS NULL 
         AND (OPEN_PREVIOUS_I_NUM_CHERWELL_CASEID_CREATED IS NULL 
				OR ( OPEN_PREVIOUS_I_NUM_CHERWELL_CASEID_CREATED IS NOT NULL
				      AND DATEDIFF(NOW(),IFNULL(OPEN_PREVIOUS_T_LAST_CLOSE_CHERWELL_CASEID,OPEN_PREVIOUS_T_FIRST_CREATED_CHERWELL_CASEID)) > 30
					) 
			 )
         )
	    ) THEN 
				
           
			SET VAR_INSERT_HISTORY = 2;     
                
			UPDATE RO_JOURNEY A 
			    SET  	 
						A.T_END_JOURNEY = (CASE WHEN A.T_WITECH_SCAN_LATEST IS NOT NULL 
													THEN A.T_WITECH_SCAN_LATEST 
													ELSE T_SESSION_SCAN END)
						,A.L_FORCE_CLOSE = 'Y' 
					#	,A.T_FORCE_CLOSE_RO = T_SESSION_SCAN
						,A.N_SRCE_UPDATE = N_SRCE_SYSTEM
						,A.T_STMP_UPDATE = CURRENT_TIMESTAMP()
	         WHERE A.I_RO_JOURNEY = OPEN_PREVIOUS_I_RO_JOURNEY
            ;
           
            DELETE FROM RO_JOURNEY_OPEN WHERE I_RO_JOURNEY = OPEN_PREVIOUS_I_RO_JOURNEY;
				
			#	UPDATE THE VEHICLE MASTER D_LAST_SERVICE
                
                UPDATE VEHICLE_MASTER A
				SET A.D_LAST_SERVICE = GREATEST(OPEN_PREVIOUS_RO_wiTECH_SCAN_LATEST,T_SESSION_SCAN)
				WHERE A.I_VIN = I_VIN ;
            
		    # INSERT THE RECORD AS NEW RO;
			
			INSERT INTO RO_JOURNEY
						(
		#				I_RO_JOURNEY ,
						I_VIN ,
						C_DLR ,
						Q_ODOMETER ,
						Q_ODOMETER_LAST ,
						T_START_JOURNEY,
						T_wiTECH_SCAN_EARLIEST, 
						T_wiTECH_SCAN_LATEST, 
						T_WIADVISOR_SCAN_EARLIEST, 
						T_WIADVISOR_SCAN,
						I_MOD_YR,
						C_FAM, 						
						C_ENGINE_SALES_CODE, 						
						C_FUEL_TYPE,
                        C_FUEL_TYPE_DESC,
                        C_TRANSM, 				
						D_LAST_SERVICE_PREV_RO,
						N_SRCE_ADD, 
						T_STMP_ADD
						)
						VALUES
						(
		#				MAX_I_RO_JOURNEY ,
						I_VIN ,
						C_DLR ,
						Q_ODOMETER ,
						Q_ODOMETER ,
						T_SESSION_SCAN,
						(CASE WHEN UPPER(N_SRCE_SYSTEM) = 'WITECH' THEN T_SESSION_SCAN ELSE NULL END),
						(CASE WHEN UPPER(N_SRCE_SYSTEM) = 'WITECH' THEN T_SESSION_SCAN ELSE NULL END),
						(CASE WHEN UPPER(N_SRCE_SYSTEM) = 'WIADVISOR' THEN T_SESSION_SCAN ELSE NULL END),
						(CASE WHEN UPPER(N_SRCE_SYSTEM) = 'WIADVISOR' THEN T_SESSION_SCAN ELSE NULL END),
						I_MOD_YR,
						C_FAM, 						
						C_ENG, 						
						C_FUEL_TYPE,
                        C_FUEL_TYPE_DESC,
                        C_TRANSM, 				
						D_LAST_SERVICE_PREV_RO,
						N_SRCE_SYSTEM,
						CURRENT_TIMESTAMP()
						);

				SELECT LAST_INSERT_ID() INTO RETURN_I_RO_JOURNEY;
                
                	INSERT INTO RO_JOURNEY_OPEN
						(
						I_RO_JOURNEY ,
						I_VIN ,
						C_DLR ,
						Q_ODOMETER ,
						Q_ODOMETER_LAST ,
						T_START_JOURNEY,
						T_wiTECH_SCAN_EARLIEST, 
						T_wiTECH_SCAN_LATEST, 
						T_WIADVISOR_SCAN_EARLIEST, 
						T_WIADVISOR_SCAN,
						I_MOD_YR,
						C_FAM, 						
						C_ENGINE_SALES_CODE, 						
						C_FUEL_TYPE,
                        C_FUEL_TYPE_DESC,
                        C_TRANSM, 				
						D_LAST_SERVICE_PREV_RO,
						N_SRCE_ADD, 
						T_STMP_ADD
						)
						VALUES
						(
						RETURN_I_RO_JOURNEY ,
						I_VIN ,
						C_DLR ,
						Q_ODOMETER ,
						Q_ODOMETER ,
						T_SESSION_SCAN,
						(CASE WHEN UPPER(N_SRCE_SYSTEM) = 'WITECH' THEN T_SESSION_SCAN ELSE NULL END),
						(CASE WHEN UPPER(N_SRCE_SYSTEM) = 'WITECH' THEN T_SESSION_SCAN ELSE NULL END),
						(CASE WHEN UPPER(N_SRCE_SYSTEM) = 'WIADVISOR' THEN T_SESSION_SCAN ELSE NULL END),
						(CASE WHEN UPPER(N_SRCE_SYSTEM) = 'WIADVISOR' THEN T_SESSION_SCAN ELSE NULL END),
						I_MOD_YR,
						C_FAM, 						
						C_ENG, 						
						C_FUEL_TYPE,
                        C_FUEL_TYPE_DESC,
                        C_TRANSM, 				
						D_LAST_SERVICE_PREV_RO,
						N_SRCE_SYSTEM,
						CURRENT_TIMESTAMP()
						);

	  COMMIT;
      
	/*	
	UPDATE  RO_JOURNEY_OPEN A,
		   DEALER_MASTER B
	   SET A.C_DLR_BUSINESS = B.C_DLR_BUSINESS
	   ,A.I_DLR_PH_NMBR = B.I_DLR_PH_NMBR
	   ,A.N_DLR = B.N_DLR
	  WHERE A.I_RO_JOURNEY = RETURN_I_RO_JOURNEY
		AND	A.C_DLR = B.C_DLR
	  ;
  
	SET SQL_SAFE_UPDATES = 0; 
	UPDATE  RO_JOURNEY_OPEN A,
		   BUSINESS_CENTER_DESC B
	   SET A.N_BUSINESS_CENTER = B.N_BUSINESS_CENTER
	  WHERE A.I_RO_JOURNEY = RETURN_I_RO_JOURNEY
		AND A.C_DLR_BUSINESS = B.C_BUSINESS_CENTER
	  ;
  */
  
	SELECT  A.I_DLR_PH_NMBR
		  , A.N_DLR
          , A.C_DLR_BUSINESS
          , A.X_COUNTRY
    INTO 	VAR_I_DLR_PH_NMBR			
		  , VAR_N_DLR
          , VAR_C_DLR_BUSINESS
          , VAR_X_COUNTRY
       FROM DEALER_MASTER A 
	WHERE  A.C_DLR = C_DLR;
    
      IF VAR_X_COUNTRY NOT IN ('USA','CAN','MEX')  THEN
		  SET VAR_X_COUNTRY = 'ROW';
          SET VAR_C_DLR_BUSINESS = 'I';
      END IF;
 
 	
		SELECT A.N_BUSINESS_CENTER 
			INTO VAR_N_BUSINESS_CENTER 
		FROM BUSINESS_CENTER_DESC A 
		WHERE A.X_COUNTRY = VAR_X_COUNTRY 
		AND A.C_BUSINESS_CENTER = VAR_C_DLR_BUSINESS
		;
            
	SET SQL_SAFE_UPDATES = 0;
    
    
	UPDATE  RO_JOURNEY A
	SET A.C_DLR_BUSINESS 	= VAR_C_DLR_BUSINESS
	   ,A.I_DLR_PH_NMBR 	= VAR_I_DLR_PH_NMBR
	   ,A.N_DLR 			= VAR_N_DLR
	   ,A.N_BUSINESS_CENTER = VAR_N_BUSINESS_CENTER
	   WHERE A.I_RO_JOURNEY = RETURN_I_RO_JOURNEY
	  ;
    
	UPDATE  RO_JOURNEY_OPEN A
	SET A.C_DLR_BUSINESS 	= VAR_C_DLR_BUSINESS
	   ,A.I_DLR_PH_NMBR 	= VAR_I_DLR_PH_NMBR
	   ,A.N_DLR 			= VAR_N_DLR
	   ,A.N_BUSINESS_CENTER = VAR_N_BUSINESS_CENTER
	   WHERE A.I_RO_JOURNEY = RETURN_I_RO_JOURNEY
	  ;

  
    ELSE
			            
			SET VAR_INSERT_HISTORY = 1;
            
            UPDATE RO_JOURNEY A 
				SET A.Q_ODOMETER_LAST = Q_ODOMETER
					,A.T_wiTECH_SCAN_EARLIEST = LEAST(IFNULL(A.T_wiTECH_SCAN_EARLIEST,'9999-01-01 00:00:01')
														,(CASE WHEN UPPER(N_SRCE_SYSTEM) = 'WITECH' THEN T_SESSION_SCAN ELSE A.T_wiTECH_SCAN_EARLIEST END))
					,A.T_wiTECH_SCAN_LATEST   = GREATEST(IFNULL(A.T_wiTECH_SCAN_LATEST, '0001-01-01 00:00:01')
														,(CASE WHEN UPPER(N_SRCE_SYSTEM) = 'WITECH' THEN T_SESSION_SCAN ELSE A.T_wiTECH_SCAN_LATEST END))
					,A.T_WIADVISOR_SCAN_EARLIEST = LEAST(IFNULL(A.T_WIADVISOR_SCAN_EARLIEST,'9999-01-01 00:00:01')
														,(CASE WHEN UPPER(N_SRCE_SYSTEM) = 'WIADVISOR' 
															THEN T_SESSION_SCAN ELSE A.T_WIADVISOR_SCAN_EARLIEST END))
				    ,A.T_WIADVISOR_SCAN   = GREATEST(IFNULL(A.T_WIADVISOR_SCAN, '0001-01-01 00:00:01')
														,(CASE WHEN UPPER(N_SRCE_SYSTEM) = 'WIADVISOR' 
															THEN T_SESSION_SCAN ELSE A.T_WIADVISOR_SCAN END))
					 ,A.N_SRCE_UPDATE  = N_SRCE_SYSTEM
					,A.T_STMP_UPDATE= CURRENT_TIMESTAMP()
			 WHERE A.I_RO_JOURNEY = OPEN_PREVIOUS_I_RO_JOURNEY
            ;
            
            UPDATE RO_JOURNEY_OPEN A 
				SET A.Q_ODOMETER_LAST = Q_ODOMETER
					,A.T_wiTECH_SCAN_EARLIEST = LEAST(IFNULL(A.T_wiTECH_SCAN_EARLIEST,'9999-01-01 00:00:01')
														,(CASE WHEN UPPER(N_SRCE_SYSTEM) = 'WITECH' THEN T_SESSION_SCAN ELSE A.T_wiTECH_SCAN_EARLIEST END))
					,A.T_wiTECH_SCAN_LATEST   = GREATEST(IFNULL(A.T_wiTECH_SCAN_LATEST, '0001-01-01 00:00:01')
														,(CASE WHEN UPPER(N_SRCE_SYSTEM) = 'WITECH' THEN T_SESSION_SCAN ELSE A.T_wiTECH_SCAN_LATEST END))
					,A.T_WIADVISOR_SCAN_EARLIEST = LEAST(IFNULL(A.T_WIADVISOR_SCAN_EARLIEST,'9999-01-01 00:00:01')
														,(CASE WHEN UPPER(N_SRCE_SYSTEM) = 'WIADVISOR' 
															THEN T_SESSION_SCAN ELSE A.T_WIADVISOR_SCAN_EARLIEST END))
				    ,A.T_WIADVISOR_SCAN   = GREATEST(IFNULL(A.T_WIADVISOR_SCAN, '0001-01-01 00:00:01')
														,(CASE WHEN UPPER(N_SRCE_SYSTEM) = 'WIADVISOR' 
															THEN T_SESSION_SCAN ELSE A.T_WIADVISOR_SCAN END))
					 ,A.N_SRCE_UPDATE  = N_SRCE_SYSTEM
					,A.T_STMP_UPDATE= CURRENT_TIMESTAMP()
			 WHERE A.I_RO_JOURNEY = OPEN_PREVIOUS_I_RO_JOURNEY
            ;
	END IF;
END IF;
END IF;
COMMIT WORK;

SELECT RETURN_I_RO_JOURNEY;

	IF VAR_INSERT_HISTORY = 1 THEN
	
    SELECT IFNULL(MAX(JOURNEY_SL_NO),0)+1 INTO VAR_JOURNEY_SL_NO FROM RO_JOURNEY_HISTORY WHERE I_RO_JOURNEY = RETURN_I_RO_JOURNEY;
    
     INSERT INTO RO_JOURNEY_HISTORY
        (
		 JOURNEY_SL_NO
		,I_RO_JOURNEY
		,I_VIN
		,C_DLR
		,Q_ODOMETER
		,Q_ODOMETER_LAST
		,I_RO
		,T_START_JOURNEY
		,T_END_JOURNEY
		,L_FORCE_CLOSE
		,C_ISSUE
		,T_WITECH_SCAN_EARLIEST
		,T_WITECH_SCAN_LATEST
        ,T_WIADVISOR_SCAN_EARLIEST
		,T_WIADVISOR_SCAN
		,T_FORCE_CLOSE_RO
		,L_SERVICE_TYPE
		,I_MOD_YR
		,C_FAM
		,C_ENGINE_SALES_CODE
		,C_FUEL_TYPE
		,C_FUEL_TYPE_DESC
		,C_TRANSM
		,N_DLR
		,C_DLR_BUSINESS
		,N_BUSINESS_CENTER
		,I_DLR_PH_NMBR
		,I_FIRST_CHERWELL_CASEID
		,I_NUM_CHERWELL_CASEID_CREATED
		,I_NUM_CHERWELL_CASEID_CLOSED
		,T_FIRST_CREATED_CHERWELL_CASEID
		,T_LAST_CLOSE_CHERWELL_CASEID
		,VEHICLEOFFROAD
		,X_FAULT_IDENTIFIED
		,X_FAULT_IDENTIFIED_LOCATION
		,L_REPEAT_REPAIR
		,L_REPEAT_REPAIR_DLR
		,I_REPEAT_REPAIR_DLR_PREV_RO
		,L_REPEAT_REPAIR_COMPUTED
		,I_REPEAT_REPAIR_COMPUTED_PREV_RO
		,L_REPEAT_REPAIR_SERVICE_LIB
		,I_REPEAT_REPAIR_SERVICE_LIB_PREV_RO
		,X_PART_BACKORDER
		,D_PART_BACKORDER
		,D_ENGINEERING_CONTACT_INITIAL
		,D_ENGINEERING_CONTACT_FINAL_RES
		,D_BUILD
		,L_CURRENT_RO_STATUS
		,X_UNDER_WARRANTY
		,D_LAST_SERVICE_PREV_RO
		,I_REPAIR_COUNT
		,I_DAYS_DOWN
		,I_CUM_DAYS
		,FORCE_CLOSE_RULE
		,N_SRCE_ADD
		,N_SRCE_UPDATE
		,T_STMP_ADD
		,T_STMP_UPDATE
		,L_ACTIVE
  )     
     SELECT
		 VAR_JOURNEY_SL_NO
        ,A.I_RO_JOURNEY
		,A.I_VIN
		,A.C_DLR
		,A.Q_ODOMETER
		,A.Q_ODOMETER_LAST
		,A.I_RO
		,A.T_START_JOURNEY
		,A.T_END_JOURNEY
		,A.L_FORCE_CLOSE
		,A.C_ISSUE
		,A.T_WITECH_SCAN_EARLIEST
		,A.T_WITECH_SCAN_LATEST
		,A.T_WIADVISOR_SCAN_EARLIEST
		,A.T_WIADVISOR_SCAN
		,A.T_FORCE_CLOSE_RO
		,A.L_SERVICE_TYPE
		,A.I_MOD_YR
		,A.C_FAM
		,A.C_ENGINE_SALES_CODE
		,A.C_FUEL_TYPE
		,A.C_FUEL_TYPE_DESC
		,A.C_TRANSM
		,A.N_DLR
		,A.C_DLR_BUSINESS
		,A.N_BUSINESS_CENTER
		,A.I_DLR_PH_NMBR
		,A.I_FIRST_CHERWELL_CASEID
		,A.I_NUM_CHERWELL_CASEID_CREATED
		,A.I_NUM_CHERWELL_CASEID_CLOSED
		,A.T_FIRST_CREATED_CHERWELL_CASEID
		,A.T_LAST_CLOSE_CHERWELL_CASEID
		,A.VEHICLEOFFROAD
		,A.X_FAULT_IDENTIFIED
		,A.X_FAULT_IDENTIFIED_LOCATION
		,A.L_REPEAT_REPAIR
		,A.L_REPEAT_REPAIR_DLR
		,A.I_REPEAT_REPAIR_DLR_PREV_RO
		,A.L_REPEAT_REPAIR_COMPUTED
		,A.I_REPEAT_REPAIR_COMPUTED_PREV_RO
		,A.L_REPEAT_REPAIR_SERVICE_LIB
		,A.I_REPEAT_REPAIR_SERVICE_LIB_PREV_RO
		,A.X_PART_BACKORDER
		,A.D_PART_BACKORDER
		,A.D_ENGINEERING_CONTACT_INITIAL
		,A.D_ENGINEERING_CONTACT_FINAL_RES
		,A.D_BUILD
		,A.L_CURRENT_RO_STATUS
		,A.X_UNDER_WARRANTY
		,A.D_LAST_SERVICE_PREV_RO
		,A.I_REPAIR_COUNT
		,A.I_DAYS_DOWN
		,A.I_CUM_DAYS
		,A.FORCE_CLOSE_RULE
		,A.N_SRCE_ADD
		,A.N_SRCE_UPDATE
		,A.T_STMP_ADD
		,A.T_STMP_UPDATE
		,A.L_ACTIVE
        FROM RO_JOURNEY A 
        WHERE A.I_RO_JOURNEY = RETURN_I_RO_JOURNEY
		; 
	END IF;
    
    IF VAR_INSERT_HISTORY = 2 THEN
	 
    
    SELECT IFNULL(MAX(JOURNEY_SL_NO),0)+1 INTO VAR_JOURNEY_SL_NO 
    FROM RO_JOURNEY_HISTORY WHERE I_RO_JOURNEY = OPEN_PREVIOUS_I_RO_JOURNEY;
             
  INSERT INTO RO_JOURNEY_HISTORY
        (
		 JOURNEY_SL_NO
		,I_RO_JOURNEY
		,I_VIN
		,C_DLR
		,Q_ODOMETER
		,Q_ODOMETER_LAST
		,I_RO
		,T_START_JOURNEY
		,T_END_JOURNEY
		,L_FORCE_CLOSE
		,C_ISSUE
		,T_WITECH_SCAN_EARLIEST
		,T_WITECH_SCAN_LATEST
		,T_WIADVISOR_SCAN_EARLIEST
		,T_WIADVISOR_SCAN
		,T_FORCE_CLOSE_RO
		,L_SERVICE_TYPE
		,I_MOD_YR
		,C_FAM
		,C_ENGINE_SALES_CODE
		,C_FUEL_TYPE
		,C_FUEL_TYPE_DESC
		,C_TRANSM
		,N_DLR
		,C_DLR_BUSINESS
		,N_BUSINESS_CENTER
		,I_DLR_PH_NMBR
		,I_FIRST_CHERWELL_CASEID
		,I_NUM_CHERWELL_CASEID_CREATED
		,I_NUM_CHERWELL_CASEID_CLOSED
		,T_FIRST_CREATED_CHERWELL_CASEID
		,T_LAST_CLOSE_CHERWELL_CASEID
		,VEHICLEOFFROAD
		,X_FAULT_IDENTIFIED
		,X_FAULT_IDENTIFIED_LOCATION
		,L_REPEAT_REPAIR
		,L_REPEAT_REPAIR_DLR
		,I_REPEAT_REPAIR_DLR_PREV_RO
		,L_REPEAT_REPAIR_COMPUTED
		,I_REPEAT_REPAIR_COMPUTED_PREV_RO
		,L_REPEAT_REPAIR_SERVICE_LIB
		,I_REPEAT_REPAIR_SERVICE_LIB_PREV_RO
		,X_PART_BACKORDER
		,D_PART_BACKORDER
		,D_ENGINEERING_CONTACT_INITIAL
		,D_ENGINEERING_CONTACT_FINAL_RES
		,D_BUILD
		,L_CURRENT_RO_STATUS
		,X_UNDER_WARRANTY
		,D_LAST_SERVICE_PREV_RO
		,I_REPAIR_COUNT
		,I_DAYS_DOWN
		,I_CUM_DAYS
		,FORCE_CLOSE_RULE
		,N_SRCE_ADD
		,N_SRCE_UPDATE
		,T_STMP_ADD
		,T_STMP_UPDATE
		,L_ACTIVE
  )     
     SELECT
		 VAR_JOURNEY_SL_NO
        ,A.I_RO_JOURNEY
		,A.I_VIN
		,A.C_DLR
		,A.Q_ODOMETER
		,A.Q_ODOMETER_LAST
		,A.I_RO
		,A.T_START_JOURNEY
		,A.T_END_JOURNEY
		,A.L_FORCE_CLOSE
		,A.C_ISSUE
		,A.T_WITECH_SCAN_EARLIEST
		,A.T_WITECH_SCAN_LATEST
		,A.T_WIADVISOR_SCAN_EARLIEST
		,A.T_WIADVISOR_SCAN
		,A.T_FORCE_CLOSE_RO
		,A.L_SERVICE_TYPE
		,A.I_MOD_YR
		,A.C_FAM
		,A.C_ENGINE_SALES_CODE
		,A.C_FUEL_TYPE
		,A.C_FUEL_TYPE_DESC
		,A.C_TRANSM
		,A.N_DLR
		,A.C_DLR_BUSINESS
		,A.N_BUSINESS_CENTER
		,A.I_DLR_PH_NMBR
		,A.I_FIRST_CHERWELL_CASEID
		,A.I_NUM_CHERWELL_CASEID_CREATED
		,A.I_NUM_CHERWELL_CASEID_CLOSED
		,A.T_FIRST_CREATED_CHERWELL_CASEID
		,A.T_LAST_CLOSE_CHERWELL_CASEID
		,A.VEHICLEOFFROAD
		,A.X_FAULT_IDENTIFIED
		,A.X_FAULT_IDENTIFIED_LOCATION
		,A.L_REPEAT_REPAIR
		,A.L_REPEAT_REPAIR_DLR
		,A.I_REPEAT_REPAIR_DLR_PREV_RO
		,A.L_REPEAT_REPAIR_COMPUTED
		,A.I_REPEAT_REPAIR_COMPUTED_PREV_RO
		,A.L_REPEAT_REPAIR_SERVICE_LIB
		,A.I_REPEAT_REPAIR_SERVICE_LIB_PREV_RO
		,A.X_PART_BACKORDER
		,A.D_PART_BACKORDER
		,A.D_ENGINEERING_CONTACT_INITIAL
		,A.D_ENGINEERING_CONTACT_FINAL_RES
		,A.D_BUILD
		,A.L_CURRENT_RO_STATUS
		,A.X_UNDER_WARRANTY
		,A.D_LAST_SERVICE_PREV_RO
		,A.I_REPAIR_COUNT
		,A.I_DAYS_DOWN
		,A.I_CUM_DAYS
		,A.FORCE_CLOSE_RULE
		,A.N_SRCE_ADD
		,A.N_SRCE_UPDATE
		,A.T_STMP_ADD
		,A.T_STMP_UPDATE
		,A.L_ACTIVE
        FROM RO_JOURNEY A 
        WHERE A.I_RO_JOURNEY = OPEN_PREVIOUS_I_RO_JOURNEY
		;
        
      
  INSERT INTO RO_JOURNEY_HISTORY
        (
		 JOURNEY_SL_NO
		,I_RO_JOURNEY
		,I_VIN
		,C_DLR
		,Q_ODOMETER
		,Q_ODOMETER_LAST
		,I_RO
		,T_START_JOURNEY
		,T_END_JOURNEY
		,L_FORCE_CLOSE
		,C_ISSUE
		,T_WITECH_SCAN_EARLIEST
		,T_WITECH_SCAN_LATEST
		,T_WIADVISOR_SCAN_EARLIEST
		,T_WIADVISOR_SCAN
		,T_FORCE_CLOSE_RO
		,L_SERVICE_TYPE
		,I_MOD_YR
		,C_FAM
		,C_ENGINE_SALES_CODE
		,C_FUEL_TYPE
		,C_FUEL_TYPE_DESC
		,C_TRANSM
		,N_DLR
		,C_DLR_BUSINESS
		,N_BUSINESS_CENTER
		,I_DLR_PH_NMBR
		,I_FIRST_CHERWELL_CASEID
		,I_NUM_CHERWELL_CASEID_CREATED
		,I_NUM_CHERWELL_CASEID_CLOSED
		,T_FIRST_CREATED_CHERWELL_CASEID
		,T_LAST_CLOSE_CHERWELL_CASEID
		,VEHICLEOFFROAD
		,X_FAULT_IDENTIFIED
		,X_FAULT_IDENTIFIED_LOCATION
		,L_REPEAT_REPAIR
		,L_REPEAT_REPAIR_DLR
		,I_REPEAT_REPAIR_DLR_PREV_RO
		,L_REPEAT_REPAIR_COMPUTED
		,I_REPEAT_REPAIR_COMPUTED_PREV_RO
		,L_REPEAT_REPAIR_SERVICE_LIB
		,I_REPEAT_REPAIR_SERVICE_LIB_PREV_RO
		,X_PART_BACKORDER
		,D_PART_BACKORDER
		,D_ENGINEERING_CONTACT_INITIAL
		,D_ENGINEERING_CONTACT_FINAL_RES
		,D_BUILD
		,L_CURRENT_RO_STATUS
		,X_UNDER_WARRANTY
		,D_LAST_SERVICE_PREV_RO
		,I_REPAIR_COUNT
		,I_DAYS_DOWN
		,I_CUM_DAYS
		,FORCE_CLOSE_RULE
		,N_SRCE_ADD
		,N_SRCE_UPDATE
		,T_STMP_ADD
		,T_STMP_UPDATE
		,L_ACTIVE
  )     
     SELECT
		 1
        ,A.I_RO_JOURNEY
		,A.I_VIN
		,A.C_DLR
		,A.Q_ODOMETER
		,A.Q_ODOMETER_LAST
		,A.I_RO
		,A.T_START_JOURNEY
		,A.T_END_JOURNEY
		,A.L_FORCE_CLOSE
		,A.C_ISSUE
		,A.T_WITECH_SCAN_EARLIEST
		,A.T_WITECH_SCAN_LATEST
		,A.T_WIADVISOR_SCAN_EARLIEST
		,A.T_WIADVISOR_SCAN
		,A.T_FORCE_CLOSE_RO
		,A.L_SERVICE_TYPE
		,A.I_MOD_YR
		,A.C_FAM
		,A.C_ENGINE_SALES_CODE
		,A.C_FUEL_TYPE
		,A.C_FUEL_TYPE_DESC
		,A.C_TRANSM
		,A.N_DLR
		,A.C_DLR_BUSINESS
		,A.N_BUSINESS_CENTER
		,A.I_DLR_PH_NMBR
		,A.I_FIRST_CHERWELL_CASEID
		,A.I_NUM_CHERWELL_CASEID_CREATED
		,A.I_NUM_CHERWELL_CASEID_CLOSED
		,A.T_FIRST_CREATED_CHERWELL_CASEID
		,A.T_LAST_CLOSE_CHERWELL_CASEID
		,A.VEHICLEOFFROAD
		,A.X_FAULT_IDENTIFIED
		,A.X_FAULT_IDENTIFIED_LOCATION
		,A.L_REPEAT_REPAIR
		,A.L_REPEAT_REPAIR_DLR
		,A.I_REPEAT_REPAIR_DLR_PREV_RO
		,A.L_REPEAT_REPAIR_COMPUTED
		,A.I_REPEAT_REPAIR_COMPUTED_PREV_RO
		,A.L_REPEAT_REPAIR_SERVICE_LIB
		,A.I_REPEAT_REPAIR_SERVICE_LIB_PREV_RO
		,A.X_PART_BACKORDER
		,A.D_PART_BACKORDER
		,A.D_ENGINEERING_CONTACT_INITIAL
		,A.D_ENGINEERING_CONTACT_FINAL_RES
		,A.D_BUILD
		,A.L_CURRENT_RO_STATUS
		,A.X_UNDER_WARRANTY
		,A.D_LAST_SERVICE_PREV_RO
		,A.I_REPAIR_COUNT
		,A.I_DAYS_DOWN
		,A.I_CUM_DAYS
		,A.FORCE_CLOSE_RULE
		,A.N_SRCE_ADD
		,A.N_SRCE_UPDATE
		,A.T_STMP_ADD
		,A.T_STMP_UPDATE
		,A.L_ACTIVE
        FROM RO_JOURNEY A 
        WHERE A.I_RO_JOURNEY = RETURN_I_RO_JOURNEY
		; 
	END IF;

COMMIT;

#SET VAR_I_RO_JOURNEY = RETURN_I_RO_JOURNEY;

END
======================
CREATE DEFINER=`t12247adm`@`%` PROCEDURE `db_12247_d_001_instance_1`.`PROC_RO_JOURNEY_AUDIT`(
	IN `vin` VARCHAR(50),
	IN `roNumber` INT
)
    SQL SECURITY INVOKER
BEGIN
SELECT JOURNEY_SL_NO AS sequence,  I_RO_JOURNEY as roJourneyId, I_VIN as vin, N_SRCE_ADD AS sourceAdded, I_RO AS roNumber, N_SRCE_UPDATE AS sourceUpdated, T_STMP_ADD AS timeStampAdded, T_STMP_UPDATE AS timeStampUpdated, C_DLR AS delearCode, T_START_JOURNEY AS startJourney, T_END_JOURNEY AS endJourney, L_FORCE_CLOSE AS forceClose   
from RO_JOURNEY_HISTORY
WHERE I_VIN = vin AND I_RO_JOURNEY = roNumber
;
END
=========
CREATE DEFINER=`t12247adm`@`%` PROCEDURE `db_12247_d_001_instance_1`.`PROC_RO_JOURNEY_CHERWELL`(
	IN `I_VIN` VARCHAR(20),
	IN `C_DLR` VARCHAR(20),
	IN `Q_ODOMETER` FLOAT,
    IN `I_FIRST_CHERWELL_CASEID` VARCHAR(20),
	IN `I_RO` VARCHAR(20),
	IN `VEHICLEOFFROAD` VARCHAR(15),
	IN `CHERWELL_CASE_OPEN_DATE` TIMESTAMP,
	IN `CHERWELL_CASE_CLOSE_DATE` TIMESTAMP,
	IN `FLAG_NEW_CHERWELL_CASE` CHAR(1),
	IN `N_SRCE_SYSTEM` VARCHAR(30)
   # ,    OUT `VAR_I_RO_JOURNEY` BIGINT
)
    SQL SECURITY INVOKER
BEGIN

DECLARE RETURN_I_RO_JOURNEY BIGINT;

DECLARE I_RO_JOURNEY BIGINT;

DECLARE VAR_I_FIRST_CHERWELL_CASEID VARCHAR(20);
DECLARE RO_CHERWELL_OPEN_CASE_COUNT INT;
DECLARE RO_CHERWELL_CLOSE_CASE_COUNT INT;

DECLARE EXIT HANDLER FOR SQLEXCEPTION
BEGIN
SHOW ERRORS;
ROLLBACK;
END;

START TRANSACTION;

IF CHERWELL_CASE_CLOSE_DATE < '2016-01-01' THEN
SET CHERWELL_CASE_CLOSE_DATE = NULL;
END IF;


/* CHECK IF THERE RO JOURNEY IS PRESENT FOR SAME I_R0 */
SELECT 	 A.I_RO_JOURNEY
		,A.I_FIRST_CHERWELL_CASEID
		,A.I_NUM_CHERWELL_CASEID_CREATED
		,A.I_NUM_CHERWELL_CASEID_CLOSED
	INTO  I_RO_JOURNEY
		, VAR_I_FIRST_CHERWELL_CASEID
        , RO_CHERWELL_OPEN_CASE_COUNT
		, RO_CHERWELL_CLOSE_CASE_COUNT	
	FROM RO_JOURNEY AS A
	WHERE A.I_VIN = I_VIN
	AND A.C_DLR = C_DLR
    AND A.I_RO 	= I_RO 		
#	AND (A.T_END_JOURNEY IS NULL AND A.T_FORCE_CLOSE_RO IS NULL) 
	ORDER BY A.T_START_JOURNEY DESC
	LIMIT 1
	;

IF I_RO_JOURNEY IS NOT NULL THEN
	SET RETURN_I_RO_JOURNEY = I_RO_JOURNEY;
		
   	       #  SELECT RETURN_I_RO_JOURNEY;
           #  SELECT I_RO;    
UPDATE RO_JOURNEY A 
SET     A.I_FIRST_CHERWELL_CASEID = (CASE WHEN A.T_FIRST_CREATED_CHERWELL_CASEID IS NULL THEN I_FIRST_CHERWELL_CASEID ELSE VAR_I_FIRST_CHERWELL_CASEID END)
        ,A.I_NUM_CHERWELL_CASEID_CREATED = (CASE WHEN FLAG_NEW_CHERWELL_CASE = 'N' 
        THEN  IFNULL(RO_CHERWELL_OPEN_CASE_COUNT,0)+1 ELSE RO_CHERWELL_OPEN_CASE_COUNT END)
	   ,A.I_NUM_CHERWELL_CASEID_CLOSED = (CASE WHEN CHERWELL_CASE_CLOSE_DATE IS NULL THEN RO_CHERWELL_CLOSE_CASE_COUNT ELSE IFNULL(RO_CHERWELL_CLOSE_CASE_COUNT,0)+1 END) 
	   ,A.T_FIRST_CREATED_CHERWELL_CASEID = LEAST(IFNULL(A.T_FIRST_CREATED_CHERWELL_CASEID,'3000-01-01'),CHERWELL_CASE_OPEN_DATE)
	   ,A.T_LAST_CLOSE_CHERWELL_CASEID = GREATEST(IFNULL(A.T_LAST_CLOSE_CHERWELL_CASEID,'1000-01-01'),CHERWELL_CASE_CLOSE_DATE)
	   ,A.VEHICLEOFFROAD = VEHICLEOFFROAD
       ,A.N_SRCE_UPDATE = N_SRCE_SYSTEM
	   ,A.T_STMP_UPDATE = CURRENT_TIMESTAMP()
WHERE A.I_RO_JOURNEY = I_RO_JOURNEY
;

UPDATE RO_JOURNEY_OPEN A 
SET    A.I_FIRST_CHERWELL_CASEID = (CASE WHEN A.T_FIRST_CREATED_CHERWELL_CASEID IS NULL THEN I_FIRST_CHERWELL_CASEID ELSE VAR_I_FIRST_CHERWELL_CASEID END)
        ,A.I_NUM_CHERWELL_CASEID_CREATED = (CASE WHEN FLAG_NEW_CHERWELL_CASE = 'N' THEN  IFNULL(RO_CHERWELL_OPEN_CASE_COUNT,0)+1 ELSE RO_CHERWELL_OPEN_CASE_COUNT END)
	   ,A.I_NUM_CHERWELL_CASEID_CLOSED = (CASE WHEN CHERWELL_CASE_CLOSE_DATE IS NULL THEN RO_CHERWELL_CLOSE_CASE_COUNT ELSE IFNULL(RO_CHERWELL_CLOSE_CASE_COUNT,0)+1 END) 
	   ,A.T_FIRST_CREATED_CHERWELL_CASEID = LEAST(IFNULL(A.T_FIRST_CREATED_CHERWELL_CASEID,'3000-01-01'),CHERWELL_CASE_OPEN_DATE)
	   ,A.T_LAST_CLOSE_CHERWELL_CASEID = GREATEST(IFNULL(A.T_LAST_CLOSE_CHERWELL_CASEID,'1000-01-01'),CHERWELL_CASE_CLOSE_DATE)
	   ,A.VEHICLEOFFROAD = VEHICLEOFFROAD
       ,A.N_SRCE_UPDATE = N_SRCE_SYSTEM
	   ,A.T_STMP_UPDATE = CURRENT_TIMESTAMP()
WHERE A.I_RO_JOURNEY = I_RO_JOURNEY
;
        
ELSE 
	/*  CHECK IF CHERWELL CASE FALLS BETWEEN ANY
		PREVIOUS CLOSE RO FOR SAME VIN AND DEALER*/
  	
SELECT 	 A.I_RO_JOURNEY
		,A.I_FIRST_CHERWELL_CASEID
		,A.I_NUM_CHERWELL_CASEID_CREATED
		,A.I_NUM_CHERWELL_CASEID_CLOSED
	INTO  I_RO_JOURNEY
		, VAR_I_FIRST_CHERWELL_CASEID
        , RO_CHERWELL_OPEN_CASE_COUNT
		, RO_CHERWELL_CLOSE_CASE_COUNT	
		FROM RO_JOURNEY AS A
		WHERE A.I_VIN = I_VIN
		AND A.C_DLR = C_DLR
		AND DATE(CHERWELL_CASE_OPEN_DATE) BETWEEN DATE(T_START_JOURNEY) AND DATE(T_END_JOURNEY) 
        ORDER BY A.T_START_JOURNEY DESC
		LIMIT 1
		;
    IF I_RO_JOURNEY IS NOT NULL THEN
		
        SET RETURN_I_RO_JOURNEY = I_RO_JOURNEY;
        
UPDATE RO_JOURNEY A 
SET     A.I_FIRST_CHERWELL_CASEID = (CASE WHEN A.T_FIRST_CREATED_CHERWELL_CASEID IS NULL THEN I_FIRST_CHERWELL_CASEID ELSE VAR_I_FIRST_CHERWELL_CASEID END)
        ,A.I_NUM_CHERWELL_CASEID_CREATED = (CASE WHEN FLAG_NEW_CHERWELL_CASE = 'N' 
        THEN  IFNULL(RO_CHERWELL_OPEN_CASE_COUNT,0)+1 ELSE RO_CHERWELL_OPEN_CASE_COUNT END)
	   ,A.I_NUM_CHERWELL_CASEID_CLOSED = (CASE WHEN CHERWELL_CASE_CLOSE_DATE IS NULL THEN RO_CHERWELL_CLOSE_CASE_COUNT ELSE IFNULL(RO_CHERWELL_CLOSE_CASE_COUNT,0)+1 END) 
	   ,A.T_FIRST_CREATED_CHERWELL_CASEID = LEAST(IFNULL(A.T_FIRST_CREATED_CHERWELL_CASEID,'3000-01-01'),CHERWELL_CASE_OPEN_DATE)
	   ,A.T_LAST_CLOSE_CHERWELL_CASEID = GREATEST(IFNULL(A.T_LAST_CLOSE_CHERWELL_CASEID,'1000-01-01'),CHERWELL_CASE_CLOSE_DATE)
	   ,A.VEHICLEOFFROAD = VEHICLEOFFROAD
       ,A.N_SRCE_UPDATE = N_SRCE_SYSTEM
	   ,A.T_STMP_UPDATE = CURRENT_TIMESTAMP()
WHERE A.I_RO_JOURNEY = I_RO_JOURNEY
;

UPDATE RO_JOURNEY_OPEN A 
SET    A.I_FIRST_CHERWELL_CASEID = (CASE WHEN A.T_FIRST_CREATED_CHERWELL_CASEID IS NULL THEN I_FIRST_CHERWELL_CASEID ELSE VAR_I_FIRST_CHERWELL_CASEID END)
        ,A.I_NUM_CHERWELL_CASEID_CREATED = (CASE WHEN FLAG_NEW_CHERWELL_CASE = 'N' THEN  IFNULL(RO_CHERWELL_OPEN_CASE_COUNT,0)+1 ELSE RO_CHERWELL_OPEN_CASE_COUNT END)
	   ,A.I_NUM_CHERWELL_CASEID_CLOSED = (CASE WHEN CHERWELL_CASE_CLOSE_DATE IS NULL THEN RO_CHERWELL_CLOSE_CASE_COUNT ELSE IFNULL(RO_CHERWELL_CLOSE_CASE_COUNT,0)+1 END) 
	   ,A.T_FIRST_CREATED_CHERWELL_CASEID = LEAST(IFNULL(A.T_FIRST_CREATED_CHERWELL_CASEID,'3000-01-01'),CHERWELL_CASE_OPEN_DATE)
	   ,A.T_LAST_CLOSE_CHERWELL_CASEID = GREATEST(IFNULL(A.T_LAST_CLOSE_CHERWELL_CASEID,'1000-01-01'),CHERWELL_CASE_CLOSE_DATE)
	   ,A.VEHICLEOFFROAD = VEHICLEOFFROAD
       ,A.N_SRCE_UPDATE = N_SRCE_SYSTEM
	   ,A.T_STMP_UPDATE = CURRENT_TIMESTAMP()
WHERE A.I_RO_JOURNEY = I_RO_JOURNEY
;

ELSE 
	/*  CHECK IF CHERWELL CASE HAS BEEN CREATED JUST ONE DAY BEFORE THE JOURNEY START DATE
		OF ANY PREVIOUS CLOSE RO FOR SAME VIN AND DEALER*/
  	
SELECT 	 A.I_RO_JOURNEY
		,A.I_FIRST_CHERWELL_CASEID
		,A.I_NUM_CHERWELL_CASEID_CREATED
		,A.I_NUM_CHERWELL_CASEID_CLOSED
	INTO  I_RO_JOURNEY
		, VAR_I_FIRST_CHERWELL_CASEID
        , RO_CHERWELL_OPEN_CASE_COUNT
		, RO_CHERWELL_CLOSE_CASE_COUNT	
		FROM RO_JOURNEY AS A
		WHERE A.I_VIN = I_VIN
		AND A.C_DLR = C_DLR
		AND DATE(CHERWELL_CASE_OPEN_DATE) BETWEEN DATE(T_START_JOURNEY) -INTERVAL 1 DAY AND DATE(T_END_JOURNEY) 
        ORDER BY A.T_START_JOURNEY DESC
		LIMIT 1
		;
    IF I_RO_JOURNEY IS NOT NULL THEN
		
        SET RETURN_I_RO_JOURNEY = I_RO_JOURNEY;
        
UPDATE RO_JOURNEY A 
SET     A.I_FIRST_CHERWELL_CASEID = (CASE WHEN A.T_FIRST_CREATED_CHERWELL_CASEID IS NULL THEN I_FIRST_CHERWELL_CASEID ELSE VAR_I_FIRST_CHERWELL_CASEID END)
        ,A.I_NUM_CHERWELL_CASEID_CREATED = (CASE WHEN FLAG_NEW_CHERWELL_CASE = 'N' 
        THEN  IFNULL(RO_CHERWELL_OPEN_CASE_COUNT,0)+1 ELSE RO_CHERWELL_OPEN_CASE_COUNT END)
	   ,A.I_NUM_CHERWELL_CASEID_CLOSED = (CASE WHEN CHERWELL_CASE_CLOSE_DATE IS NULL THEN RO_CHERWELL_CLOSE_CASE_COUNT ELSE IFNULL(RO_CHERWELL_CLOSE_CASE_COUNT,0)+1 END) 
	   ,A.T_FIRST_CREATED_CHERWELL_CASEID = LEAST(IFNULL(A.T_FIRST_CREATED_CHERWELL_CASEID,'3000-01-01'),CHERWELL_CASE_OPEN_DATE)
	   ,A.T_LAST_CLOSE_CHERWELL_CASEID = GREATEST(IFNULL(A.T_LAST_CLOSE_CHERWELL_CASEID,'1000-01-01'),CHERWELL_CASE_CLOSE_DATE)
	   ,A.VEHICLEOFFROAD = VEHICLEOFFROAD
       ,A.N_SRCE_UPDATE = N_SRCE_SYSTEM
	   ,A.T_STMP_UPDATE = CURRENT_TIMESTAMP()
WHERE A.I_RO_JOURNEY = I_RO_JOURNEY
;

UPDATE RO_JOURNEY_OPEN A 
SET    A.I_FIRST_CHERWELL_CASEID = (CASE WHEN A.T_FIRST_CREATED_CHERWELL_CASEID IS NULL THEN I_FIRST_CHERWELL_CASEID ELSE VAR_I_FIRST_CHERWELL_CASEID END)
        ,A.I_NUM_CHERWELL_CASEID_CREATED = (CASE WHEN FLAG_NEW_CHERWELL_CASE = 'N' THEN  IFNULL(RO_CHERWELL_OPEN_CASE_COUNT,0)+1 ELSE RO_CHERWELL_OPEN_CASE_COUNT END)
	   ,A.I_NUM_CHERWELL_CASEID_CLOSED = (CASE WHEN CHERWELL_CASE_CLOSE_DATE IS NULL THEN RO_CHERWELL_CLOSE_CASE_COUNT ELSE IFNULL(RO_CHERWELL_CLOSE_CASE_COUNT,0)+1 END) 
	   ,A.T_FIRST_CREATED_CHERWELL_CASEID = LEAST(IFNULL(A.T_FIRST_CREATED_CHERWELL_CASEID,'3000-01-01'),CHERWELL_CASE_OPEN_DATE)
	   ,A.T_LAST_CLOSE_CHERWELL_CASEID = GREATEST(IFNULL(A.T_LAST_CLOSE_CHERWELL_CASEID,'1000-01-01'),CHERWELL_CASE_CLOSE_DATE)
	   ,A.VEHICLEOFFROAD = VEHICLEOFFROAD
       ,A.N_SRCE_UPDATE = N_SRCE_SYSTEM
	   ,A.T_STMP_UPDATE = CURRENT_TIMESTAMP()
WHERE A.I_RO_JOURNEY = I_RO_JOURNEY
;


	ELSE

SELECT 	 A.I_RO_JOURNEY
		,A.I_FIRST_CHERWELL_CASEID
		,A.I_NUM_CHERWELL_CASEID_CREATED
		,A.I_NUM_CHERWELL_CASEID_CLOSED
	INTO  I_RO_JOURNEY
		, VAR_I_FIRST_CHERWELL_CASEID
        , RO_CHERWELL_OPEN_CASE_COUNT
		, RO_CHERWELL_CLOSE_CASE_COUNT	
		FROM RO_JOURNEY AS A
		WHERE A.I_VIN = I_VIN
		AND A.C_DLR = C_DLR
		AND T_END_JOURNEY IS NULL
		#AND T_START_JOURNEY <= CHERWELL_CASE_OPEN_DATE  
		AND DATE(T_START_JOURNEY) -INTERVAL 1 DAY <=  DATE(CHERWELL_CASE_OPEN_DATE)
        ORDER BY A.T_START_JOURNEY DESC
		LIMIT 1
		;
                    
    IF I_RO_JOURNEY IS NOT NULL THEN
		
        SET RETURN_I_RO_JOURNEY = I_RO_JOURNEY;
        
UPDATE RO_JOURNEY A 
SET     A.I_FIRST_CHERWELL_CASEID = (CASE WHEN A.T_FIRST_CREATED_CHERWELL_CASEID IS NULL THEN I_FIRST_CHERWELL_CASEID ELSE VAR_I_FIRST_CHERWELL_CASEID END)
        ,A.I_NUM_CHERWELL_CASEID_CREATED = (CASE WHEN FLAG_NEW_CHERWELL_CASE = 'N' 
        THEN  IFNULL(RO_CHERWELL_OPEN_CASE_COUNT,0)+1 ELSE RO_CHERWELL_OPEN_CASE_COUNT END)
	   ,A.I_NUM_CHERWELL_CASEID_CLOSED = (CASE WHEN CHERWELL_CASE_CLOSE_DATE IS NULL THEN RO_CHERWELL_CLOSE_CASE_COUNT ELSE IFNULL(RO_CHERWELL_CLOSE_CASE_COUNT,0)+1 END) 
	   ,A.T_FIRST_CREATED_CHERWELL_CASEID = LEAST(IFNULL(A.T_FIRST_CREATED_CHERWELL_CASEID,'3000-01-01'),CHERWELL_CASE_OPEN_DATE)
	   ,A.T_LAST_CLOSE_CHERWELL_CASEID = GREATEST(IFNULL(A.T_LAST_CLOSE_CHERWELL_CASEID,'1000-01-01'),CHERWELL_CASE_CLOSE_DATE)
	   ,A.VEHICLEOFFROAD = VEHICLEOFFROAD
       ,A.N_SRCE_UPDATE = N_SRCE_SYSTEM
	   ,A.T_STMP_UPDATE = CURRENT_TIMESTAMP()
WHERE A.I_RO_JOURNEY = I_RO_JOURNEY
;

UPDATE RO_JOURNEY_OPEN A 
SET    A.I_FIRST_CHERWELL_CASEID = (CASE WHEN A.T_FIRST_CREATED_CHERWELL_CASEID IS NULL THEN I_FIRST_CHERWELL_CASEID ELSE VAR_I_FIRST_CHERWELL_CASEID END)
        ,A.I_NUM_CHERWELL_CASEID_CREATED = (CASE WHEN FLAG_NEW_CHERWELL_CASE = 'N' THEN  IFNULL(RO_CHERWELL_OPEN_CASE_COUNT,0)+1 ELSE RO_CHERWELL_OPEN_CASE_COUNT END)
	   ,A.I_NUM_CHERWELL_CASEID_CLOSED = (CASE WHEN CHERWELL_CASE_CLOSE_DATE IS NULL THEN RO_CHERWELL_CLOSE_CASE_COUNT ELSE IFNULL(RO_CHERWELL_CLOSE_CASE_COUNT,0)+1 END) 
	   ,A.T_FIRST_CREATED_CHERWELL_CASEID = LEAST(IFNULL(A.T_FIRST_CREATED_CHERWELL_CASEID,'3000-01-01'),CHERWELL_CASE_OPEN_DATE)
	   ,A.T_LAST_CLOSE_CHERWELL_CASEID = GREATEST(IFNULL(A.T_LAST_CLOSE_CHERWELL_CASEID,'1000-01-01'),CHERWELL_CASE_CLOSE_DATE)
	   ,A.VEHICLEOFFROAD = VEHICLEOFFROAD
       ,A.N_SRCE_UPDATE = N_SRCE_SYSTEM
	   ,A.T_STMP_UPDATE = CURRENT_TIMESTAMP()
WHERE A.I_RO_JOURNEY = I_RO_JOURNEY
;
   ELSE
	 SET RETURN_I_RO_JOURNEY = NULL;
   END IF;
 END IF; 
END IF;
END IF;

COMMIT WORK;
#SET VAR_I_RO_JOURNEY = RETURN_I_RO_JOURNEY;
SELECT RETURN_I_RO_JOURNEY;
END
=================
CREATE DEFINER=`t12247adm`@`%` PROCEDURE `db_12247_d_001_instance_1`.`PROC_RO_JOURNEY_CHERWELL_MIGRATION_ONE_TIME`(
	IN `I_VIN` VARCHAR(20),
	IN `C_DLR` VARCHAR(20),
	IN `Q_ODOMETER` FLOAT,
    IN `I_FIRST_CHERWELL_CASEID` VARCHAR(20),
	IN `I_RO` VARCHAR(20),
	IN `VEHICLEOFFROAD` VARCHAR(15),
	IN `CHERWELL_CASE_OPEN_DATE` TIMESTAMP,
	IN `CHERWELL_CASE_CLOSE_DATE` TIMESTAMP,
	IN `FLAG_NEW_CHERWELL_CASE` CHAR(1),
	IN `N_SRCE_SYSTEM` VARCHAR(30),
	IN `I_MOD_YR` INT,
	IN `C_FAM` varchar(50),
	IN `C_ENG` varchar(30),
	IN `C_TRANSM` varchar(50),
	IN `D_LAST_SERVICE_PREV_RO` date,
    OUT `VAR_I_RO_JOURNEY` BIGINT
)
    SQL SECURITY INVOKER
BEGIN

DECLARE RETURN_I_RO_JOURNEY BIGINT;

DECLARE I_RO_JOURNEY BIGINT;

DECLARE VAR_I_FIRST_CHERWELL_CASEID VARCHAR(20);
DECLARE RO_CHERWELL_OPEN_CASE_COUNT INT;
DECLARE RO_CHERWELL_CLOSE_CASE_COUNT INT;

DECLARE EXIT HANDLER FOR SQLEXCEPTION
BEGIN
SHOW ERRORS;
ROLLBACK;
END;

START TRANSACTION;

IF CHERWELL_CASE_CLOSE_DATE < '2016-01-01' THEN
SET CHERWELL_CASE_CLOSE_DATE = NULL;
END IF;


/* CHECK IF THERE RO JOURNEY IS PRESENT FOR SAME I_R0 */
SELECT 	 A.I_RO_JOURNEY
		,A.I_FIRST_CHERWELL_CASEID
		,A.I_NUM_CHERWELL_CASEID_CREATED
		,A.I_NUM_CHERWELL_CASEID_CLOSED
	INTO  I_RO_JOURNEY
		, VAR_I_FIRST_CHERWELL_CASEID
        , RO_CHERWELL_OPEN_CASE_COUNT
		, RO_CHERWELL_CLOSE_CASE_COUNT	
	FROM RO_JOURNEY AS A
	WHERE A.I_VIN = I_VIN
	AND A.C_DLR = C_DLR
    AND A.I_RO 	= I_RO 		
#	AND (A.T_END_JOURNEY IS NULL AND A.T_FORCE_CLOSE_RO IS NULL) 
	ORDER BY A.T_START_JOURNEY DESC
	LIMIT 1
	;

IF I_RO_JOURNEY IS NOT NULL THEN
	SET RETURN_I_RO_JOURNEY = I_RO_JOURNEY;
		
   	       #  SELECT RETURN_I_RO_JOURNEY;
           #  SELECT I_RO;    
UPDATE RO_JOURNEY A 
SET     A.I_FIRST_CHERWELL_CASEID = (CASE WHEN A.T_FIRST_CREATED_CHERWELL_CASEID IS NULL THEN I_FIRST_CHERWELL_CASEID ELSE VAR_I_FIRST_CHERWELL_CASEID END)
        ,A.I_NUM_CHERWELL_CASEID_CREATED = (CASE WHEN FLAG_NEW_CHERWELL_CASE = 'N' 
        THEN  IFNULL(RO_CHERWELL_OPEN_CASE_COUNT,0)+1 ELSE RO_CHERWELL_OPEN_CASE_COUNT END)
	   ,A.I_NUM_CHERWELL_CASEID_CLOSED = (CASE WHEN CHERWELL_CASE_CLOSE_DATE IS NULL THEN RO_CHERWELL_CLOSE_CASE_COUNT ELSE IFNULL(RO_CHERWELL_CLOSE_CASE_COUNT,0)+1 END) 
	   ,A.T_FIRST_CREATED_CHERWELL_CASEID = LEAST(IFNULL(A.T_FIRST_CREATED_CHERWELL_CASEID,'3000-01-01'),CHERWELL_CASE_OPEN_DATE)
	   ,A.T_LAST_CLOSE_CHERWELL_CASEID = GREATEST(IFNULL(A.T_LAST_CLOSE_CHERWELL_CASEID,'1000-01-01'),CHERWELL_CASE_CLOSE_DATE)
	   ,A.N_SRCE_UPDATE = N_SRCE_SYSTEM
	   ,A.T_STMP_UPDATE = CURRENT_TIMESTAMP()
WHERE A.I_RO_JOURNEY = I_RO_JOURNEY
;

UPDATE RO_JOURNEY_OPEN A 
SET    A.I_FIRST_CHERWELL_CASEID = (CASE WHEN A.T_FIRST_CREATED_CHERWELL_CASEID IS NULL THEN I_FIRST_CHERWELL_CASEID ELSE VAR_I_FIRST_CHERWELL_CASEID END)
        ,A.I_NUM_CHERWELL_CASEID_CREATED = (CASE WHEN FLAG_NEW_CHERWELL_CASE = 'N' THEN  IFNULL(RO_CHERWELL_OPEN_CASE_COUNT,0)+1 ELSE RO_CHERWELL_OPEN_CASE_COUNT END)
	   ,A.I_NUM_CHERWELL_CASEID_CLOSED = (CASE WHEN CHERWELL_CASE_CLOSE_DATE IS NULL THEN RO_CHERWELL_CLOSE_CASE_COUNT ELSE IFNULL(RO_CHERWELL_CLOSE_CASE_COUNT,0)+1 END) 
	   ,A.T_FIRST_CREATED_CHERWELL_CASEID = LEAST(IFNULL(A.T_FIRST_CREATED_CHERWELL_CASEID,'3000-01-01'),CHERWELL_CASE_OPEN_DATE)
	   ,A.T_LAST_CLOSE_CHERWELL_CASEID = GREATEST(IFNULL(A.T_LAST_CLOSE_CHERWELL_CASEID,'1000-01-01'),CHERWELL_CASE_CLOSE_DATE)
	   ,A.N_SRCE_UPDATE = N_SRCE_SYSTEM
	   ,A.T_STMP_UPDATE = CURRENT_TIMESTAMP()
WHERE A.I_RO_JOURNEY = I_RO_JOURNEY
;
        
ELSE
	/*  CHECK IF CHERWELL CASE FALLS BETWEEN ANY
		PREVIOUS CLOSE RO FOR SAME VIN AND DEALER*/
  	
SELECT 	 A.I_RO_JOURNEY
		,A.I_FIRST_CHERWELL_CASEID
		,A.I_NUM_CHERWELL_CASEID_CREATED
		,A.I_NUM_CHERWELL_CASEID_CLOSED
	INTO  I_RO_JOURNEY
		, VAR_I_FIRST_CHERWELL_CASEID
        , RO_CHERWELL_OPEN_CASE_COUNT
		, RO_CHERWELL_CLOSE_CASE_COUNT	
		FROM RO_JOURNEY AS A
		WHERE A.I_VIN = I_VIN
		AND A.C_DLR = C_DLR
		AND(
		(T_START_JOURNEY <=  CHERWELL_CASE_OPEN_DATE  
		AND T_END_JOURNEY >= CHERWELL_CASE_OPEN_DATE))
		ORDER BY A.T_START_JOURNEY DESC
		LIMIT 1
		;
    IF I_RO_JOURNEY IS NOT NULL THEN
		
        SET RETURN_I_RO_JOURNEY = I_RO_JOURNEY;
        
UPDATE RO_JOURNEY A 
SET     A.I_FIRST_CHERWELL_CASEID = (CASE WHEN A.T_FIRST_CREATED_CHERWELL_CASEID IS NULL THEN I_FIRST_CHERWELL_CASEID ELSE VAR_I_FIRST_CHERWELL_CASEID END)
        ,A.I_NUM_CHERWELL_CASEID_CREATED = (CASE WHEN FLAG_NEW_CHERWELL_CASE = 'N' 
        THEN  IFNULL(RO_CHERWELL_OPEN_CASE_COUNT,0)+1 ELSE RO_CHERWELL_OPEN_CASE_COUNT END)
	   ,A.I_NUM_CHERWELL_CASEID_CLOSED = (CASE WHEN CHERWELL_CASE_CLOSE_DATE IS NULL THEN RO_CHERWELL_CLOSE_CASE_COUNT ELSE IFNULL(RO_CHERWELL_CLOSE_CASE_COUNT,0)+1 END) 
	   ,A.T_FIRST_CREATED_CHERWELL_CASEID = LEAST(IFNULL(A.T_FIRST_CREATED_CHERWELL_CASEID,'3000-01-01'),CHERWELL_CASE_OPEN_DATE)
	   ,A.T_LAST_CLOSE_CHERWELL_CASEID = GREATEST(IFNULL(A.T_LAST_CLOSE_CHERWELL_CASEID,'1000-01-01'),CHERWELL_CASE_CLOSE_DATE)
	   ,A.N_SRCE_UPDATE = N_SRCE_SYSTEM
	   ,A.T_STMP_UPDATE = CURRENT_TIMESTAMP()
WHERE A.I_RO_JOURNEY = I_RO_JOURNEY
;

UPDATE RO_JOURNEY_OPEN A 
SET    A.I_FIRST_CHERWELL_CASEID = (CASE WHEN A.T_FIRST_CREATED_CHERWELL_CASEID IS NULL THEN I_FIRST_CHERWELL_CASEID ELSE VAR_I_FIRST_CHERWELL_CASEID END)
        ,A.I_NUM_CHERWELL_CASEID_CREATED = (CASE WHEN FLAG_NEW_CHERWELL_CASE = 'N' THEN  IFNULL(RO_CHERWELL_OPEN_CASE_COUNT,0)+1 ELSE RO_CHERWELL_OPEN_CASE_COUNT END)
	   ,A.I_NUM_CHERWELL_CASEID_CLOSED = (CASE WHEN CHERWELL_CASE_CLOSE_DATE IS NULL THEN RO_CHERWELL_CLOSE_CASE_COUNT ELSE IFNULL(RO_CHERWELL_CLOSE_CASE_COUNT,0)+1 END) 
	   ,A.T_FIRST_CREATED_CHERWELL_CASEID = LEAST(IFNULL(A.T_FIRST_CREATED_CHERWELL_CASEID,'3000-01-01'),CHERWELL_CASE_OPEN_DATE)
	   ,A.T_LAST_CLOSE_CHERWELL_CASEID = GREATEST(IFNULL(A.T_LAST_CLOSE_CHERWELL_CASEID,'1000-01-01'),CHERWELL_CASE_CLOSE_DATE)
	   ,A.N_SRCE_UPDATE = N_SRCE_SYSTEM
	   ,A.T_STMP_UPDATE = CURRENT_TIMESTAMP()
WHERE A.I_RO_JOURNEY = I_RO_JOURNEY
;

	ELSE
SELECT 	 A.I_RO_JOURNEY
		,A.I_FIRST_CHERWELL_CASEID
		,A.I_NUM_CHERWELL_CASEID_CREATED
		,A.I_NUM_CHERWELL_CASEID_CLOSED
	INTO  I_RO_JOURNEY
		, VAR_I_FIRST_CHERWELL_CASEID
        , RO_CHERWELL_OPEN_CASE_COUNT
		, RO_CHERWELL_CLOSE_CASE_COUNT	
		FROM RO_JOURNEY AS A
		WHERE A.I_VIN = I_VIN
		AND A.C_DLR = C_DLR
		AND T_END_JOURNEY IS NULL
		AND T_START_JOURNEY <= CHERWELL_CASE_OPEN_DATE  
		ORDER BY A.T_START_JOURNEY DESC
		LIMIT 1
		;
                    
    IF I_RO_JOURNEY IS NOT NULL THEN
		
        SET RETURN_I_RO_JOURNEY = I_RO_JOURNEY;
        
UPDATE RO_JOURNEY A 
SET     A.I_FIRST_CHERWELL_CASEID = (CASE WHEN A.T_FIRST_CREATED_CHERWELL_CASEID IS NULL THEN I_FIRST_CHERWELL_CASEID ELSE VAR_I_FIRST_CHERWELL_CASEID END)
        ,A.I_NUM_CHERWELL_CASEID_CREATED = (CASE WHEN FLAG_NEW_CHERWELL_CASE = 'N' 
        THEN  IFNULL(RO_CHERWELL_OPEN_CASE_COUNT,0)+1 ELSE RO_CHERWELL_OPEN_CASE_COUNT END)
	   ,A.I_NUM_CHERWELL_CASEID_CLOSED = (CASE WHEN CHERWELL_CASE_CLOSE_DATE IS NULL THEN RO_CHERWELL_CLOSE_CASE_COUNT ELSE IFNULL(RO_CHERWELL_CLOSE_CASE_COUNT,0)+1 END) 
	   ,A.T_FIRST_CREATED_CHERWELL_CASEID = LEAST(IFNULL(A.T_FIRST_CREATED_CHERWELL_CASEID,'3000-01-01'),CHERWELL_CASE_OPEN_DATE)
	   ,A.T_LAST_CLOSE_CHERWELL_CASEID = GREATEST(IFNULL(A.T_LAST_CLOSE_CHERWELL_CASEID,'1000-01-01'),CHERWELL_CASE_CLOSE_DATE)
	   ,A.N_SRCE_UPDATE = N_SRCE_SYSTEM
	   ,A.T_STMP_UPDATE = CURRENT_TIMESTAMP()
WHERE A.I_RO_JOURNEY = I_RO_JOURNEY
;

UPDATE RO_JOURNEY_OPEN A 
SET    A.I_FIRST_CHERWELL_CASEID = (CASE WHEN A.T_FIRST_CREATED_CHERWELL_CASEID IS NULL THEN I_FIRST_CHERWELL_CASEID ELSE VAR_I_FIRST_CHERWELL_CASEID END)
        ,A.I_NUM_CHERWELL_CASEID_CREATED = (CASE WHEN FLAG_NEW_CHERWELL_CASE = 'N' THEN  IFNULL(RO_CHERWELL_OPEN_CASE_COUNT,0)+1 ELSE RO_CHERWELL_OPEN_CASE_COUNT END)
	   ,A.I_NUM_CHERWELL_CASEID_CLOSED = (CASE WHEN CHERWELL_CASE_CLOSE_DATE IS NULL THEN RO_CHERWELL_CLOSE_CASE_COUNT ELSE IFNULL(RO_CHERWELL_CLOSE_CASE_COUNT,0)+1 END) 
	   ,A.T_FIRST_CREATED_CHERWELL_CASEID = LEAST(IFNULL(A.T_FIRST_CREATED_CHERWELL_CASEID,'3000-01-01'),CHERWELL_CASE_OPEN_DATE)
	   ,A.T_LAST_CLOSE_CHERWELL_CASEID = GREATEST(IFNULL(A.T_LAST_CLOSE_CHERWELL_CASEID,'1000-01-01'),CHERWELL_CASE_CLOSE_DATE)
	   ,A.N_SRCE_UPDATE = N_SRCE_SYSTEM
	   ,A.T_STMP_UPDATE = CURRENT_TIMESTAMP()
WHERE A.I_RO_JOURNEY = I_RO_JOURNEY
;
   ELSE
	 SET RETURN_I_RO_JOURNEY = NULL;
   END IF;
 END IF; 
END IF;
COMMIT WORK;
SET VAR_I_RO_JOURNEY = RETURN_I_RO_JOURNEY;
#SELECT RETURN_I_RO_JOURNEY;
END
=====================
CREATE DEFINER=`t12247adm`@`%` PROCEDURE `db_12247_d_001_instance_1`.`PROC_RO_JOURNEY_QNA`(
    IN `I_VIN` VARCHAR(20),
	IN `C_DLR` VARCHAR(20),
	IN `Q_ODOMETER` FLOAT,
	IN `RO_OPEN_DATE` DATE,
	IN `RO_CLOSE_DATE` DATE,
	IN `I_RO` VARCHAR(20),
	IN `N_SRCE_SYSTEM` VARCHAR(30),
	IN `I_MOD_YR` INT,
	IN `C_FAM` varchar(50),
	IN `C_ENG` varchar(30),
    IN `C_FUEL_TYPE` VARCHAR(30),
	IN `C_TRANSM` varchar(50),
	IN `D_LAST_SERVICE_PREV_RO` date,
    OUT `VAR_I_RO_JOURNEY` BIGINT
)
    SQL SECURITY INVOKER
BEGIN

DECLARE CHK_OPEN_PREVIOUS_RO INT;
DECLARE RETURN_I_RO_JOURNEY BIGINT;
DECLARE MAX_I_RO_JOURNEY BIGINT;

DECLARE OPEN_PREVIOUS_I_RO_JOURNEY BIGINT;
DECLARE OPEN_PREVIOUS_RO_C_DLR VARCHAR(30);


DECLARE L_FORCE_CLOSE VARCHAR(1);
DECLARE wiTECH_FORCE_CLOSE_I_RO_JOURNEY BIGINT;
DECLARE OPEN_PREVIOUS_I_RO BIGINT;
DECLARE OPEN_PREVIOUS_RO_ODOMETER FLOAT;
DECLARE OPEN_PREVIOUS_RO_ODOMETER_LAST FLOAT;
DECLARE OPEN_PREVIOUS_RO_QNA BIGINT;
DECLARE CHK_OPEN_PREVIOUS_RO_QNA BIGINT;
DECLARE CHK_CLOSE_PREVIOUS_RO INT;
DECLARE CLOSE_PREVIOUS_RO BIGINT;
DECLARE CLOSE_PREVIOUS_RO_SRCE_ADD VARCHAR(50);
DECLARE CLOSE_PREVIOUS_RO_SRCE_UPDATE VARCHAR(50);
DECLARE OPEN_PREVIOUS_RO_wiTECH_SCAN_LATEST TIMESTAMP;
DECLARE T_FORCE_CLOSE_RO TIMESTAMP;

DECLARE EXIT HANDLER FOR SQLEXCEPTION
BEGIN
SHOW ERRORS;
ROLLBACK;
END;

START TRANSACTION;


IF (RO_CLOSE_DATE = '0001-01-01' OR RO_CLOSE_DATE = '0000-00-00')  THEN 
SET RO_CLOSE_DATE = NULL;
END IF;

IF (RO_OPEN_DATE = '0001-01-01' OR RO_OPEN_DATE = '0000-00-00')  THEN 
SET RO_OPEN_DATE = NULL;
END IF;

/* STEPS TO UPDATE THE RO JOURNEY FOR WITECH/WIADVISOR RO*/

SELECT A.I_RO_JOURNEY
	  ,A.T_FORCE_CLOSE_RO INTO wiTECH_FORCE_CLOSE_I_RO_JOURNEY,T_FORCE_CLOSE_RO 
FROM RO_JOURNEY A
WHERE
	A.I_VIN 			=	I_VIN 				
AND A.C_DLR 			=	C_DLR
AND( UPPER(A.N_SRCE_UPDATE) IN ('WITECH','WIADVISOR') 
	OR UPPER(A.N_SRCE_ADD) IN ('WITECH','WIADVISOR'))  	
#AND DATE(A.T_FORCE_CLOSE_RO) IS NOT NULL
AND A.L_FORCE_CLOSE = 'Y' 
AND A.I_RO IS NULL
#AND DATE(A.T_END_JOURNEY) IS NOT NULL
AND DATE(A.T_START_JOURNEY) >= RO_OPEN_DATE
ORDER BY A.T_START_JOURNEY ASC 
LIMIT 1;

/* IF THERE IS A FORCE CLOSE RO PRESENT FOR SAME VIN AND DEALER FROM WIADVISOR/WITECH*/
IF wiTECH_FORCE_CLOSE_I_RO_JOURNEY IS NOT NULL THEN
	  SET RETURN_I_RO_JOURNEY = wiTECH_FORCE_CLOSE_I_RO_JOURNEY;
      #IF THE CORRESSPONDING QNA RECORD HAS VALID END DATE FOR SAME VIN AND DEALER
	  #THEN UPDATE THE FORCE CLOSE FLAG TO NULL AND POPULATE THE END JOURNEY DATE 
      #FROM QNA FEED
    IF RO_CLOSE_DATE IS NOT NULL THEN
    	UPDATE RO_JOURNEY A 
		SET  A.T_START_JOURNEY = LEAST(A.T_START_JOURNEY,RO_OPEN_DATE)
			,A.L_FORCE_CLOSE = NULL
			,A.T_END_JOURNEY = RO_CLOSE_DATE
			,A.I_RO = I_RO
		    ,A.Q_ODOMETER_LAST = Q_ODOMETER
			,A.N_SRCE_UPDATE  = N_SRCE_SYSTEM
			,A.T_STMP_UPDATE= CURRENT_TIMESTAMP()
		WHERE A.I_RO_JOURNEY = wiTECH_FORCE_CLOSE_I_RO_JOURNEY
		;
		DELETE FROM RO_JOURNEY_OPEN WHERE I_RO_JOURNEY = wiTECH_FORCE_CLOSE_I_RO_JOURNEY;
    ELSE 
		#IF THE CORRESSPONDING QNA RECORD DOES NOT HAVE VALID END DATE FOR SAME VIN AND DEALER
		#THEN UPDATE ONLY RO NUMBER AND START JOURNEY FROM QNA FEED
			UPDATE RO_JOURNEY A 
			SET  A.T_START_JOURNEY = LEAST(A.T_START_JOURNEY,RO_OPEN_DATE)
				,A.I_RO = I_RO
			    ,A.Q_ODOMETER_LAST = Q_ODOMETER
				,A.N_SRCE_UPDATE  = N_SRCE_SYSTEM
				,A.T_STMP_UPDATE= CURRENT_TIMESTAMP()
			WHERE A.I_RO_JOURNEY = wiTECH_FORCE_CLOSE_I_RO_JOURNEY
			;
	END IF;
COMMIT;
END IF;
#CHECK IF THERE IS PREVIOUS CLOSE RO PRESENT FOR SAME I_R0 FOR SAME VIN AND DEALER
	SELECT 
		  A.I_RO_JOURNEY 
		 ,A.L_FORCE_CLOSE
		 ,A.N_SRCE_ADD
		 ,A.N_SRCE_UPDATE 
	INTO CLOSE_PREVIOUS_RO
		,L_FORCE_CLOSE
		,CLOSE_PREVIOUS_RO_SRCE_ADD	
		,CLOSE_PREVIOUS_RO_SRCE_UPDATE
	FROM RO_JOURNEY A
	WHERE
		A.I_VIN 			=	I_VIN 				
	AND A.C_DLR 			=	C_DLR 		
	AND (A.T_END_JOURNEY) IS NOT NULL 
	#OR DATE(A.T_FORCE_CLOSE_RO) IS NOT NULL) 
	AND A.I_RO 	=	I_RO 		
	ORDER BY A.T_START_JOURNEY DESC
	LIMIT 1;
#CLOSE PREVIOUS RO JOURNEY IS PRESENT FOR SAME VIN AND DEALER CODE
IF CLOSE_PREVIOUS_RO IS NOT NULL THEN
SET RETURN_I_RO_JOURNEY = CLOSE_PREVIOUS_RO;
DELETE FROM RO_JOURNEY_OPEN WHERE I_RO_JOURNEY = CLOSE_PREVIOUS_RO;
	#IF THE PREVIOUS RO HAS BEEN FORCE CLOSED AND NOW THE QNA/SM FEED HAS ACTUAL CLOSE DATE
    #FOR SAME RO FOR SAME VIN AND DEALER CODE THEN UPDATED THE FORCE CLOSE DATE WITH ACTUAL CLOSE DATE
    IF L_FORCE_CLOSE = 'Y' AND RO_CLOSE_DATE IS NOT NULL THEN
		UPDATE RO_JOURNEY A 
			SET  A.T_START_JOURNEY = LEAST(A.T_START_JOURNEY,RO_OPEN_DATE)
			#	,A.I_RO = I_RO
                ,A.T_END_JOURNEY = RO_CLOSE_DATE
				,A.L_FORCE_CLOSE = NULL 
				,A.Q_ODOMETER_LAST = Q_ODOMETER
				,A.N_SRCE_UPDATE  = N_SRCE_SYSTEM
				,A.T_STMP_UPDATE= CURRENT_TIMESTAMP()
			WHERE A.I_RO_JOURNEY = CLOSE_PREVIOUS_RO
			;	
    END IF;
    #IF CLOSE RO JOURNEY IS PRESENT THROUGH SERVICE AND MARKETING AND IF THERE IS CLOSE DATE
    #COMMING FROM QNA FEED THEN QNA SOURCE IS MORE RELAIBLE THAN SM, AND THE END JOURNEY
    #HAS TO BE UPDATED FROM QNA FEED 
	IF (UPPER(CLOSE_PREVIOUS_RO_SRCE_ADD) = 'SM' OR UPPER(CLOSE_PREVIOUS_RO_SRCE_UPDATE) = 'SM')
		AND RO_CLOSE_DATE IS NOT NULL THEN
			UPDATE RO_JOURNEY A 
			SET  A.T_START_JOURNEY = LEAST(A.T_START_JOURNEY,RO_OPEN_DATE)
			#	,A.I_RO = I_RO
                ,A.T_END_JOURNEY = RO_CLOSE_DATE
				,A.L_FORCE_CLOSE = NULL 
				,A.Q_ODOMETER_LAST = Q_ODOMETER
				,A.N_SRCE_UPDATE  = N_SRCE_SYSTEM
				,A.T_STMP_UPDATE= CURRENT_TIMESTAMP()
			WHERE A.I_RO_JOURNEY = CLOSE_PREVIOUS_RO
			;
    #	DELETE FROM RO_JOURNEY_OPEN WHERE I_RO_JOURNEY = CLOSE_PREVIOUS_RO;
    END IF;
ELSE
	#CHECK IF THERE IS OPEN PREVIOUS RO PRESENT T_END_JOURNEY IS NULL FOR SAME VIN AND DEALER CODE
	SELECT 		A.I_RO_JOURNEY
			   ,A.Q_ODOMETER
               ,A.Q_ODOMETER_LAST 
			INTO  OPEN_PREVIOUS_I_RO_JOURNEY
				, OPEN_PREVIOUS_RO_ODOMETER
                , OPEN_PREVIOUS_RO_ODOMETER_LAST	
			FROM RO_JOURNEY AS A
			WHERE A.I_VIN = I_VIN
			AND A.C_DLR = C_DLR
			AND A.I_RO = I_RO
			AND (A.T_END_JOURNEY IS NULL) 
			ORDER BY A.T_START_JOURNEY DESC
			LIMIT 1
			;
    #IF THERE IS OPEN RO JOURNEY IS PRESENT FOR SAME RO , FOR SAME VIN AND DEALER
	IF OPEN_PREVIOUS_I_RO_JOURNEY IS NOT NULL THEN
    	SET RETURN_I_RO_JOURNEY = OPEN_PREVIOUS_I_RO_JOURNEY;
	
    IF RO_CLOSE_DATE IS NOT NULL THEN
		UPDATE RO_JOURNEY A 
		SET  A.T_START_JOURNEY = LEAST(A.T_START_JOURNEY,RO_OPEN_DATE)
		#	,A.I_RO = I_RO
            ,A.T_END_JOURNEY = RO_CLOSE_DATE
			,A.Q_ODOMETER_LAST = Q_ODOMETER
			,A.N_SRCE_UPDATE  = N_SRCE_SYSTEM
			,A.T_STMP_UPDATE= CURRENT_TIMESTAMP()
		WHERE A.I_RO_JOURNEY = OPEN_PREVIOUS_I_RO_JOURNEY
		;
        DELETE FROM RO_JOURNEY_OPEN WHERE I_RO_JOURNEY = OPEN_PREVIOUS_I_RO_JOURNEY;
    END IF;    
        /*
        UPDATE RO_JOURNEY_OPEN A 
		SET  A.T_START_JOURNEY = LEAST(A.T_START_JOURNEY,RO_OPEN_DATE)
			,A.I_RO = I_RO
            ,A.T_END_JOURNEY = RO_CLOSE_DATE
			,A.Q_ODOMETER_LAST = Q_ODOMETER
			,A.N_SRCE_UPDATE  = N_SRCE_SYSTEM
			,A.T_STMP_UPDATE= CURRENT_TIMESTAMP()
		WHERE A.I_RO_JOURNEY = OPEN_PREVIOUS_I_RO_JOURNEY
		;
        */
	ELSE
		# CHECK IF THERE IS ANY PREVIOUS OPEN RO FOR SAME VIN AND DEALER
			SELECT  A.I_RO_JOURNEY
				   ,A.C_DLR
				   ,A.Q_ODOMETER
                   ,A.Q_ODOMETER_LAST
				   ,A.I_RO
                   ,A.T_WITECH_SCAN_LATEST 
				INTO OPEN_PREVIOUS_I_RO
					,OPEN_PREVIOUS_RO_C_DLR
					,OPEN_PREVIOUS_RO_ODOMETER
                    ,OPEN_PREVIOUS_RO_ODOMETER_LAST
					,OPEN_PREVIOUS_RO_QNA
                    ,OPEN_PREVIOUS_RO_wiTECH_SCAN_LATEST	
				FROM RO_JOURNEY AS A
				WHERE A.I_VIN = I_VIN
			#	AND A.C_DLR = C_DLR
				AND A.T_END_JOURNEY IS NULL 
				ORDER BY A.T_START_JOURNEY DESC
				LIMIT 1
				;

		IF OPEN_PREVIOUS_I_RO IS NULL THEN
			# INSERT THE RECORD AS NEW RO;
			INSERT INTO RO_JOURNEY
						(
					#	I_RO_JOURNEY ,
						I_VIN ,
						C_DLR ,
						Q_ODOMETER ,
						Q_ODOMETER_LAST ,
						I_RO,
						T_START_JOURNEY,
						T_END_JOURNEY,
						I_MOD_YR,
                        C_FAM, 						
						C_ENGINE_SALES_CODE,
 						C_FUEL_TYPE,
						C_TRANSM, 				
						D_LAST_SERVICE_PREV_RO,
						N_SRCE_ADD, 
						T_STMP_ADD
						)
						VALUES
						(
					#	MAX_I_RO_JOURNEY ,
						I_VIN ,
						C_DLR ,
						Q_ODOMETER ,
						Q_ODOMETER ,
						I_RO,
						RO_OPEN_DATE,
						RO_CLOSE_DATE,
                        I_MOD_YR,
                        C_FAM, 						
						C_ENG, 		
                        C_FUEL_TYPE,
						C_TRANSM, 				
						D_LAST_SERVICE_PREV_RO,
						N_SRCE_SYSTEM,
						CURRENT_TIMESTAMP()
						);
			SELECT LAST_INSERT_ID() INTO RETURN_I_RO_JOURNEY ;
            IF 	RO_CLOSE_DATE IS NULL THEN
              INSERT INTO RO_JOURNEY_OPEN
						(
						I_RO_JOURNEY ,
						I_VIN ,
						C_DLR ,
						Q_ODOMETER ,
						Q_ODOMETER_LAST ,
						I_RO,
						T_START_JOURNEY,
						T_END_JOURNEY,
						I_MOD_YR,
                        C_FAM, 						
						C_ENGINE_SALES_CODE,
 						C_FUEL_TYPE,
						C_TRANSM, 				
						D_LAST_SERVICE_PREV_RO,
						N_SRCE_ADD, 
						T_STMP_ADD
						)
						VALUES
						(
						RETURN_I_RO_JOURNEY ,
						I_VIN ,
						C_DLR ,
						Q_ODOMETER ,
						Q_ODOMETER ,
						I_RO,
						RO_OPEN_DATE,
						RO_CLOSE_DATE,
                        I_MOD_YR,
                        C_FAM, 						
						C_ENG, 						
						C_FUEL_TYPE,
                        C_TRANSM, 				
						D_LAST_SERVICE_PREV_RO,
						N_SRCE_SYSTEM,
						CURRENT_TIMESTAMP()
						);
              END IF;          
		# IF THERE IS OPEN RO JOURNEY IS PRESENT FOR SAME VIN AND DEALER
        ELSE
			# IF FOR OPEN RO JOURNEY THERE IS NO I_RO ASSOCIATED FOR SAME VIN AND DEALER 
			IF (OPEN_PREVIOUS_RO_C_DLR = C_DLR AND OPEN_PREVIOUS_RO_QNA IS NULL) THEN
	    		SET RETURN_I_RO_JOURNEY = OPEN_PREVIOUS_I_RO;
				# ASSOCIATE THE I_RO FOR THE OPEN PREVIOUS RO JOURNEY
                UPDATE RO_JOURNEY A 
					SET  A.T_START_JOURNEY = LEAST(A.T_START_JOURNEY,RO_OPEN_DATE)
						,A.T_END_JOURNEY = RO_CLOSE_DATE
						,A.I_RO = I_RO
					    ,A.Q_ODOMETER_LAST = Q_ODOMETER
						,A.N_SRCE_UPDATE  = N_SRCE_SYSTEM
						,A.T_STMP_UPDATE= CURRENT_TIMESTAMP()
				WHERE A.I_RO_JOURNEY = OPEN_PREVIOUS_I_RO
			;
			 IF RO_CLOSE_DATE IS NOT NULL THEN
				DELETE FROM RO_JOURNEY_OPEN WHERE I_RO_JOURNEY = OPEN_PREVIOUS_I_RO;
			 ELSE
			    UPDATE RO_JOURNEY_OPEN A 
					SET  A.T_START_JOURNEY = LEAST(A.T_START_JOURNEY,RO_OPEN_DATE)
						,A.T_END_JOURNEY = RO_CLOSE_DATE
						,A.I_RO = I_RO
					    ,A.Q_ODOMETER_LAST = Q_ODOMETER
						,A.N_SRCE_UPDATE  = N_SRCE_SYSTEM
						,A.T_STMP_UPDATE= CURRENT_TIMESTAMP()
				WHERE A.I_RO_JOURNEY = OPEN_PREVIOUS_I_RO
				;		
             END IF;
			ELSE 
				#FORCE CLOSE THE PREVIOUS RO JOURNEY AND CREATE A NEW RO JOURNEY	
					UPDATE RO_JOURNEY A 
						SET A.T_START_JOURNEY = LEAST(A.T_START_JOURNEY,RO_OPEN_DATE)
							,A.L_FORCE_CLOSE = 'Y'
                            ,A.T_END_JOURNEY = (CASE WHEN A.T_WITECH_SCAN_LATEST IS NOT NULL 
													THEN A.T_WITECH_SCAN_LATEST 
													ELSE RO_OPEN_DATE END)
							,A.Q_ODOMETER_LAST = Q_ODOMETER
							,A.N_SRCE_UPDATE  = N_SRCE_SYSTEM
							,A.T_STMP_UPDATE= CURRENT_TIMESTAMP()
					WHERE A.I_RO_JOURNEY = OPEN_PREVIOUS_I_RO
					;
			DELETE FROM RO_JOURNEY_OPEN WHERE I_RO_JOURNEY = OPEN_PREVIOUS_I_RO;
			 
			#	UPDATE THE VEHICLE MASTER D_LAST_SERVICE
                UPDATE VEHICLE_MASTER A
				SET A.D_LAST_SERVICE = (CASE WHEN OPEN_PREVIOUS_RO_wiTECH_SCAN_LATEST IS NOT NULL 
											 THEN OPEN_PREVIOUS_RO_wiTECH_SCAN_LATEST 
                                             ELSE RO_OPEN_DATE END)
                WHERE A.I_VIN = I_VIN ;
			#CREATE NEW RO JOURNEY
			INSERT INTO RO_JOURNEY
					(
				#	I_RO_JOURNEY ,
					I_VIN ,
					C_DLR ,
					Q_ODOMETER ,
					Q_ODOMETER_LAST ,
					I_RO,
					T_START_JOURNEY,
					T_END_JOURNEY,
					I_MOD_YR,
					C_FAM, 						
					C_ENGINE_SALES_CODE,
                    C_FUEL_TYPE,
					C_TRANSM, 				
					D_LAST_SERVICE_PREV_RO,
					N_SRCE_ADD, 
					T_STMP_ADD
					)
					VALUES
					(
				#	MAX_I_RO_JOURNEY ,
					I_VIN ,
					C_DLR ,
					Q_ODOMETER ,
					Q_ODOMETER ,
					I_RO,
					RO_OPEN_DATE,
					RO_CLOSE_DATE,
					I_MOD_YR,
					C_FAM, 						
					C_ENG, 		
                    C_FUEL_TYPE,
					C_TRANSM, 				
					D_LAST_SERVICE_PREV_RO,
					N_SRCE_SYSTEM,
					CURRENT_TIMESTAMP()
					);
				SELECT LAST_INSERT_ID() INTO RETURN_I_RO_JOURNEY;	
			IF RO_CLOSE_DATE IS NULL THEN
            INSERT INTO RO_JOURNEY_OPEN
					( 
					I_RO_JOURNEY ,
					I_VIN ,
					C_DLR ,
					Q_ODOMETER ,
					Q_ODOMETER_LAST ,
					I_RO,
					T_START_JOURNEY,
					T_END_JOURNEY,
					I_MOD_YR,
					C_FAM, 						
					C_ENGINE_SALES_CODE,
                    C_FUEL_TYPE,
					C_TRANSM, 				
					D_LAST_SERVICE_PREV_RO,
					N_SRCE_ADD, 
					T_STMP_ADD
					)
					VALUES
					(
					RETURN_I_RO_JOURNEY ,
					I_VIN ,
					C_DLR ,
					Q_ODOMETER ,
					Q_ODOMETER ,
					I_RO,
					RO_OPEN_DATE,
					RO_CLOSE_DATE,
					I_MOD_YR,
					C_FAM, 						
					C_ENG, 		
                    C_FUEL_TYPE,
					C_TRANSM, 				
					D_LAST_SERVICE_PREV_RO,
					N_SRCE_SYSTEM,
					CURRENT_TIMESTAMP()
					);
			END IF;
            
            END IF;    
	 END IF;
	END IF;
END IF;

COMMIT WORK;
#SELECT RETURN_I_RO_JOURNEY;

SET VAR_I_RO_JOURNEY = RETURN_I_RO_JOURNEY;

END
===========
CREATE DEFINER=`t12247adm`@`%` PROCEDURE `db_12247_d_001_instance_1`.`PROC_RO_JOURNEY_REPEAT_REPAIR_COMPUTED`(
	IN I_RO_JOURNEY BIGINT,
    IN I_VIN VARCHAR(20),
	IN T_SESSION TIMESTAMP,
    IN HISTORY_LOOKUP_DAYS INT
)
    SQL SECURITY INVOKER
BEGIN

DECLARE CHK_OPEN_PREVIOUS_RO INT;
DECLARE VIN_NUM VARCHAR(20);
DECLARE CHK_FIRST_wiTECH_SCAN INT;
DECLARE CHK_REPEAT_REPAIR INT;
DECLARE I_REPEAT_REPAIR_COMPUTED_PREV_RO BIGINT;

DECLARE EXIT HANDLER FOR SQLEXCEPTION
BEGIN
SHOW ERRORS;
ROLLBACK;
END;

START TRANSACTION;

SELECT COUNT(1) INTO CHK_FIRST_wiTECH_SCAN 
FROM RO_JOURNEY A
WHERE A.I_RO_JOURNEY = I_RO_JOURNEY 
AND A.I_VIN = I_VIN
AND A.T_WITECH_SCAN_EARLIEST = T_SESSION
LIMIT 1
;

IF CHK_FIRST_WITECH_SCAN > 0 THEN

#	SELECT DATE_SUB('2022-06-22 13:22:48', INTERVAL 1 YEAR);


#	drop temporary table temp_ro_ecu_dtc;
/*
    create temporary table temp_ecu_dtc
    (
    I_ECU int,
    C_DTC VARCHAR(20)
    );
*/  
	#drop temporary table temp_ro_ecu_dtc; 

/*
	 INSERT INTO temp_ecu_dtc
	 SELECT ECU.I_ECU
		   ,DTC.C_DTC
	 FROM  wiTECH_ECU_DATA ECU
		  ,wiTECH_DTC_DATA DTC
	 WHERE ECU.I_RO_JOURNEY = I_RO_JOURNEY 
	 AND ECU.T_SESSION = T_SESSION
	 AND ECU.I_RO_JOURNEY = DTC.I_RO_JOURNEY 
	 AND ECU.T_SESSION = DTC.T_SESSION
	 AND ECU.I_ECU = DTC.I_ECU;

*/
	 
	 /* FIND THE VIN OF I_RO_JOURNEY */


/*	 
	 SELECT DISTINCT I_VIN INTO VIN_NUM
	 FROM  wiTECH_VEH_DATA VEH
	 WHERE VEH.I_RO_JOURNEY = 498779 
	 AND VEH.T_SESSION = '2022-06-22 13:22:48';
	 */
	 #1C4SJVDT3NS127828
	 
	 /* FIND ALL ECU,AND DTC OF THE VIN WHICH HAD REPAIR ORDER IN LAST ONE YEAR*/
	
    /*
    create temporary table temp_history_ecu_dtc
    (
    I_RO_JOURNEY BIGINT,
    T_SESSION TIMESTAMP,
    I_ECU int,
    C_DTC VARCHAR(20)
    );
    */
    
	#drop temporary table temp_oneyear_ecu_dtc; 
	
    /*
	 INSERT INTO temp_history_ecu_dtc
	 SELECT  VEH.I_RO_JOURNEY
			,VEH.T_SESSION
			,ECU.I_ECU
		   ,DTC.C_DTC
	 FROM  wiTECH_VEH_DATA VEH
	 ,(
		 SELECT A.I_RO_JOURNEY, MIN(A.T_SESSION) T_SESSION_MIN 
			 FROM  wiTECH_VEH_DATA A
			 WHERE A.I_VIN = I_VIN 
			 AND A.T_SESSION >=  DATE_SUB(T_SESSION, INTERVAL HISTORY_LOOKUP_DAYS DAY)
             AND A.T_SESSION < T_SESSION
			 GROUP BY A.I_RO_JOURNEY
		) FIRST_SCAN
	  ,wiTECH_ECU_DATA ECU
	  ,wiTECH_DTC_DATA DTC
	WHERE VEH.I_RO_JOURNEY = FIRST_SCAN.I_RO_JOURNEY
	AND VEH.T_SESSION = FIRST_SCAN.T_SESSION_MIN
	AND VEH.I_RO_JOURNEY = ECU.I_RO_JOURNEY
	AND VEH.T_SESSION = ECU.T_SESSION
	AND ECU.I_RO_JOURNEY = DTC.I_RO_JOURNEY 
	AND ECU.T_SESSION = DTC.T_SESSION
	AND ECU.I_ECU = DTC.I_ECU;
 */
 
    
/*
	SELECT COUNT(1) INTO CHK_REPEAT_REPAIR
		FROM temp_history_ecu_dtc A,
			 temp_ecu_dtc B
        WHERE A.I_ECU = B.I_ECU
        AND A.C_DTC = B.C_DTC;
*/

/*
		SELECT   MAX(A.I_RO_JOURNEY) INTO I_REPEAT_REPAIR_COMPUTED_PREV_RO
		FROM temp_history_ecu_dtc A,
			 temp_ecu_dtc B
        WHERE A.I_ECU = B.I_ECU
        AND A.C_DTC = B.C_DTC
        ;		
*/


	SELECT   MAX(A.I_RO_JOURNEY) INTO I_REPEAT_REPAIR_COMPUTED_PREV_RO
		FROM (
				SELECT   VEH.I_RO_JOURNEY
						,VEH.T_SESSION
						,ECU.I_ECU
						,DTC.C_DTC
					 FROM  wiTECH_VEH_DATA VEH
					 ,(
						 SELECT A.I_RO_JOURNEY, MIN(A.T_SESSION) T_SESSION_MIN 
							 FROM  wiTECH_VEH_DATA A
							 WHERE A.I_VIN = I_VIN 
							 AND A.T_SESSION >=  DATE_SUB(T_SESSION, INTERVAL HISTORY_LOOKUP_DAYS DAY)
							 AND A.T_SESSION < T_SESSION
							 GROUP BY A.I_RO_JOURNEY
						) FIRST_SCAN
					  ,wiTECH_ECU_DATA ECU
					  ,wiTECH_DTC_DATA DTC
					WHERE VEH.I_RO_JOURNEY = FIRST_SCAN.I_RO_JOURNEY
					AND VEH.T_SESSION = FIRST_SCAN.T_SESSION_MIN
					AND VEH.I_RO_JOURNEY = ECU.I_RO_JOURNEY
					AND VEH.T_SESSION = ECU.T_SESSION
					AND ECU.I_RO_JOURNEY = DTC.I_RO_JOURNEY 
					AND ECU.T_SESSION = DTC.T_SESSION
					AND ECU.I_ECU = DTC.I_ECU
				) A,
			 (
				 SELECT ECU.I_ECU
					   ,DTC.C_DTC
				 FROM  wiTECH_ECU_DATA ECU
					  ,wiTECH_DTC_DATA DTC
				 WHERE ECU.I_RO_JOURNEY = I_RO_JOURNEY 
				 AND ECU.T_SESSION = T_SESSION
				 AND ECU.I_RO_JOURNEY = DTC.I_RO_JOURNEY 
				 AND ECU.T_SESSION = DTC.T_SESSION
				 AND ECU.I_ECU = DTC.I_ECU
			) B
        WHERE A.I_ECU = B.I_ECU
        AND A.C_DTC = B.C_DTC
        ;		




/*
SELECT COUNT(1) INTO CHK_REPEAT_REPAIR
		FROM (
				SELECT DISTINCT ECU.I_ECU
						   ,DTC.C_DTC
					 FROM  wiTECH_VEH_DATA VEH
					 ,(
						 SELECT I_RO_JOURNEY, MIN(T_SESSION) T_SESSION 
							 FROM  wiTECH_VEH_DATA VEH
							 WHERE VEH.I_VIN = I_VIN 
							 AND VEH.T_SESSION >=  DATE_SUB(T_SESSION, INTERVAL HISTORY_LOOKUP_DAYS DAY)
							 AND VEH.T_SESSION < T_SESSION
							 GROUP BY I_RO_JOURNEY
						) FIRST_SCAN
					  ,wiTECH_ECU_DATA ECU
					  ,wiTECH_DTC_DATA DTC
					WHERE VEH.I_RO_JOURNEY = FIRST_SCAN.I_RO_JOURNEY
					AND VEH.T_SESSION = FIRST_SCAN.T_SESSION
					AND VEH.I_RO_JOURNEY = ECU.I_RO_JOURNEY
					AND VEH.T_SESSION = ECU.T_SESSION
					AND ECU.I_RO_JOURNEY = DTC.I_RO_JOURNEY 
					AND ECU.T_SESSION = DTC.T_SESSION
					AND ECU.I_ECU = DTC.I_ECU
			  ) A,
			 (SELECT DISTINCT ECU.I_ECU
					   ,DTC.C_DTC
				 FROM  wiTECH_ECU_DATA ECU
					  ,wiTECH_DTC_DATA DTC
				 WHERE ECU.I_RO_JOURNEY = I_RO_JOURNEY 
				 AND ECU.T_SESSION = T_SESSION
				 AND ECU.I_RO_JOURNEY = DTC.I_RO_JOURNEY 
				 AND ECU.T_SESSION = DTC.T_SESSION
				 AND ECU.I_ECU = DTC.I_ECU)  B
        WHERE A.I_ECU = B.I_ECU
        AND A.C_DTC = B.C_DTC;
*/

	IF I_REPEAT_REPAIR_COMPUTED_PREV_RO IS NOT NULL THEN
		UPDATE RO_JOURNEY A
        SET 
            A.L_REPEAT_REPAIR = 'Y'
		  , A.I_REPEAT_REPAIR_COMPUTED_PREV_RO = I_REPEAT_REPAIR_COMPUTED_PREV_RO
        WHERE A.I_RO_JOURNEY = I_RO_JOURNEY; 
        
        
    END IF;

/*
DROP temporary TABLE temp_ecu_dtc;
DROP temporary TABLE temp_history_ecu_dtc;
*/

END IF; 


COMMIT WORK;
END
==================CREATE DEFINER=`t12247adm`@`%` PROCEDURE `db_12247_d_001_instance_1`.`PROC_RO_JOURNEY_STATUS_UPDATE`()
    SQL SECURITY INVOKER
BEGIN
DECLARE max_shipdate TIMESTAMP;
DECLARE max_delivery TIMESTAMP;
DECLARE max_confirmdate TIMESTAMP;
-- DECLARE roJourneyID BIGINT;
DECLARE wiadvisor_scan TIMESTAMP;
DECLARE witech_scan_earliest TIMESTAMP;
DECLARE source varchar(50);
DECLARE start_journey TIMESTAMP;
DECLARE first_cherwell_caseid TIMESTAMP;
DECLARE end_journey TIMESTAMP;
DECLARE lastescalateddatetime DATETIME;
DECLARE escalaltetoengineering TINYINT;
DECLARE rostatus varchar(50);

DECLARE finished INTEGER DEFAULT 0;
DECLARE roJourneyID BIGINT;
Declare counter INTEGER DEFAULT 0;
Declare selectcounter INTEGER DEFAULT 0;
-- declare cursor for rojourney
DECLARE curRojurneyid 
	CURSOR FOR 
		SELECT I_RO_JOURNEY FROM RO_JOURNEY_OPEN;

-- declare NOT FOUND handler
DECLARE CONTINUE HANDLER FOR NOT FOUND SET finished = 1;

OPEN curRojurneyid;

	getRojouney: LOOP
		FETCH curRojurneyid INTO roJourneyID;
	    SET selectcounter=selectcounter+1;
		IF finished = 1 THEN 
			LEAVE getRojouney;
		END IF;
		IF roJourneyID IS NOT NULL THEN
			-- build  list
			SELECT MAX(NULLIF(gp.T_SHIPPED,0)),MAX(NULLIF (gp.T_DELIVERY,0)) ,MAX(NULLIF (gp.T_ORDER_CONFIRM,0)),ro.T_WIADVISOR_SCAN,ro.T_WITECH_SCAN_EARLIEST,ro.N_SRCE_ADD,
			ro.T_START_JOURNEY,MAX(cs1.CREATEDDATETIME),ro.T_END_JOURNEY,MAX(NULLIF (cs.LASTESCALATEDDATETIME,0)),cs.ESCALATETOENGINEERING
			INTO max_shipdate, max_delivery,max_confirmdate,wiadvisor_scan,witech_scan_earliest,source,start_journey,
			first_cherwell_caseid,end_journey,lastescalateddatetime,escalaltetoengineering
	-- 		FROM RO_JOURNEY_OPEN_TEMP_16112022 ro
			FROM RO_JOURNEY_OPEN ro
			LEFT JOIN GPOP_DATA gp ON gp.I_RO_JOURNEY = ro.I_RO_JOURNEY
			LEFT JOIN CHERWELL_CASE_PART3 cs ON  cs.I_RO_JOURNEY = ro.I_RO_JOURNEY AND cs.LASTESCALATEDDATETIME !="1899-12-30 00:00:00" AND cs.ESCALATETOENGINEERING = 1
			LEFT JOIN CHERWELL_CASE_PART1 cs1 ON  cs1.I_RO_JOURNEY = ro.I_RO_JOURNEY
			WHERE ro.I_RO_JOURNEY=roJourneyID  
			GROUP BY gp.I_RO_JOURNEY,cs.I_RO_JOURNEY;
	
	
		 
			IF(start_journey IS NOT NULL) AND (end_journey IS NOT NULL) THEN
			 SET rostatus="Completed";
			ELSEIF (max_delivery IS NOT NULL AND end_journey IS NULL) THEN 
			 SET rostatus="Under Repair";
	-- 		ELSEIF (max_shipdate IS NOT NULL AND max_delivery IS NOT NULL) THEN
	-- 		 SET rostatus="Part Delivered";
			ELSEIF (max_confirmdate IS NOT NULL AND max_shipdate IS NOT NULL AND max_shipdate > max_confirmdate) THEN
			 SET rostatus="Part Shipped";
			ELSEIF (escalaltetoengineering=1 AND max_confirmdate IS NOT NULL AND lastescalateddatetime IS NOT NULL) OR (first_cherwell_caseid IS NOT NULL AND max_confirmdate IS NOT NULL) THEN 
			 SET rostatus="Part Ordered";
			ELSEIF (escalaltetoengineering=1 AND first_cherwell_caseid IS NOT NULL AND  lastescalateddatetime IS NOT NULL) THEN
			 SET rostatus="Escalated";
-- 			ELSEIF (first_cherwell_caseid IS NOT NULL AND  lastescalateddatetime IS NULL) THEN
-- 		 	 SET rostatus="Case Created";
			ELSEIF (first_cherwell_caseid IS NOT NULL AND witech_scan_earliest IS NOT NULL AND DATE(first_cherwell_caseid) >= DATE(witech_scan_earliest)) OR (first_cherwell_caseid IS NOT NULL AND witech_scan_earliest IS NULL AND wiadvisor_scan IS NOT NULL AND DATE(first_cherwell_caseid) >= DATE(wiadvisor_scan)) THEN
		 	 SET rostatus="Diagnosis/Case Created";
			ELSEIF (wiadvisor_scan IS NOT NULL AND witech_scan_earliest IS NOT NULL AND DATE(witech_scan_earliest)>= DATE(wiadvisor_scan)) OR (source = "QNA" AND wiadvisor_scan IS NULL AND start_journey IS NOT NULL AND witech_scan_earliest IS NOT NULL)  THEN
			 SET rostatus="Written Up";
			ELSE 
			 SET rostatus="Open";
			END IF;
	
	-- 		SELECT rostatus;
	-- 		SELECT start_journey;
	-- 		SELECT end_journey;
	-- 		SELECT max_delivery;
	-- 		SELECT max_shipdate;
	-- 		select max_confirmdate;
	
			UPDATE RO_JOURNEY_OPEN SET L_CURRENT_RO_STATUS=rostatus WHERE I_RO_JOURNEY=roJourneyID;
			SET counter=counter+1;
		END IF;
	 END LOOP getRojouney;
CLOSE curRojurneyid;
SELECT counter;
SELECT selectcounter;
END
==============
CREATE DEFINER=`t12247adm`@`%` PROCEDURE `db_12247_d_001_instance_1`.`PROC_RO_JOURNEY_UPDATE_DAYS_DOWN_ONE_TIME`(
)
    SQL SECURITY INVOKER
BEGIN

DECLARE VAR_I_VIN VARCHAR(20);

DECLARE done INT DEFAULT 0;

DECLARE cur CURSOR FOR 
  SELECT DISTINCT  I_VIN
  FROM 
  #TEMP_SERVICE_MARKETING
  #RO_JOURNEY_TEST_1
  RO_JOURNEY
  #LIMIT 100
  ;

DECLARE CONTINUE HANDLER FOR NOT FOUND SET done = 1;

DECLARE EXIT HANDLER FOR SQLEXCEPTION
BEGIN
SHOW ERRORS;
ROLLBACK;
END;
    
START TRANSACTION;

	/*
	CHECK IF THERE IS OPEN PREVIOUS RO PRESENT(T_END_JOURNEY IS NULL ) FOR SAME VIN AND DELEAER CODE
	*/

     
      OPEN cur;
      label: LOOP
      FETCH cur INTO  
		 VAR_I_VIN
		;
      IF done = 1 THEN LEAVE label;
	  END IF;
    	   
	 # UPDATE RO_JOURNEY_TEST_1 B
     UPDATE RO_JOURNEY B
		     ,(
				SELECT    I_RO_JOURNEY
						, I_VIN 
						, T_START_JOURNEY
						, T_END_JOURNEY
						, DAYS_DOWN
						, @CUMMULATIVE_DAYSDOWN :=  @CUMMULATIVE_DAYSDOWN  + DAYS_DOWN AS CUMMULATIVE_DAYSDOWN
				FROM 
				(
				SELECT 
						  I_RO_JOURNEY
						, I_VIN
						, T_START_JOURNEY
						, T_END_JOURNEY
						, DATEDIFF(IFNULL(T_END_JOURNEY,NOW()),T_START_JOURNEY) AS DAYS_DOWN
					#FROM RO_JOURNEY_TEST_1
                    FROM RO_JOURNEY
					WHERE I_VIN = VAR_I_VIN
					ORDER BY I_RO_JOURNEY,I_VIN 
				) A
				JOIN (SELECT @CUMMULATIVE_DAYSDOWN := 0) B
				ORDER BY A.I_RO_JOURNEY,A.I_VIN  
				) AA
			SET B.I_CUM_DAYS = CUMMULATIVE_DAYSDOWN		
			   ,B.I_DAYS_DOWN = AA.DAYS_DOWN	
                WHERE B.I_RO_JOURNEY = AA.I_RO_JOURNEY
                ;
      
           
    COMMIT;
    	   
    #SELECT VAR_I_RO_JOURNEY;
   END LOOP label;
  CLOSE cur;
  
		UPDATE 
			   #RO_JOURNEY_OPEN_TEST_1 A,
			   #RO_JOURNEY_TEST_1 B
                RO_JOURNEY_OPEN A,
			    RO_JOURNEY B
		SET A.I_CUM_DAYS = B.I_CUM_DAYS		
		   ,A.I_DAYS_DOWN = B.I_DAYS_DOWN	
		WHERE A.I_RO_JOURNEY = B.I_RO_JOURNEY
        ;
  COMMIT;
  
END
=============
CREATE DEFINER=`t12247adm`@`%` PROCEDURE `db_12247_d_001_instance_1`.`PROC_RO_JOURNEY_wiADVISOR`(
	IN `I_VIN` VARCHAR(20),
	IN `C_DLR` VARCHAR(20),
	IN `Q_ODOMETER` FLOAT,
	IN `T_SESSION_SCAN` TIMESTAMP,
    IN `C_SESSION_ID` VARCHAR(36),
	IN `N_SRCE_SYSTEM` VARCHAR(30),
	IN `I_MOD_YR` INT,
	IN `C_FAM` varchar(50),
	IN `C_ENG` varchar(30),
    IN `C_FUEL_TYPE` VARCHAR(30),
	IN `C_TRANSM` varchar(50),
	IN `D_LAST_SERVICE_PREV_RO` date,
    OUT `VAR_I_RO_JOURNEY` BIGINT
)
    SQL SECURITY INVOKER
BEGIN

DECLARE RETURN_I_RO_JOURNEY BIGINT;
DECLARE OPEN_PREVIOUS_RO_C_DLR VARCHAR(30);
DECLARE MAX_I_RO_JOURNEY BIGINT;
DECLARE OPEN_PREVIOUS_I_RO_JOURNEY BIGINT;
DECLARE OPEN_PREVIOUS_RO_ODOMETER FLOAT;
DECLARE OPEN_PREVIOUS_RO_ODOMETER_LAST FLOAT;
DECLARE OPEN_PREVIOUS_RO_wiTECH_SCAN_LATEST TIMESTAMP;
DECLARE OPEN_PREVIOUS_RO_C_SESSION_ID VARCHAR(36);




DECLARE EXIT HANDLER FOR SQLEXCEPTION
BEGIN
SHOW ERRORS;
ROLLBACK;
END;

START TRANSACTION;

/*
CHECK IF THERE IS OPEN PREVIOUS RO PRESENT(T_END_JOURNEY IS NULL ) FOR SAME VIN AND DELEAER CODE
*/

  SELECT A.I_RO_JOURNEY
		,A.C_DLR
		,A.Q_ODOMETER
        ,A.Q_ODOMETER_LAST
        ,A.T_wiTECH_SCAN_LATEST  
	  INTO OPEN_PREVIOUS_I_RO_JOURNEY
         , OPEN_PREVIOUS_RO_C_DLR 
         , OPEN_PREVIOUS_RO_ODOMETER
         , OPEN_PREVIOUS_RO_ODOMETER_LAST
         , OPEN_PREVIOUS_RO_wiTECH_SCAN_LATEST	
	FROM RO_JOURNEY AS A
	WHERE A.I_VIN = I_VIN
#	AND A.C_DLR = C_DLR
	AND A.T_END_JOURNEY IS NULL 
    #AND A.T_FORCE_CLOSE_RO IS NULL) 
	ORDER BY A.T_START_JOURNEY DESC
	LIMIT 1
	;

IF OPEN_PREVIOUS_I_RO_JOURNEY IS NULL THEN

	# INSERT THE RECORD AS NEW RO;

    INSERT INTO RO_JOURNEY
				(
#				I_RO_JOURNEY ,
				I_VIN ,
				C_DLR ,
				Q_ODOMETER ,
				Q_ODOMETER_LAST ,
				T_START_JOURNEY,
				T_wiTECH_SCAN_EARLIEST, 
				T_wiTECH_SCAN_LATEST, 
                T_WIADVISOR_SCAN,
				I_MOD_YR,
				C_FAM, 						
				C_ENGINE_SALES_CODE,
                C_FUEL_TYPE,
				C_TRANSM, 				
				D_LAST_SERVICE_PREV_RO,
                N_SRCE_ADD, 
				T_STMP_ADD
				)
				VALUES
				(
#				MAX_I_RO_JOURNEY ,
				I_VIN ,
				C_DLR ,
				Q_ODOMETER ,
				Q_ODOMETER ,
                T_SESSION_SCAN,
				(CASE WHEN UPPER(N_SRCE_SYSTEM) = 'WITECH' THEN T_SESSION_SCAN ELSE NULL END),
                (CASE WHEN UPPER(N_SRCE_SYSTEM) = 'WITECH' THEN T_SESSION_SCAN ELSE NULL END),
                (CASE WHEN UPPER(N_SRCE_SYSTEM) = 'WIADVISOR' THEN T_SESSION_SCAN ELSE NULL END),
				I_MOD_YR,
                C_FAM, 						
				C_ENG, 		
				C_FUEL_TYPE,
				C_TRANSM, 				
				D_LAST_SERVICE_PREV_RO,
            	N_SRCE_SYSTEM,
				CURRENT_TIMESTAMP()
				);
 
 
	SELECT LAST_INSERT_ID() INTO RETURN_I_RO_JOURNEY;
	   
    INSERT INTO RO_JOURNEY_OPEN
				(
				I_RO_JOURNEY ,
				I_VIN ,
				C_DLR ,
				Q_ODOMETER ,
				Q_ODOMETER_LAST ,
				T_START_JOURNEY,
				T_wiTECH_SCAN_EARLIEST, 
				T_wiTECH_SCAN_LATEST, 
                T_WIADVISOR_SCAN,
				I_MOD_YR,
				C_FAM, 						
				C_ENGINE_SALES_CODE,
                C_FUEL_TYPE,
				C_TRANSM, 				
				D_LAST_SERVICE_PREV_RO,
                N_SRCE_ADD, 
				T_STMP_ADD
				)
				VALUES
				(
				RETURN_I_RO_JOURNEY ,
				I_VIN ,
				C_DLR ,
				Q_ODOMETER ,
				Q_ODOMETER ,
                T_SESSION_SCAN,
				(CASE WHEN UPPER(N_SRCE_SYSTEM) = 'WITECH' THEN T_SESSION_SCAN ELSE NULL END),
                (CASE WHEN UPPER(N_SRCE_SYSTEM) = 'WITECH' THEN T_SESSION_SCAN ELSE NULL END),
                (CASE WHEN UPPER(N_SRCE_SYSTEM) = 'WIADVISOR' THEN T_SESSION_SCAN ELSE NULL END),
				I_MOD_YR,
                C_FAM, 						
				C_ENG, 		
				C_FUEL_TYPE,
				C_TRANSM, 				
				D_LAST_SERVICE_PREV_RO,
            	N_SRCE_SYSTEM,
				CURRENT_TIMESTAMP()
				);
     
	UPDATE  RO_JOURNEY_OPEN A,
		   DEALER_MASTER B
	   SET A.C_DLR_BUSINESS = B.C_DLR_BUSINESS
	   ,A.I_DLR_PH_NMBR = B.I_DLR_PH_NMBR
	   ,A.N_DLR = B.N_DLR
	  WHERE A.I_RO_JOURNEY = RETURN_I_RO_JOURNEY
		AND	A.C_DLR = B.C_DLR
	  ;
  
	SET SQL_SAFE_UPDATES = 0; 
	UPDATE  RO_JOURNEY_OPEN A,
		   BUSINESS_CENTER_DESC B
	   SET A.N_BUSINESS_CENTER = B.N_BUSINESS_CENTER
	  WHERE A.I_RO_JOURNEY = RETURN_I_RO_JOURNEY
		AND A.C_DLR_BUSINESS = B.C_BUSINESS_CENTER
	  ;
                 
ELSE
	
	SET RETURN_I_RO_JOURNEY = OPEN_PREVIOUS_I_RO_JOURNEY;

	SELECT DISTINCT C_SESSION_ID INTO OPEN_PREVIOUS_RO_C_SESSION_ID
		FROM TEMP_wiADVISOR
        WHERE I_RO_JOURNEY = OPEN_PREVIOUS_I_RO_JOURNEY;
        
       # SELECT OPEN_PREVIOUS_RO_C_SESSION_ID;
       # SELECT C_SESSION_ID;
        
    IF (
		OPEN_PREVIOUS_RO_C_DLR != C_DLR
        OR
		OPEN_PREVIOUS_RO_C_SESSION_ID != C_SESSION_ID) 
	THEN
	
			UPDATE RO_JOURNEY A 
			    SET  	 
                #A.T_END_JOURNEY = T_SESSION_SCAN
                A.T_END_JOURNEY = (CASE WHEN A.T_WITECH_SCAN_LATEST IS NOT NULL 
													THEN A.T_WITECH_SCAN_LATEST 
													ELSE T_SESSION_SCAN END)
						,A.L_FORCE_CLOSE = 'Y' 
					#	,A.T_FORCE_CLOSE_RO = T_SESSION_SCAN
						,A.N_SRCE_UPDATE = N_SRCE_SYSTEM
						,A.T_STMP_UPDATE = CURRENT_TIMESTAMP()
	         WHERE A.I_RO_JOURNEY = OPEN_PREVIOUS_I_RO_JOURNEY
            ;
           
            DELETE FROM RO_JOURNEY_OPEN WHERE I_RO_JOURNEY = OPEN_PREVIOUS_I_RO_JOURNEY;
           
			#	UPDATE THE VEHICLE MASTER D_LAST_SERVICE
                
                UPDATE VEHICLE_MASTER A
				SET A.D_LAST_SERVICE = GREATEST(OPEN_PREVIOUS_RO_wiTECH_SCAN_LATEST,T_SESSION_SCAN)
				WHERE A.I_VIN = I_VIN ;
            
		    # INSERT THE RECORD AS NEW RO;
			
			INSERT INTO RO_JOURNEY
						(
		#				I_RO_JOURNEY ,
						I_VIN ,
						C_DLR ,
						Q_ODOMETER ,
						Q_ODOMETER_LAST ,
						T_START_JOURNEY,
						T_wiTECH_SCAN_EARLIEST, 
						T_wiTECH_SCAN_LATEST, 
						T_WIADVISOR_SCAN,
						I_MOD_YR,
						C_FAM, 						
						C_ENGINE_SALES_CODE, 						
						C_FUEL_TYPE,
                        C_TRANSM, 				
						D_LAST_SERVICE_PREV_RO,
						N_SRCE_ADD, 
						T_STMP_ADD
						)
						VALUES
						(
		#				MAX_I_RO_JOURNEY ,
						I_VIN ,
						C_DLR ,
						Q_ODOMETER ,
						Q_ODOMETER ,
						T_SESSION_SCAN,
						(CASE WHEN UPPER(N_SRCE_SYSTEM) = 'WITECH' THEN T_SESSION_SCAN ELSE NULL END),
						(CASE WHEN UPPER(N_SRCE_SYSTEM) = 'WITECH' THEN T_SESSION_SCAN ELSE NULL END),
						(CASE WHEN UPPER(N_SRCE_SYSTEM) = 'WIADVISOR' THEN T_SESSION_SCAN ELSE NULL END),
						I_MOD_YR,
						C_FAM, 						
						C_ENG, 						
						C_FUEL_TYPE,
                        C_TRANSM, 				
						D_LAST_SERVICE_PREV_RO,
						N_SRCE_SYSTEM,
						CURRENT_TIMESTAMP()
						);

				SELECT LAST_INSERT_ID() INTO RETURN_I_RO_JOURNEY;
                
                	INSERT INTO RO_JOURNEY_OPEN
						(
						I_RO_JOURNEY ,
						I_VIN ,
						C_DLR ,
						Q_ODOMETER ,
						Q_ODOMETER_LAST ,
						T_START_JOURNEY,
						T_wiTECH_SCAN_EARLIEST, 
						T_wiTECH_SCAN_LATEST, 
						T_WIADVISOR_SCAN,
						I_MOD_YR,
						C_FAM, 						
						C_ENGINE_SALES_CODE, 						
						C_FUEL_TYPE,
                        C_TRANSM, 				
						D_LAST_SERVICE_PREV_RO,
						N_SRCE_ADD, 
						T_STMP_ADD
						)
						VALUES
						(
						RETURN_I_RO_JOURNEY ,
						I_VIN ,
						C_DLR ,
						Q_ODOMETER ,
						Q_ODOMETER ,
						T_SESSION_SCAN,
						(CASE WHEN UPPER(N_SRCE_SYSTEM) = 'WITECH' THEN T_SESSION_SCAN ELSE NULL END),
						(CASE WHEN UPPER(N_SRCE_SYSTEM) = 'WITECH' THEN T_SESSION_SCAN ELSE NULL END),
						(CASE WHEN UPPER(N_SRCE_SYSTEM) = 'WIADVISOR' THEN T_SESSION_SCAN ELSE NULL END),
						I_MOD_YR,
						C_FAM, 						
						C_ENG, 						
						C_FUEL_TYPE,
                        C_TRANSM, 				
						D_LAST_SERVICE_PREV_RO,
						N_SRCE_SYSTEM,
						CURRENT_TIMESTAMP()
						);

		
		UPDATE  RO_JOURNEY_OPEN A,
			DEALER_MASTER B
		SET A.C_DLR_BUSINESS = B.C_DLR_BUSINESS
		,A.I_DLR_PH_NMBR = B.I_DLR_PH_NMBR
		,A.N_DLR = B.N_DLR
		WHERE A.I_RO_JOURNEY = RETURN_I_RO_JOURNEY
			AND	A.C_DLR = B.C_DLR
		;
	
		SET SQL_SAFE_UPDATES = 0; 
		UPDATE  RO_JOURNEY_OPEN A,
			BUSINESS_CENTER_DESC B
		SET A.N_BUSINESS_CENTER = B.N_BUSINESS_CENTER
		WHERE A.I_RO_JOURNEY = RETURN_I_RO_JOURNEY
			AND A.C_DLR_BUSINESS = B.C_BUSINESS_CENTER
		;
			
    ELSE
				
            UPDATE RO_JOURNEY A 
				SET A.Q_ODOMETER_LAST = Q_ODOMETER
					,A.T_wiTECH_SCAN_EARLIEST = LEAST(IFNULL(A.T_wiTECH_SCAN_EARLIEST,'9999-01-01 00:00:01')
														,(CASE WHEN UPPER(N_SRCE_SYSTEM) = 'WITECH' THEN T_SESSION_SCAN ELSE A.T_wiTECH_SCAN_EARLIEST END))
					,A.T_wiTECH_SCAN_LATEST   = GREATEST(IFNULL(A.T_wiTECH_SCAN_LATEST, '0001-01-01 00:00:01')
														,(CASE WHEN UPPER(N_SRCE_SYSTEM) = 'WITECH' THEN T_SESSION_SCAN ELSE A.T_wiTECH_SCAN_LATEST END))
					,A.T_WIADVISOR_SCAN 	  = (CASE WHEN UPPER(N_SRCE_SYSTEM) = 'WIADVISOR' THEN T_SESSION_SCAN ELSE A.T_WIADVISOR_SCAN END)
					,A.N_SRCE_UPDATE  = N_SRCE_SYSTEM
					,A.T_STMP_UPDATE= CURRENT_TIMESTAMP()
			 WHERE A.I_RO_JOURNEY = OPEN_PREVIOUS_I_RO_JOURNEY
            ;
            
            UPDATE RO_JOURNEY_OPEN A 
				SET A.Q_ODOMETER_LAST = Q_ODOMETER
					,A.T_wiTECH_SCAN_EARLIEST = LEAST(IFNULL(A.T_wiTECH_SCAN_EARLIEST,'9999-01-01 00:00:01')
														,(CASE WHEN UPPER(N_SRCE_SYSTEM) = 'WITECH' THEN T_SESSION_SCAN ELSE A.T_wiTECH_SCAN_EARLIEST END))
					,A.T_wiTECH_SCAN_LATEST   = GREATEST(IFNULL(A.T_wiTECH_SCAN_LATEST, '0001-01-01 00:00:01')
														,(CASE WHEN UPPER(N_SRCE_SYSTEM) = 'WITECH' THEN T_SESSION_SCAN ELSE A.T_wiTECH_SCAN_LATEST END))
					,A.T_WIADVISOR_SCAN 	  = (CASE WHEN UPPER(N_SRCE_SYSTEM) = 'WIADVISOR' THEN T_SESSION_SCAN ELSE A.T_WIADVISOR_SCAN END)
					,A.N_SRCE_UPDATE  = N_SRCE_SYSTEM
					,A.T_STMP_UPDATE= CURRENT_TIMESTAMP()
			 WHERE A.I_RO_JOURNEY = OPEN_PREVIOUS_I_RO_JOURNEY
            ;
	END IF;
END IF;

#SELECT RETURN_I_RO_JOURNEY;
SET VAR_I_RO_JOURNEY = RETURN_I_RO_JOURNEY;
COMMIT WORK;
END
====================
CREATE DEFINER=`t12247adm`@`%` PROCEDURE `db_12247_d_001_instance_1`.`PROC_SDH_GET_RECENT_SCAN`(
	IN `dealerCode` VARCHAR(50),
	IN `vin` VARCHAR(50),
	IN `templateId` VARCHAR(50)
)
    SQL SECURITY INVOKER
BEGIN
	SELECT
		DATE_FORMAT(DATE(MAX(T_SESSION)), '%Y-%m-%d') AS sessionTimestamp,
		TIMESTAMPEPOCH AS timestampEpoch,
		C_SESSION_ID AS sessionId,
		C_TEMPLATE_ID AS templateId,
		S3_OBJECT_URL AS s3ObjectUrl
	FROM (
		SELECT T_SESSION,TIMESTAMPEPOCH,C_SESSION_ID,C_TEMPLATE_ID,S3_OBJECT_URL
		FROM TRANSACTION_LOG
		WHERE I_VIN=vin 
		AND (dealerCode = '' or C_DLR=dealerCode) 
		AND (templateId = '' or C_TEMPLATE_ID=templateId)
		ORDER BY TIMESTAMPEPOCH DESC
	) AS sub
	GROUP BY sub.C_TEMPLATE_ID;
END
================
CREATE DEFINER=`t12247adm`@`%` PROCEDURE `db_12247_d_001_instance_1`.`PROC_SDH_GET_SCANS`(
	IN `dealerCode` VARCHAR(50),
	IN `vin` VARCHAR(50),
	IN `templateId` VARCHAR(50),
	IN `startDate` DATE,
	IN `endDate` DATE,
	IN `pageOffset` INT,
	IN `pageSize` INT
)
    SQL SECURITY INVOKER
BEGIN
	SELECT 
		DATE_FORMAT(DATE(T_SESSION), '%Y-%m-%d') AS sessionTimestamp,
		TIMESTAMPEPOCH AS timestampEpoch,
	   C_SESSION_ID AS sessionId,
	   C_TEMPLATE_ID AS templateId,
	   S3_OBJECT_URL AS s3ObjectUrl
	FROM TRANSACTION_LOG
	WHERE C_DLR=dealerCode AND
			I_VIN=vin AND
			DATE(T_SESSION) BETWEEN startDate AND endDate AND
			(templateId = '' OR C_TEMPLATE_ID=templateId)
	ORDER BY TIMESTAMPEPOCH DESC
	LIMIT pageOffset,pageSize;
	
	SELECT 
		COUNT(*) AS totalCount
	FROM TRANSACTION_LOG
	WHERE C_DLR=dealerCode AND
			I_VIN=vin AND
			DATE(T_SESSION) BETWEEN startDate AND endDate AND
			(templateId = '' OR C_TEMPLATE_ID=templateId)
	ORDER BY TIMESTAMPEPOCH DESC;
END
==================
CREATE DEFINER=`t12247adm`@`%` PROCEDURE `db_12247_d_001_instance_1`.`PROC_UI_UPDATE_USER`(
	IN `userData` JSON
)
    SQL SECURITY INVOKER
BEGIN
DECLARE data_tid VARCHAR(10);
DECLARE data_first_name VARCHAR(10);
DECLARE data_last_name VARCHAR(10);
DECLARE data_email VARCHAR(200);
DECLARE data_active CHAR(1);
DECLARE data_role VARCHAR(20);
DECLARE data_updated_by VARCHAR(30);





SET data_tid = userData ->> '$.tid';
SET data_first_name = userData ->> '$.first_name';
SET data_last_name = userData ->> '$.last_name';
SET data_email = userData ->> '$.email';
SET data_active = userData ->> '$.status';
SET data_role = userData ->> '$.role';
SET data_updated_by = userData ->> '$.updated_by';





UPDATE USER_DETAILS
SET X_FIRST_NAME=data_first_name,X_LAST_NAME=data_last_name,
X_EMAIL=data_email,L_ACTIVE=data_active,N_ROLE=data_role,
N_SRCE_UPDATE=data_updated_by,T_STMP_UPDATE=CURRENT_TIMESTAMP()
WHERE C_TID=data_tid;
END
=============
CREATE DEFINER=`t12247adm`@`%` PROCEDURE `db_12247_d_001_instance_1`.`PROC_UPDATE_MONITOR_LOG`(
	IN `driveItReq` VARCHAR(100),
	IN `driveItReqStatus` VARCHAR(50),
	IN `updateEmailSentTimestamp` BIT
)
    SQL SECURITY INVOKER
BEGIN
	
	IF updateEmailSentTimestamp = 1 THEN
		UPDATE MONITOR_LOG 
		SET DRIVE_IT_REQ_STATUS=driveItReqStatus,T_STAMP_UPDATED=CURRENT_TIMESTAMP(), LAST_EMAIL_SENT = CURRENT_TIMESTAMP()
		WHERE DRIVE_IT_REQ = driveItReq;
	ELSE 
		UPDATE MONITOR_LOG 
		SET DRIVE_IT_REQ_STATUS=driveItReqStatus,T_STAMP_UPDATED=CURRENT_TIMESTAMP()
		WHERE DRIVE_IT_REQ = driveItReq;
	END IF;

END
==============
CREATE DEFINER=`t12247adm`@`%` PROCEDURE `db_12247_d_001_instance_1`.`PROC_UPDATE_RO_JOURNEY_COMMENT`(
IN `commentID` BIGINT,
IN `comment` TEXT
)
    SQL SECURITY INVOKER
BEGIN
		UPDATE RO_JOURNEY_COMMENT 
		SET X_COMMENT = comment
		WHERE I_COMMENT_ID = commentID;
END
==================
CREATE DEFINER=`t12247adm`@`%` PROCEDURE `db_12247_d_001_instance_1`.`PROC_UPDATE_RO_JOURNEY_DEALER_ATTRIBUTES`()
    SQL SECURITY INVOKER
BEGIN


DECLARE EXIT HANDLER FOR SQLEXCEPTION
BEGIN
SHOW ERRORS;
ROLLBACK;
END;
    
START TRANSACTION;

	 SET SQL_SAFE_UPDATES = 0;

     UPDATE RO_JOURNEY A
     ,
     (
       SELECT 	    DL.C_DLR
				  , DL.I_DLR_PH_NMBR
				  , DL.N_DLR
				  , DL.X_COUNTRY
				  , DL.C_DLR_BUSINESS
                  , BC.N_BUSINESS_CENTER
       FROM
        (
			SELECT  C_DLR
				  , I_DLR_PH_NMBR
				  , N_DLR
				  , (CASE WHEN X_COUNTRY NOT IN ('USA','CAN','MEX') THEN 'ROW' ELSE X_COUNTRY END) X_COUNTRY
				  , (CASE WHEN X_COUNTRY NOT IN ('USA','CAN','MEX') THEN 'I' ELSE C_DLR_BUSINESS END) C_DLR_BUSINESS
			FROM DEALER_MASTER
        ) DL
       ,BUSINESS_CENTER_DESC BC
              WHERE DL.C_DLR_BUSINESS = BC.C_BUSINESS_CENTER
       AND DL.X_COUNTRY = BC.X_COUNTRY
     ) B
     
SET
					A.C_DLR				= B.C_DLR	
				  , A.I_DLR_PH_NMBR		= B.I_DLR_PH_NMBR
				  , A.N_DLR				= B.N_DLR
		#		  , A.X_COUNTRY			= B.X_COUNTRY
				  , A.C_DLR_BUSINESS	= B.C_DLR_BUSINESS
                  , A.N_BUSINESS_CENTER = B.N_BUSINESS_CENTER
     
     WHERE A.C_DLR = B.C_DLR
    # AND A.N_BUSINESS_CENTER IS NULL
      ;
     
       
 
	 SET SQL_SAFE_UPDATES = 0;

     UPDATE RO_JOURNEY_OPEN A
     ,
     (
       SELECT 	    DL.C_DLR
				  , DL.I_DLR_PH_NMBR
				  , DL.N_DLR
				  , DL.X_COUNTRY
				  , DL.C_DLR_BUSINESS
                  , BC.N_BUSINESS_CENTER
       FROM
        (
			SELECT  C_DLR
				  , I_DLR_PH_NMBR
				  , N_DLR
				  , (CASE WHEN X_COUNTRY NOT IN ('USA','CAN','MEX') THEN 'ROW' ELSE X_COUNTRY END) X_COUNTRY
				  , (CASE WHEN X_COUNTRY NOT IN ('USA','CAN','MEX') THEN 'I' ELSE C_DLR_BUSINESS END) C_DLR_BUSINESS
			FROM DEALER_MASTER
        ) DL
       ,BUSINESS_CENTER_DESC BC
              WHERE DL.C_DLR_BUSINESS = BC.C_BUSINESS_CENTER
       AND DL.X_COUNTRY = BC.X_COUNTRY
     ) B
     
SET
					A.C_DLR				= B.C_DLR	
				  , A.I_DLR_PH_NMBR		= B.I_DLR_PH_NMBR
				  , A.N_DLR				= B.N_DLR
		#		  , A.X_COUNTRY			= B.X_COUNTRY
				  , A.C_DLR_BUSINESS	= B.C_DLR_BUSINESS
                  , A.N_BUSINESS_CENTER = B.N_BUSINESS_CENTER
     
     WHERE A.C_DLR = B.C_DLR
    # AND A.N_BUSINESS_CENTER IS NULL
      ;
       

COMMIT WORK;

END
===================
CREATE DEFINER=`t12247adm`@`%` PROCEDURE `db_12247_d_001_instance_1`.`UPDATE_WIADVISOR_CHILD_TABLE_AFTER_MIGRATION`(
)
    SQL SECURITY INVOKER
BEGIN


DECLARE EXIT HANDLER FOR SQLEXCEPTION
BEGIN
SHOW ERRORS;
ROLLBACK;
END;

START TRANSACTION;

SET innodb_lock_wait_timeout = 1000;
SET SQL_SAFE_UPDATES = 0;

UPDATE wiADVISOR_SELECTED_SERVICE	    A JOIN MIGRATION_MAPPING_FOR_wiADVISOR B ON A.I_RO_JOURNEY = B.I_RO_JOURNEY_OLD SET A.I_RO_JOURNEY = B.I_RO_JOURNEY_NEW WHERE  A.T_SESSION >= B.T_WIADVISOR_SCAN_EARLIEST;
COMMIT;
UPDATE wiADVISOR_ECU_DATA 				A JOIN MIGRATION_MAPPING_FOR_wiADVISOR B ON A.I_RO_JOURNEY = B.I_RO_JOURNEY_OLD SET A.I_RO_JOURNEY = B.I_RO_JOURNEY_NEW WHERE  A.T_SESSION >= B.T_WIADVISOR_SCAN_EARLIEST;
COMMIT;
UPDATE wiADVISOR_VEH_WARNING_MSGS 		A JOIN MIGRATION_MAPPING_FOR_wiADVISOR B ON A.I_RO_JOURNEY = B.I_RO_JOURNEY_OLD SET A.I_RO_JOURNEY = B.I_RO_JOURNEY_NEW WHERE  A.T_SESSION >= B.T_WIADVISOR_SCAN_EARLIEST;
COMMIT;

UPDATE wiADVISOR_SERVICE_CONTRACTS 		A JOIN MIGRATION_MAPPING_FOR_wiADVISOR B ON A.I_RO_JOURNEY = B.I_RO_JOURNEY_OLD SET A.I_RO_JOURNEY = B.I_RO_JOURNEY_NEW WHERE  A.T_SESSION >= B.T_WIADVISOR_SCAN_EARLIEST;
COMMIT;

UPDATE wiADVISOR_DTC_DATA 				A JOIN MIGRATION_MAPPING_FOR_wiADVISOR B ON A.I_RO_JOURNEY = B.I_RO_JOURNEY_OLD SET A.I_RO_JOURNEY = B.I_RO_JOURNEY_NEW WHERE  A.T_SESSION >= B.T_WIADVISOR_SCAN_EARLIEST;
COMMIT;

UPDATE wiADVISOR_VEH_DATA 				A JOIN MIGRATION_MAPPING_FOR_wiADVISOR B ON A.I_RO_JOURNEY = B.I_RO_JOURNEY_OLD SET A.I_RO_JOURNEY = B.I_RO_JOURNEY_NEW WHERE  A.T_SESSION >= B.T_WIADVISOR_SCAN_EARLIEST;

COMMIT WORK;
END
======================
CREATE DEFINER=`t12247adm`@`%` PROCEDURE `db_12247_d_001_instance_1`.`UPDATE_WITECH_CHILD_TABLE_AFTER_MIGRATION`(
)
    SQL SECURITY INVOKER
BEGIN


DECLARE EXIT HANDLER FOR SQLEXCEPTION
BEGIN
SHOW ERRORS;
ROLLBACK;
END;

START TRANSACTION;

SET innodb_lock_wait_timeout = 1000;
SET SQL_SAFE_UPDATES = 0;

#UPDATE wiTECH_ECU_MEGAKNOCK_COMSER_CONV_ADDNL_DATA 	A,wiTECH_VEH_DATA_MAPPING_20221119 B SET A.I_RO_JOURNEY = B.I_RO_JOURNEY_NEW WHERE A.I_RO_JOURNEY = B.I_RO_JOURNEY;
#UPDATE wiTECH_ECU_MEGAKNOCK_COMSER_DATA				A JOIN MIGRATION_MAPPING_FOR_wiTECH B ON A.I_RO_JOURNEY = B.I_RO_JOURNEY_OLD SET A.I_RO_JOURNEY = B.I_RO_JOURNEY_NEW WHERE  A.T_SESSION >= B.T_WITECH_SCAN_EARLIEST;
UPDATE wiTECH_ECU_MEGAKNOCK_DATA						A JOIN MIGRATION_MAPPING_FOR_wiTECH B ON A.I_RO_JOURNEY = B.I_RO_JOURNEY_OLD SET A.I_RO_JOURNEY = B.I_RO_JOURNEY_NEW WHERE  A.T_SESSION >= B.T_WITECH_SCAN_EARLIEST;
COMMIT;
UPDATE wiTECH_ECU_SUPPLEMENTAL_LEGISLATIVE_DATA			A JOIN MIGRATION_MAPPING_FOR_wiTECH B ON A.I_RO_JOURNEY = B.I_RO_JOURNEY_OLD SET A.I_RO_JOURNEY = B.I_RO_JOURNEY_NEW WHERE  A.T_SESSION >= B.T_WITECH_SCAN_EARLIEST;
COMMIT;
#UPDATE wiTECH_ECU_SUPPLEMENTAL_COMSER_CONV_ADDNL_DATA	A JOIN MIGRATION_MAPPING_FOR_wiTECH B ON A.I_RO_JOURNEY = B.I_RO_JOURNEY_OLD SET A.I_RO_JOURNEY = B.I_RO_JOURNEY_NEW WHERE  A.T_SESSION >= B.T_WITECH_SCAN_EARLIEST;
UPDATE wiTECH_ECU_SUPPLEMENTAL_COMSER_DATA				A JOIN MIGRATION_MAPPING_FOR_wiTECH B ON A.I_RO_JOURNEY = B.I_RO_JOURNEY_OLD SET A.I_RO_JOURNEY = B.I_RO_JOURNEY_NEW WHERE  A.T_SESSION >= B.T_WITECH_SCAN_EARLIEST;
COMMIT;
UPDATE wiTECH_ECU_SUPPLEMENTAL_DATA						A JOIN MIGRATION_MAPPING_FOR_wiTECH B ON A.I_RO_JOURNEY = B.I_RO_JOURNEY_OLD SET A.I_RO_JOURNEY = B.I_RO_JOURNEY_NEW WHERE  A.T_SESSION >= B.T_WITECH_SCAN_EARLIEST;
COMMIT;
#UPDATE wiTECH_ECU_EVENT_ADDNL_DATA						A JOIN MIGRATION_MAPPING_FOR_wiTECH B ON A.I_RO_JOURNEY = B.I_RO_JOURNEY_OLD SET A.I_RO_JOURNEY = B.I_RO_JOURNEY_NEW WHERE  A.T_SESSION >= B.T_WITECH_SCAN_EARLIEST;
UPDATE wiTECH_ECU_EVENT_DATA							A JOIN MIGRATION_MAPPING_FOR_wiTECH B ON A.I_RO_JOURNEY = B.I_RO_JOURNEY_OLD SET A.I_RO_JOURNEY = B.I_RO_JOURNEY_NEW WHERE  A.T_SESSION >= B.T_WITECH_SCAN_EARLIEST;
COMMIT;
#UPDATE wiTECH_ECU_FF_ADDNL_DATA						A JOIN MIGRATION_MAPPING_FOR_wiTECH B ON A.I_RO_JOURNEY = B.I_RO_JOURNEY_OLD SET A.I_RO_JOURNEY = B.I_RO_JOURNEY_NEW WHERE  A.T_SESSION >= B.T_WITECH_SCAN_EARLIEST;
UPDATE wiTECH_ECU_FF_DATA								A JOIN MIGRATION_MAPPING_FOR_wiTECH B ON A.I_RO_JOURNEY = B.I_RO_JOURNEY_OLD SET A.I_RO_JOURNEY = B.I_RO_JOURNEY_NEW WHERE  A.T_SESSION >= B.T_WITECH_SCAN_EARLIEST;
COMMIT;
UPDATE wiTECH_DTC_SNAP_ENV_DATA							A JOIN MIGRATION_MAPPING_FOR_wiTECH B ON A.I_RO_JOURNEY = B.I_RO_JOURNEY_OLD SET A.I_RO_JOURNEY = B.I_RO_JOURNEY_NEW WHERE  A.T_SESSION >= B.T_WITECH_SCAN_EARLIEST;
COMMIT;
UPDATE wiTECH_DTC_DATA									A JOIN MIGRATION_MAPPING_FOR_wiTECH B ON A.I_RO_JOURNEY = B.I_RO_JOURNEY_OLD SET A.I_RO_JOURNEY = B.I_RO_JOURNEY_NEW WHERE  A.T_SESSION >= B.T_WITECH_SCAN_EARLIEST;
COMMIT;
UPDATE wiTECH_ECU_RAW_DTC_DATA							A JOIN MIGRATION_MAPPING_FOR_wiTECH B ON A.I_RO_JOURNEY = B.I_RO_JOURNEY_OLD SET A.I_RO_JOURNEY = B.I_RO_JOURNEY_NEW WHERE  A.T_SESSION >= B.T_WITECH_SCAN_EARLIEST;
COMMIT;
UPDATE wiTECH_ECU_DATA									A JOIN MIGRATION_MAPPING_FOR_wiTECH B ON A.I_RO_JOURNEY = B.I_RO_JOURNEY_OLD SET A.I_RO_JOURNEY = B.I_RO_JOURNEY_NEW WHERE  A.T_SESSION >= B.T_WITECH_SCAN_EARLIEST;
COMMIT;
UPDATE wiTECH_VEH_DATA									A JOIN MIGRATION_MAPPING_FOR_wiTECH B ON A.I_RO_JOURNEY = B.I_RO_JOURNEY_OLD SET A.I_RO_JOURNEY = B.I_RO_JOURNEY_NEW WHERE  A.T_SESSION >= B.T_WITECH_SCAN_EARLIEST;


COMMIT WORK;
END
==============
CREATE DEFINER=`t12247adm`@`%` PROCEDURE `db_12247_d_001_instance_1`.`UPDATE_WITECH_WIADVISOR`(
)
    SQL SECURITY INVOKER
BEGIN


DECLARE EXIT HANDLER FOR SQLEXCEPTION
BEGIN
SHOW ERRORS;
ROLLBACK;
END;

START TRANSACTION;

SET SQL_SAFE_UPDATES = 0;

#UPDATE wiTECH_ECU_MEGAKNOCK_COMSER_CONV_ADDNL_DATA 		A,MAPPING_FOR_wiTECH B SET A.I_RO_JOURNEY = B.I_RO_JOURNEY_NEW WHERE A.I_RO_JOURNEY = B.I_RO_JOURNEY_OLD  ;
UPDATE wiTECH_ECU_MEGAKNOCK_COMSER_DATA					A,MAPPING_FOR_wiTECH B SET A.I_RO_JOURNEY = B.I_RO_JOURNEY_NEW WHERE A.I_RO_JOURNEY = B.I_RO_JOURNEY_OLD  ;
UPDATE wiTECH_ECU_MEGAKNOCK_DATA						A,MAPPING_FOR_wiTECH B SET A.I_RO_JOURNEY = B.I_RO_JOURNEY_NEW WHERE A.I_RO_JOURNEY = B.I_RO_JOURNEY_OLD  ;
UPDATE wiTECH_ECU_SUPPLEMENTAL_LEGISLATIVE_DATA			A,MAPPING_FOR_wiTECH B SET A.I_RO_JOURNEY = B.I_RO_JOURNEY_NEW WHERE A.I_RO_JOURNEY = B.I_RO_JOURNEY_OLD  ;
#UPDATE wiTECH_ECU_SUPPLEMENTAL_COMSER_CONV_ADDNL_DATA	A,MAPPING_FOR_wiTECH B SET A.I_RO_JOURNEY = B.I_RO_JOURNEY_NEW WHERE A.I_RO_JOURNEY = B.I_RO_JOURNEY_OLD  ;
UPDATE wiTECH_ECU_SUPPLEMENTAL_COMSER_DATA				A,MAPPING_FOR_wiTECH B SET A.I_RO_JOURNEY = B.I_RO_JOURNEY_NEW WHERE A.I_RO_JOURNEY = B.I_RO_JOURNEY_OLD  ;
UPDATE wiTECH_ECU_SUPPLEMENTAL_DATA						A,MAPPING_FOR_wiTECH B SET A.I_RO_JOURNEY = B.I_RO_JOURNEY_NEW WHERE A.I_RO_JOURNEY = B.I_RO_JOURNEY_OLD  ;
#UPDATE wiTECH_ECU_EVENT_ADDNL_DATA						A,MAPPING_FOR_wiTECH B SET A.I_RO_JOURNEY = B.I_RO_JOURNEY_NEW WHERE A.I_RO_JOURNEY = B.I_RO_JOURNEY_OLD  ;
UPDATE wiTECH_ECU_EVENT_DATA							A,MAPPING_FOR_wiTECH B SET A.I_RO_JOURNEY = B.I_RO_JOURNEY_NEW WHERE A.I_RO_JOURNEY = B.I_RO_JOURNEY_OLD  ;
#UPDATE wiTECH_ECU_FF_ADDNL_DATA							A,MAPPING_FOR_wiTECH B SET A.I_RO_JOURNEY = B.I_RO_JOURNEY_NEW WHERE A.I_RO_JOURNEY = B.I_RO_JOURNEY_OLD  ;
UPDATE wiTECH_ECU_FF_DATA								A,MAPPING_FOR_wiTECH B SET A.I_RO_JOURNEY = B.I_RO_JOURNEY_NEW WHERE A.I_RO_JOURNEY = B.I_RO_JOURNEY_OLD  ;
UPDATE wiTECH_DTC_SNAP_ENV_DATA							A,MAPPING_FOR_wiTECH B SET A.I_RO_JOURNEY = B.I_RO_JOURNEY_NEW WHERE A.I_RO_JOURNEY = B.I_RO_JOURNEY_OLD  ;
UPDATE wiTECH_DTC_DATA									A,MAPPING_FOR_wiTECH B SET A.I_RO_JOURNEY = B.I_RO_JOURNEY_NEW WHERE A.I_RO_JOURNEY = B.I_RO_JOURNEY_OLD  ;
UPDATE wiTECH_ECU_RAW_DTC_DATA							A,MAPPING_FOR_wiTECH B SET A.I_RO_JOURNEY = B.I_RO_JOURNEY_NEW WHERE A.I_RO_JOURNEY = B.I_RO_JOURNEY_OLD  ;
UPDATE wiTECH_ECU_DATA									A,MAPPING_FOR_wiTECH B SET A.I_RO_JOURNEY = B.I_RO_JOURNEY_NEW WHERE A.I_RO_JOURNEY = B.I_RO_JOURNEY_OLD  ;
UPDATE wiTECH_VEH_DATA									A,MAPPING_FOR_wiTECH B SET A.I_RO_JOURNEY = B.I_RO_JOURNEY_NEW WHERE A.I_RO_JOURNEY = B.I_RO_JOURNEY_OLD  ;


UPDATE wiADVISOR_SELECTED_SERVICE 		A,MAPPING_FOR_wiADVISOR B SET A.I_RO_JOURNEY = B.I_RO_JOURNEY_NEW WHERE A.I_RO_JOURNEY = B.I_RO_JOURNEY_OLD  ;
UPDATE wiADVISOR_ECU_DATA 				A,MAPPING_FOR_wiADVISOR B SET A.I_RO_JOURNEY = B.I_RO_JOURNEY_NEW WHERE A.I_RO_JOURNEY = B.I_RO_JOURNEY_OLD  ;
UPDATE wiADVISOR_VEH_WARNING_MSGS 		A,MAPPING_FOR_wiADVISOR B SET A.I_RO_JOURNEY = B.I_RO_JOURNEY_NEW WHERE A.I_RO_JOURNEY = B.I_RO_JOURNEY_OLD  ;
UPDATE wiADVISOR_SERVICE_CONTRACTS 		A,MAPPING_FOR_wiADVISOR B SET A.I_RO_JOURNEY = B.I_RO_JOURNEY_NEW WHERE A.I_RO_JOURNEY = B.I_RO_JOURNEY_OLD  ; 
UPDATE wiADVISOR_DTC_DATA 				A,MAPPING_FOR_wiADVISOR B SET A.I_RO_JOURNEY = B.I_RO_JOURNEY_NEW WHERE A.I_RO_JOURNEY = B.I_RO_JOURNEY_OLD  ;



#UPDATE wiTECH_ECU_MEGAKNOCK_COMSER_CONV_ADDNL_DATA 		A,MAPPING_FOR_wiTECH B SET A.I_RO_JOURNEY = B.I_RO_JOURNEY_NEW WHERE A.I_RO_JOURNEY = B.I_RO_JOURNEY_OLD  ;
UPDATE wiTECH_ECU_MEGAKNOCK_COMSER_DATA					A,RO_JOURNEY_DUP_RECORDS B SET A.I_RO_JOURNEY = B.I_RO_JOURNEY WHERE A.I_RO_JOURNEY = B.I_RO_JOURNEY_DUPLICATE ;
UPDATE wiTECH_ECU_MEGAKNOCK_DATA						A,RO_JOURNEY_DUP_RECORDS B SET A.I_RO_JOURNEY = B.I_RO_JOURNEY WHERE A.I_RO_JOURNEY = B.I_RO_JOURNEY_DUPLICATE ;
UPDATE wiTECH_ECU_SUPPLEMENTAL_LEGISLATIVE_DATA			A,RO_JOURNEY_DUP_RECORDS B SET A.I_RO_JOURNEY = B.I_RO_JOURNEY WHERE A.I_RO_JOURNEY = B.I_RO_JOURNEY_DUPLICATE ;
#UPDATE wiTECH_ECU_SUPPLEMENTAL_COMSER_CONV_ADDNL_DATA	A,RO_JOURNEY_DUP_RECORDS B SET A.I_RO_JOURNEY = B.I_RO_JOURNEY WHERE A.I_RO_JOURNEY = B.I_RO_JOURNEY_DUPLICATE ;
UPDATE wiTECH_ECU_SUPPLEMENTAL_COMSER_DATA				A,RO_JOURNEY_DUP_RECORDS B SET A.I_RO_JOURNEY = B.I_RO_JOURNEY WHERE A.I_RO_JOURNEY = B.I_RO_JOURNEY_DUPLICATE ;
UPDATE wiTECH_ECU_SUPPLEMENTAL_DATA						A,RO_JOURNEY_DUP_RECORDS B SET A.I_RO_JOURNEY = B.I_RO_JOURNEY WHERE A.I_RO_JOURNEY = B.I_RO_JOURNEY_DUPLICATE ;
#UPDATE wiTECH_ECU_EVENT_ADDNL_DATA						A,RO_JOURNEY_DUP_RECORDS B SET A.I_RO_JOURNEY = B.I_RO_JOURNEY WHERE A.I_RO_JOURNEY = B.I_RO_JOURNEY_DUPLICATE ;
UPDATE wiTECH_ECU_EVENT_DATA							A,RO_JOURNEY_DUP_RECORDS B SET A.I_RO_JOURNEY = B.I_RO_JOURNEY WHERE A.I_RO_JOURNEY = B.I_RO_JOURNEY_DUPLICATE ;
#UPDATE wiTECH_ECU_FF_ADDNL_DATA						A,RO_JOURNEY_DUP_RECORDS B SET A.I_RO_JOURNEY = B.I_RO_JOURNEY WHERE A.I_RO_JOURNEY = B.I_RO_JOURNEY_DUPLICATE ;
UPDATE wiTECH_ECU_FF_DATA								A,RO_JOURNEY_DUP_RECORDS B SET A.I_RO_JOURNEY = B.I_RO_JOURNEY WHERE A.I_RO_JOURNEY = B.I_RO_JOURNEY_DUPLICATE ;
UPDATE wiTECH_DTC_SNAP_ENV_DATA							A,RO_JOURNEY_DUP_RECORDS B SET A.I_RO_JOURNEY = B.I_RO_JOURNEY WHERE A.I_RO_JOURNEY = B.I_RO_JOURNEY_DUPLICATE ;
UPDATE wiTECH_DTC_DATA									A,RO_JOURNEY_DUP_RECORDS B SET A.I_RO_JOURNEY = B.I_RO_JOURNEY WHERE A.I_RO_JOURNEY = B.I_RO_JOURNEY_DUPLICATE ;
UPDATE wiTECH_ECU_RAW_DTC_DATA							A,RO_JOURNEY_DUP_RECORDS B SET A.I_RO_JOURNEY = B.I_RO_JOURNEY WHERE A.I_RO_JOURNEY = B.I_RO_JOURNEY_DUPLICATE ;
UPDATE wiTECH_ECU_DATA									A,RO_JOURNEY_DUP_RECORDS B SET A.I_RO_JOURNEY = B.I_RO_JOURNEY WHERE A.I_RO_JOURNEY = B.I_RO_JOURNEY_DUPLICATE ;
UPDATE wiTECH_VEH_DATA									A,RO_JOURNEY_DUP_RECORDS B SET A.I_RO_JOURNEY = B.I_RO_JOURNEY WHERE A.I_RO_JOURNEY = B.I_RO_JOURNEY_DUPLICATE ;


UPDATE wiADVISOR_SELECTED_SERVICE 		A,RO_JOURNEY_DUP_RECORDS B SET A.I_RO_JOURNEY = B.I_RO_JOURNEY WHERE A.I_RO_JOURNEY = B.I_RO_JOURNEY_DUPLICATE ;
UPDATE wiADVISOR_ECU_DATA 				A,RO_JOURNEY_DUP_RECORDS B SET A.I_RO_JOURNEY = B.I_RO_JOURNEY WHERE A.I_RO_JOURNEY = B.I_RO_JOURNEY_DUPLICATE ;
UPDATE wiADVISOR_VEH_WARNING_MSGS 		A,RO_JOURNEY_DUP_RECORDS B SET A.I_RO_JOURNEY = B.I_RO_JOURNEY WHERE A.I_RO_JOURNEY = B.I_RO_JOURNEY_DUPLICATE ;
UPDATE wiADVISOR_SERVICE_CONTRACTS 		A,RO_JOURNEY_DUP_RECORDS B SET A.I_RO_JOURNEY = B.I_RO_JOURNEY WHERE A.I_RO_JOURNEY = B.I_RO_JOURNEY_DUPLICATE ;
UPDATE wiADVISOR_DTC_DATA 				A,RO_JOURNEY_DUP_RECORDS B SET A.I_RO_JOURNEY = B.I_RO_JOURNEY WHERE A.I_RO_JOURNEY = B.I_RO_JOURNEY_DUPLICATE ;

COMMIT WORK;
END
